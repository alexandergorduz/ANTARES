
ANTARES.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000029b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002940  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ef  00800100  00800100  000029b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000029b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000029e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00002a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000173f  00000000  00000000  00002b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a90  00000000  00000000  000042b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001072  00000000  00000000  00004d43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000334  00000000  00000000  00005db8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ec  00000000  00000000  000060ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000557  00000000  00000000  000067d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00006d2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9b 00 	jmp	0x136	; 0x136 <__ctors_end>
       4:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
       8:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
       c:	0c 94 ce 0c 	jmp	0x199c	; 0x199c <__vector_3>
      10:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      14:	0c 94 d2 0d 	jmp	0x1ba4	; 0x1ba4 <__vector_5>
      18:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      1c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      20:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      24:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      28:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      2c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      30:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      34:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__vector_13>
      38:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      3c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      40:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_16>
      44:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      48:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      4c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      50:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      54:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      58:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      5c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      60:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      64:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 07       	cpc	r19, r31
      96:	63 42       	sbci	r22, 0x23	; 35
      98:	36 b7       	in	r19, 0x36	; 54
      9a:	9b d8       	rcall	.-3786   	; 0xfffff1d2 <__eeprom_end+0xff7ef1d2>
      9c:	a7 1a       	sub	r10, r23
      9e:	39 68       	ori	r19, 0x89	; 137
      a0:	56 18       	sub	r5, r6
      a2:	ae ba       	out	0x1e, r10	; 30
      a4:	ab 55       	subi	r26, 0x5B	; 91
      a6:	8c 1d       	adc	r24, r12
      a8:	3c b7       	in	r19, 0x3c	; 60
      aa:	cc 57       	subi	r28, 0x7C	; 124
      ac:	63 bd       	out	0x23, r22	; 35
      ae:	6d ed       	ldi	r22, 0xDD	; 221
      b0:	fd 75       	andi	r31, 0x5D	; 93
      b2:	3e f6       	brtc	.-114    	; 0x42 <__SREG__+0x3>
      b4:	17 72       	andi	r17, 0x27	; 39
      b6:	31 bf       	out	0x31, r19	; 49
      b8:	00 00       	nop
      ba:	00 80       	ld	r0, Z
      bc:	3f 05       	cpc	r19, r15
      be:	a8 4c       	sbci	r26, 0xC8	; 200
      c0:	cd b2       	in	r12, 0x1d	; 29
      c2:	d4 4e       	sbci	r29, 0xE4	; 228
      c4:	b9 38       	cpi	r27, 0x89	; 137
      c6:	36 a9       	ldd	r19, Z+54	; 0x36
      c8:	02 0c       	add	r0, r2
      ca:	50 b9       	out	0x00, r21	; 0
      cc:	91 86       	std	Z+9, r9	; 0x09
      ce:	88 08       	sbc	r8, r8
      d0:	3c a6       	std	Y+44, r3	; 0x2c
      d2:	aa aa       	std	Y+50, r10	; 0x32
      d4:	2a be       	out	0x3a, r2	; 58
      d6:	00 00       	nop
      d8:	00 80       	ld	r0, Z
      da:	3f 08       	sbc	r3, r15
      dc:	00 00       	nop
      de:	00 be       	out	0x30, r0	; 48
      e0:	92 24       	eor	r9, r2
      e2:	49 12       	cpse	r4, r25
      e4:	3e ab       	std	Y+54, r19	; 0x36
      e6:	aa aa       	std	Y+50, r10	; 0x32
      e8:	2a be       	out	0x3a, r2	; 58
      ea:	cd cc       	rjmp	.-1638   	; 0xfffffa86 <__eeprom_end+0xff7efa86>
      ec:	cc 4c       	sbci	r28, 0xCC	; 204
      ee:	3e 00       	.word	0x003e	; ????
      f0:	00 00       	nop
      f2:	80 be       	out	0x30, r8	; 48
      f4:	ab aa       	std	Y+51, r10	; 0x33
      f6:	aa aa       	std	Y+50, r10	; 0x32
      f8:	3e 00       	.word	0x003e	; ????
      fa:	00 00       	nop
      fc:	00 bf       	out	0x30, r16	; 48
      fe:	00 00       	nop
     100:	00 80       	ld	r0, Z
     102:	3f 00       	.word	0x003f	; ????
     104:	00 00       	nop
     106:	00 00       	nop
     108:	08 41       	sbci	r16, 0x18	; 24
     10a:	78 d3       	rcall	.+1776   	; 0x7fc <main+0x24c>
     10c:	bb 43       	sbci	r27, 0x3B	; 59
     10e:	87 d1       	rcall	.+782    	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     110:	13 3d       	cpi	r17, 0xD3	; 211
     112:	19 0e       	add	r1, r25
     114:	3c c3       	rjmp	.+1656   	; 0x78e <main+0x1de>
     116:	bd 42       	sbci	r27, 0x2D	; 45
     118:	82 ad       	ldd	r24, Z+58	; 0x3a
     11a:	2b 3e       	cpi	r18, 0xEB	; 235
     11c:	68 ec       	ldi	r22, 0xC8	; 200
     11e:	82 76       	andi	r24, 0x62	; 98
     120:	be d9       	rcall	.-3204   	; 0xfffff49e <__eeprom_end+0xff7ef49e>
     122:	8f e1       	ldi	r24, 0x1F	; 31
     124:	a9 3e       	cpi	r26, 0xE9	; 233
     126:	4c 80       	ldd	r4, Y+4	; 0x04
     128:	ef ff       	.word	0xffef	; ????
     12a:	be 01       	movw	r22, r28
     12c:	c4 ff       	sbrs	r28, 4
     12e:	7f 3f       	cpi	r23, 0xFF	; 255
     130:	00 00       	nop
     132:	00 00       	nop
	...

00000136 <__ctors_end>:
     136:	11 24       	eor	r1, r1
     138:	1f be       	out	0x3f, r1	; 63
     13a:	cf ef       	ldi	r28, 0xFF	; 255
     13c:	d8 e0       	ldi	r29, 0x08	; 8
     13e:	de bf       	out	0x3e, r29	; 62
     140:	cd bf       	out	0x3d, r28	; 61

00000142 <__do_clear_bss>:
     142:	21 e0       	ldi	r18, 0x01	; 1
     144:	a0 e0       	ldi	r26, 0x00	; 0
     146:	b1 e0       	ldi	r27, 0x01	; 1
     148:	01 c0       	rjmp	.+2      	; 0x14c <.do_clear_bss_start>

0000014a <.do_clear_bss_loop>:
     14a:	1d 92       	st	X+, r1

0000014c <.do_clear_bss_start>:
     14c:	af 3e       	cpi	r26, 0xEF	; 239
     14e:	b2 07       	cpc	r27, r18
     150:	e1 f7       	brne	.-8      	; 0x14a <.do_clear_bss_loop>
     152:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <main>
     156:	0c 94 9e 14 	jmp	0x293c	; 0x293c <_exit>

0000015a <__bad_interrupt>:
     15a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000015e <__vector_16>:
     15e:	1f 92       	push	r1
     160:	0f 92       	push	r0
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	0f 92       	push	r0
     166:	11 24       	eor	r1, r1
     168:	0f 93       	push	r16
     16a:	1f 93       	push	r17
     16c:	2f 93       	push	r18
     16e:	3f 93       	push	r19
     170:	4f 93       	push	r20
     172:	5f 93       	push	r21
     174:	6f 93       	push	r22
     176:	7f 93       	push	r23
     178:	8f 93       	push	r24
     17a:	9f 93       	push	r25
     17c:	af 93       	push	r26
     17e:	bf 93       	push	r27
     180:	00 91 01 01 	lds	r16, 0x0101	; 0x800101 <timer0Millis>
     184:	10 91 02 01 	lds	r17, 0x0102	; 0x800102 <timer0Millis+0x1>
     188:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <timer0Millis+0x2>
     18c:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <timer0Millis+0x3>
     190:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     194:	b9 01       	movw	r22, r18
     196:	a8 01       	movw	r20, r16
     198:	4f 5f       	subi	r20, 0xFF	; 255
     19a:	5f 4f       	sbci	r21, 0xFF	; 255
     19c:	6f 4f       	sbci	r22, 0xFF	; 255
     19e:	7f 4f       	sbci	r23, 0xFF	; 255
     1a0:	83 e0       	ldi	r24, 0x03	; 3
     1a2:	89 0f       	add	r24, r25
     1a4:	8d 37       	cpi	r24, 0x7D	; 125
     1a6:	40 f0       	brcs	.+16     	; 0x1b8 <__vector_16+0x5a>
     1a8:	86 e8       	ldi	r24, 0x86	; 134
     1aa:	89 0f       	add	r24, r25
     1ac:	b9 01       	movw	r22, r18
     1ae:	a8 01       	movw	r20, r16
     1b0:	4e 5f       	subi	r20, 0xFE	; 254
     1b2:	5f 4f       	sbci	r21, 0xFF	; 255
     1b4:	6f 4f       	sbci	r22, 0xFF	; 255
     1b6:	7f 4f       	sbci	r23, 0xFF	; 255
     1b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     1bc:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <timer0Millis>
     1c0:	50 93 02 01 	sts	0x0102, r21	; 0x800102 <timer0Millis+0x1>
     1c4:	60 93 03 01 	sts	0x0103, r22	; 0x800103 <timer0Millis+0x2>
     1c8:	70 93 04 01 	sts	0x0104, r23	; 0x800104 <timer0Millis+0x3>
     1cc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0OverflowCount>
     1d0:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0OverflowCount+0x1>
     1d4:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0OverflowCount+0x2>
     1d8:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0OverflowCount+0x3>
     1dc:	01 96       	adiw	r24, 0x01	; 1
     1de:	a1 1d       	adc	r26, r1
     1e0:	b1 1d       	adc	r27, r1
     1e2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer0OverflowCount>
     1e6:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer0OverflowCount+0x1>
     1ea:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer0OverflowCount+0x2>
     1ee:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer0OverflowCount+0x3>
     1f2:	bf 91       	pop	r27
     1f4:	af 91       	pop	r26
     1f6:	9f 91       	pop	r25
     1f8:	8f 91       	pop	r24
     1fa:	7f 91       	pop	r23
     1fc:	6f 91       	pop	r22
     1fe:	5f 91       	pop	r21
     200:	4f 91       	pop	r20
     202:	3f 91       	pop	r19
     204:	2f 91       	pop	r18
     206:	1f 91       	pop	r17
     208:	0f 91       	pop	r16
     20a:	0f 90       	pop	r0
     20c:	0f be       	out	0x3f, r0	; 63
     20e:	0f 90       	pop	r0
     210:	1f 90       	pop	r1
     212:	18 95       	reti

00000214 <currentTime>:
     214:	3f b7       	in	r19, 0x3f	; 63
     216:	8f b7       	in	r24, 0x3f	; 63
     218:	8f 77       	andi	r24, 0x7F	; 127
     21a:	8f bf       	out	0x3f, r24	; 63
     21c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0OverflowCount>
     220:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0OverflowCount+0x1>
     224:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0OverflowCount+0x2>
     228:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0OverflowCount+0x3>
     22c:	26 b5       	in	r18, 0x26	; 38
     22e:	a8 9b       	sbis	0x15, 0	; 21
     230:	05 c0       	rjmp	.+10     	; 0x23c <currentTime+0x28>
     232:	2f 3f       	cpi	r18, 0xFF	; 255
     234:	19 f0       	breq	.+6      	; 0x23c <currentTime+0x28>
     236:	01 96       	adiw	r24, 0x01	; 1
     238:	a1 1d       	adc	r26, r1
     23a:	b1 1d       	adc	r27, r1
     23c:	3f bf       	out	0x3f, r19	; 63
     23e:	ba 2f       	mov	r27, r26
     240:	a9 2f       	mov	r26, r25
     242:	98 2f       	mov	r25, r24
     244:	88 27       	eor	r24, r24
     246:	82 0f       	add	r24, r18
     248:	91 1d       	adc	r25, r1
     24a:	a1 1d       	adc	r26, r1
     24c:	b1 1d       	adc	r27, r1
     24e:	bc 01       	movw	r22, r24
     250:	cd 01       	movw	r24, r26
     252:	66 0f       	add	r22, r22
     254:	77 1f       	adc	r23, r23
     256:	88 1f       	adc	r24, r24
     258:	99 1f       	adc	r25, r25
     25a:	66 0f       	add	r22, r22
     25c:	77 1f       	adc	r23, r23
     25e:	88 1f       	adc	r24, r24
     260:	99 1f       	adc	r25, r25
     262:	08 95       	ret

00000264 <delayMicros>:
     264:	82 30       	cpi	r24, 0x02	; 2
     266:	91 05       	cpc	r25, r1
     268:	38 f0       	brcs	.+14     	; 0x278 <delayMicros+0x14>
     26a:	88 0f       	add	r24, r24
     26c:	99 1f       	adc	r25, r25
     26e:	88 0f       	add	r24, r24
     270:	99 1f       	adc	r25, r25
     272:	05 97       	sbiw	r24, 0x05	; 5
     274:	01 97       	sbiw	r24, 0x01	; 1
     276:	f1 f7       	brne	.-4      	; 0x274 <delayMicros+0x10>
     278:	08 95       	ret

0000027a <analogRead>:
     27a:	87 70       	andi	r24, 0x07	; 7
     27c:	80 64       	ori	r24, 0x40	; 64
     27e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
     282:	ea e7       	ldi	r30, 0x7A	; 122
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	80 64       	ori	r24, 0x40	; 64
     28a:	80 83       	st	Z, r24
     28c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     290:	86 fd       	sbrc	r24, 6
     292:	fc cf       	rjmp	.-8      	; 0x28c <analogRead+0x12>
     294:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     298:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	98 2f       	mov	r25, r24
     2a0:	88 27       	eor	r24, r24
     2a2:	82 2b       	or	r24, r18
     2a4:	08 95       	ret

000002a6 <initBasic>:
     2a6:	8f b7       	in	r24, 0x3f	; 63
     2a8:	80 68       	ori	r24, 0x80	; 128
     2aa:	8f bf       	out	0x3f, r24	; 63
     2ac:	85 b5       	in	r24, 0x25	; 37
     2ae:	82 60       	ori	r24, 0x02	; 2
     2b0:	85 bd       	out	0x25, r24	; 37
     2b2:	85 b5       	in	r24, 0x25	; 37
     2b4:	81 60       	ori	r24, 0x01	; 1
     2b6:	85 bd       	out	0x25, r24	; 37
     2b8:	ee e6       	ldi	r30, 0x6E	; 110
     2ba:	f0 e0       	ldi	r31, 0x00	; 0
     2bc:	80 81       	ld	r24, Z
     2be:	81 60       	ori	r24, 0x01	; 1
     2c0:	80 83       	st	Z, r24
     2c2:	ea e7       	ldi	r30, 0x7A	; 122
     2c4:	f0 e0       	ldi	r31, 0x00	; 0
     2c6:	80 81       	ld	r24, Z
     2c8:	84 60       	ori	r24, 0x04	; 4
     2ca:	80 83       	st	Z, r24
     2cc:	80 81       	ld	r24, Z
     2ce:	82 60       	ori	r24, 0x02	; 2
     2d0:	80 83       	st	Z, r24
     2d2:	80 81       	ld	r24, Z
     2d4:	81 60       	ori	r24, 0x01	; 1
     2d6:	80 83       	st	Z, r24
     2d8:	80 81       	ld	r24, Z
     2da:	80 68       	ori	r24, 0x80	; 128
     2dc:	80 83       	st	Z, r24
     2de:	08 95       	ret

000002e0 <__vector_13>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "buzzer.h"

ISR (TIMER1_OVF_vect)
{
     2e0:	1f 92       	push	r1
     2e2:	0f 92       	push	r0
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	0f 92       	push	r0
     2e8:	11 24       	eor	r1, r1
     2ea:	8f 93       	push	r24
     2ec:	9f 93       	push	r25
	TCNT1H = 0b11100000;
     2ee:	80 ee       	ldi	r24, 0xE0	; 224
     2f0:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	TCNT1L = 0b00000000;
     2f4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	PORTB ^= (1<<PB4);
     2f8:	95 b1       	in	r25, 0x05	; 5
     2fa:	80 e1       	ldi	r24, 0x10	; 16
     2fc:	89 27       	eor	r24, r25
     2fe:	85 b9       	out	0x05, r24	; 5
}
     300:	9f 91       	pop	r25
     302:	8f 91       	pop	r24
     304:	0f 90       	pop	r0
     306:	0f be       	out	0x3f, r0	; 63
     308:	0f 90       	pop	r0
     30a:	1f 90       	pop	r1
     30c:	18 95       	reti

0000030e <tone>:

void tone()
{
	TCCR1B |= (1<<CS10);
     30e:	e1 e8       	ldi	r30, 0x81	; 129
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	80 81       	ld	r24, Z
     314:	81 60       	ori	r24, 0x01	; 1
     316:	80 83       	st	Z, r24
     318:	08 95       	ret

0000031a <noTone>:
}

void noTone()
{
	TCCR1B &= ~(1<<CS10);
     31a:	e1 e8       	ldi	r30, 0x81	; 129
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	80 81       	ld	r24, Z
     320:	8e 7f       	andi	r24, 0xFE	; 254
     322:	80 83       	st	Z, r24
     324:	08 95       	ret

00000326 <initBuzz>:
}

void initBuzz()
{
	SREG |= (1<<7);
     326:	8f b7       	in	r24, 0x3f	; 63
     328:	80 68       	ori	r24, 0x80	; 128
     32a:	8f bf       	out	0x3f, r24	; 63
	
	TIMSK1 |= (1<<TOIE1);
     32c:	ef e6       	ldi	r30, 0x6F	; 111
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	80 81       	ld	r24, Z
     332:	81 60       	ori	r24, 0x01	; 1
     334:	80 83       	st	Z, r24
     336:	08 95       	ret

00000338 <twiStart>:
	twiStop();
}

void twiStart()
{
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     338:	84 ea       	ldi	r24, 0xA4	; 164
     33a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
     33e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     342:	88 23       	and	r24, r24
     344:	e4 f7       	brge	.-8      	; 0x33e <twiStart+0x6>
}
     346:	08 95       	ret

00000348 <twiStop>:

void twiStop()
{
	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     348:	84 e9       	ldi	r24, 0x94	; 148
     34a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(TWCR & (1<<TWSTO));
     34e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     352:	84 fd       	sbrc	r24, 4
     354:	fc cf       	rjmp	.-8      	; 0x34e <twiStop+0x6>
}
     356:	08 95       	ret

00000358 <twiSend>:

void twiSend(unsigned char c)
{
	TWDR = c;
     358:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     35c:	84 e8       	ldi	r24, 0x84	; 132
     35e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
     362:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     366:	88 23       	and	r24, r24
     368:	e4 f7       	brge	.-8      	; 0x362 <twiSend+0xa>
}
     36a:	08 95       	ret

0000036c <initIMURegs>:
	twiStop();
}

void initIMURegs()
{
	twiStart();
     36c:	0e 94 9c 01 	call	0x338	; 0x338 <twiStart>
	twiSend(0b11010000);
     370:	80 ed       	ldi	r24, 0xD0	; 208
     372:	0e 94 ac 01 	call	0x358	; 0x358 <twiSend>
	twiSend(0b01101011);
     376:	8b e6       	ldi	r24, 0x6B	; 107
     378:	0e 94 ac 01 	call	0x358	; 0x358 <twiSend>
	twiSend(0b00000000);
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	0e 94 ac 01 	call	0x358	; 0x358 <twiSend>
	twiStop();
     382:	0e 94 a4 01 	call	0x348	; 0x348 <twiStop>
	
	twiStart();
     386:	0e 94 9c 01 	call	0x338	; 0x338 <twiStart>
	twiSend(0b11010000);
     38a:	80 ed       	ldi	r24, 0xD0	; 208
     38c:	0e 94 ac 01 	call	0x358	; 0x358 <twiSend>
	twiSend(0b00011011);
     390:	8b e1       	ldi	r24, 0x1B	; 27
     392:	0e 94 ac 01 	call	0x358	; 0x358 <twiSend>
	twiSend(0b00001000);
     396:	88 e0       	ldi	r24, 0x08	; 8
     398:	0e 94 ac 01 	call	0x358	; 0x358 <twiSend>
	twiStop();
     39c:	0e 94 a4 01 	call	0x348	; 0x348 <twiStop>
	
	twiStart();
     3a0:	0e 94 9c 01 	call	0x338	; 0x338 <twiStart>
	twiSend(0b11010000);
     3a4:	80 ed       	ldi	r24, 0xD0	; 208
     3a6:	0e 94 ac 01 	call	0x358	; 0x358 <twiSend>
	twiSend(0b00011100);
     3aa:	8c e1       	ldi	r24, 0x1C	; 28
     3ac:	0e 94 ac 01 	call	0x358	; 0x358 <twiSend>
	twiSend(0b00010000);
     3b0:	80 e1       	ldi	r24, 0x10	; 16
     3b2:	0e 94 ac 01 	call	0x358	; 0x358 <twiSend>
	twiStop();
     3b6:	0e 94 a4 01 	call	0x348	; 0x348 <twiStop>
	
	twiStart();
     3ba:	0e 94 9c 01 	call	0x338	; 0x338 <twiStart>
	twiSend(0b11010000);
     3be:	80 ed       	ldi	r24, 0xD0	; 208
     3c0:	0e 94 ac 01 	call	0x358	; 0x358 <twiSend>
	twiSend(0b00011010);
     3c4:	8a e1       	ldi	r24, 0x1A	; 26
     3c6:	0e 94 ac 01 	call	0x358	; 0x358 <twiSend>
	twiSend(0b00000011);
     3ca:	83 e0       	ldi	r24, 0x03	; 3
     3cc:	0e 94 ac 01 	call	0x358	; 0x358 <twiSend>
	twiStop();
     3d0:	0e 94 a4 01 	call	0x348	; 0x348 <twiStop>
     3d4:	08 95       	ret

000003d6 <twiRead>:
	while(!(TWCR & (1<<TWINT)));
}

unsigned char twiRead()
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     3d6:	84 ec       	ldi	r24, 0xC4	; 196
     3d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
     3dc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3e0:	88 23       	and	r24, r24
     3e2:	e4 f7       	brge	.-8      	; 0x3dc <twiRead+0x6>
	return TWDR;
     3e4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     3e8:	08 95       	ret

000003ea <twiReadLast>:

unsigned char twiReadLast()
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     3ea:	84 e8       	ldi	r24, 0x84	; 132
     3ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
     3f0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     3f4:	88 23       	and	r24, r24
     3f6:	e4 f7       	brge	.-8      	; 0x3f0 <twiReadLast+0x6>
	return TWDR;
     3f8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     3fc:	08 95       	ret

000003fe <readIMU>:
float xAcc, yAcc, zAcc;
float rollRateIn, pitchRateIn, yawRateIn;
int temp;

void readIMU()
{
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
	twiStart();
     402:	0e 94 9c 01 	call	0x338	; 0x338 <twiStart>
	twiSend(0b11010000);
     406:	80 ed       	ldi	r24, 0xD0	; 208
     408:	0e 94 ac 01 	call	0x358	; 0x358 <twiSend>
	twiSend(0b00111011);
     40c:	8b e3       	ldi	r24, 0x3B	; 59
     40e:	0e 94 ac 01 	call	0x358	; 0x358 <twiSend>
	twiStart();
     412:	0e 94 9c 01 	call	0x338	; 0x338 <twiStart>
	twiSend(0b11010001);
     416:	81 ed       	ldi	r24, 0xD1	; 209
     418:	0e 94 ac 01 	call	0x358	; 0x358 <twiSend>
	
	xAcc = (twiRead()<<8 | twiRead()) / 4096.0;
     41c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <twiRead>
     420:	c8 2f       	mov	r28, r24
     422:	d0 e0       	ldi	r29, 0x00	; 0
     424:	dc 2f       	mov	r29, r28
     426:	cc 27       	eor	r28, r28
     428:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <twiRead>
     42c:	be 01       	movw	r22, r28
     42e:	68 2b       	or	r22, r24
     430:	07 2e       	mov	r0, r23
     432:	00 0c       	add	r0, r0
     434:	88 0b       	sbc	r24, r24
     436:	99 0b       	sbc	r25, r25
     438:	0e 94 23 11 	call	0x2246	; 0x2246 <__floatsisf>
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	40 e8       	ldi	r20, 0x80	; 128
     442:	59 e3       	ldi	r21, 0x39	; 57
     444:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     448:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <xAcc>
     44c:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <xAcc+0x1>
     450:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <xAcc+0x2>
     454:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <xAcc+0x3>
	yAcc = (twiRead()<<8 | twiRead()) / 4096.0;
     458:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <twiRead>
     45c:	c8 2f       	mov	r28, r24
     45e:	d0 e0       	ldi	r29, 0x00	; 0
     460:	dc 2f       	mov	r29, r28
     462:	cc 27       	eor	r28, r28
     464:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <twiRead>
     468:	be 01       	movw	r22, r28
     46a:	68 2b       	or	r22, r24
     46c:	07 2e       	mov	r0, r23
     46e:	00 0c       	add	r0, r0
     470:	88 0b       	sbc	r24, r24
     472:	99 0b       	sbc	r25, r25
     474:	0e 94 23 11 	call	0x2246	; 0x2246 <__floatsisf>
     478:	20 e0       	ldi	r18, 0x00	; 0
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	40 e8       	ldi	r20, 0x80	; 128
     47e:	59 e3       	ldi	r21, 0x39	; 57
     480:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     484:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <yAcc>
     488:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <yAcc+0x1>
     48c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <yAcc+0x2>
     490:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <yAcc+0x3>
	zAcc = (twiRead()<<8 | twiRead()) / 4096.0;
     494:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <twiRead>
     498:	c8 2f       	mov	r28, r24
     49a:	d0 e0       	ldi	r29, 0x00	; 0
     49c:	dc 2f       	mov	r29, r28
     49e:	cc 27       	eor	r28, r28
     4a0:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <twiRead>
     4a4:	be 01       	movw	r22, r28
     4a6:	68 2b       	or	r22, r24
     4a8:	07 2e       	mov	r0, r23
     4aa:	00 0c       	add	r0, r0
     4ac:	88 0b       	sbc	r24, r24
     4ae:	99 0b       	sbc	r25, r25
     4b0:	0e 94 23 11 	call	0x2246	; 0x2246 <__floatsisf>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	40 e8       	ldi	r20, 0x80	; 128
     4ba:	59 e3       	ldi	r21, 0x39	; 57
     4bc:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     4c0:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <zAcc>
     4c4:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <zAcc+0x1>
     4c8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <zAcc+0x2>
     4cc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <zAcc+0x3>
	temp = twiRead()<<8 | twiRead();
     4d0:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <twiRead>
     4d4:	c8 2f       	mov	r28, r24
     4d6:	d0 e0       	ldi	r29, 0x00	; 0
     4d8:	dc 2f       	mov	r29, r28
     4da:	cc 27       	eor	r28, r28
     4dc:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <twiRead>
     4e0:	c8 2b       	or	r28, r24
     4e2:	d0 93 19 01 	sts	0x0119, r29	; 0x800119 <temp+0x1>
     4e6:	c0 93 18 01 	sts	0x0118, r28	; 0x800118 <temp>
	rollRateIn = (twiRead()<<8 | twiRead()) / 65.5;
     4ea:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <twiRead>
     4ee:	c8 2f       	mov	r28, r24
     4f0:	d0 e0       	ldi	r29, 0x00	; 0
     4f2:	dc 2f       	mov	r29, r28
     4f4:	cc 27       	eor	r28, r28
     4f6:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <twiRead>
     4fa:	be 01       	movw	r22, r28
     4fc:	68 2b       	or	r22, r24
     4fe:	07 2e       	mov	r0, r23
     500:	00 0c       	add	r0, r0
     502:	88 0b       	sbc	r24, r24
     504:	99 0b       	sbc	r25, r25
     506:	0e 94 23 11 	call	0x2246	; 0x2246 <__floatsisf>
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	43 e8       	ldi	r20, 0x83	; 131
     510:	52 e4       	ldi	r21, 0x42	; 66
     512:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__divsf3>
     516:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <rollRateIn>
     51a:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <rollRateIn+0x1>
     51e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <rollRateIn+0x2>
     522:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <rollRateIn+0x3>
	pitchRateIn = (twiRead()<<8 | twiRead()) / 65.5;
     526:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <twiRead>
     52a:	c8 2f       	mov	r28, r24
     52c:	d0 e0       	ldi	r29, 0x00	; 0
     52e:	dc 2f       	mov	r29, r28
     530:	cc 27       	eor	r28, r28
     532:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <twiRead>
     536:	be 01       	movw	r22, r28
     538:	68 2b       	or	r22, r24
     53a:	07 2e       	mov	r0, r23
     53c:	00 0c       	add	r0, r0
     53e:	88 0b       	sbc	r24, r24
     540:	99 0b       	sbc	r25, r25
     542:	0e 94 23 11 	call	0x2246	; 0x2246 <__floatsisf>
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	43 e8       	ldi	r20, 0x83	; 131
     54c:	52 e4       	ldi	r21, 0x42	; 66
     54e:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__divsf3>
     552:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <pitchRateIn>
     556:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <pitchRateIn+0x1>
     55a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <pitchRateIn+0x2>
     55e:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <pitchRateIn+0x3>
	yawRateIn = (twiRead()<<8 | twiReadLast()) / 65.5;
     562:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <twiRead>
     566:	c8 2f       	mov	r28, r24
     568:	d0 e0       	ldi	r29, 0x00	; 0
     56a:	dc 2f       	mov	r29, r28
     56c:	cc 27       	eor	r28, r28
     56e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <twiReadLast>
     572:	be 01       	movw	r22, r28
     574:	68 2b       	or	r22, r24
     576:	07 2e       	mov	r0, r23
     578:	00 0c       	add	r0, r0
     57a:	88 0b       	sbc	r24, r24
     57c:	99 0b       	sbc	r25, r25
     57e:	0e 94 23 11 	call	0x2246	; 0x2246 <__floatsisf>
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	43 e8       	ldi	r20, 0x83	; 131
     588:	52 e4       	ldi	r21, 0x42	; 66
     58a:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__divsf3>
     58e:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <yawRateIn>
     592:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <yawRateIn+0x1>
     596:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <yawRateIn+0x2>
     59a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <yawRateIn+0x3>
	
	twiStop();
     59e:	0e 94 a4 01 	call	0x348	; 0x348 <twiStop>
}
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	08 95       	ret

000005a8 <initIMU>:
	return TWDR;
}

void initIMU()
{
	TWBR = 0b00001100;
     5a8:	8c e0       	ldi	r24, 0x0C	; 12
     5aa:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     5ae:	08 95       	ret

000005b0 <main>:
unsigned long escfrTmr, escrrTmr, escrlTmr, escflTmr, escsCurrTime;

unsigned long loopTmr;

int main(void)
{
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	64 97       	sbiw	r28, 0x14	; 20
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
	initBasic();
     5c4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <initBasic>
	initIMU();
     5c8:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <initIMU>
	initBuzz();
     5cc:	0e 94 93 01 	call	0x326	; 0x326 <initBuzz>
	
	DDRD |= 0b11110000;
     5d0:	8a b1       	in	r24, 0x0a	; 10
     5d2:	80 6f       	ori	r24, 0xF0	; 240
     5d4:	8a b9       	out	0x0a, r24	; 10
	DDRB |= 0b00110000;
     5d6:	84 b1       	in	r24, 0x04	; 4
     5d8:	80 63       	ori	r24, 0x30	; 48
     5da:	84 b9       	out	0x04, r24	; 4
	
	PORTB |= (1<<5);
     5dc:	85 b1       	in	r24, 0x05	; 5
     5de:	80 62       	ori	r24, 0x20	; 32
     5e0:	85 b9       	out	0x05, r24	; 5
	
	initIMURegs();
     5e2:	0e 94 b6 01 	call	0x36c	; 0x36c <initIMURegs>
	
	for (int i = 0; i < 1250; i++)
     5e6:	e1 2c       	mov	r14, r1
     5e8:	f1 2c       	mov	r15, r1
     5ea:	23 c0       	rjmp	.+70     	; 0x632 <main+0x82>
	{
		if (i % 30 == 0) tone();
     5ec:	c7 01       	movw	r24, r14
     5ee:	6e e1       	ldi	r22, 0x1E	; 30
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	0e 94 76 14 	call	0x28ec	; 0x28ec <__divmodhi4>
     5f6:	89 2b       	or	r24, r25
     5f8:	11 f4       	brne	.+4      	; 0x5fe <main+0x4e>
     5fa:	0e 94 87 01 	call	0x30e	; 0x30e <tone>
		if (i % 60 == 0) noTone();
     5fe:	c7 01       	movw	r24, r14
     600:	6c e3       	ldi	r22, 0x3C	; 60
     602:	70 e0       	ldi	r23, 0x00	; 0
     604:	0e 94 76 14 	call	0x28ec	; 0x28ec <__divmodhi4>
     608:	89 2b       	or	r24, r25
     60a:	11 f4       	brne	.+4      	; 0x610 <main+0x60>
     60c:	0e 94 8d 01 	call	0x31a	; 0x31a <noTone>
		
		PORTD |= 0b11110000;
     610:	8b b1       	in	r24, 0x0b	; 11
     612:	80 6f       	ori	r24, 0xF0	; 240
     614:	8b b9       	out	0x0b, r24	; 11
		delayMicros(1000);
     616:	88 ee       	ldi	r24, 0xE8	; 232
     618:	93 e0       	ldi	r25, 0x03	; 3
     61a:	0e 94 32 01 	call	0x264	; 0x264 <delayMicros>
		PORTD &= 0b00001111;
     61e:	8b b1       	in	r24, 0x0b	; 11
     620:	8f 70       	andi	r24, 0x0F	; 15
     622:	8b b9       	out	0x0b, r24	; 11
		delayMicros(3000);
     624:	88 eb       	ldi	r24, 0xB8	; 184
     626:	9b e0       	ldi	r25, 0x0B	; 11
     628:	0e 94 32 01 	call	0x264	; 0x264 <delayMicros>
	
	PORTB |= (1<<5);
	
	initIMURegs();
	
	for (int i = 0; i < 1250; i++)
     62c:	2f ef       	ldi	r18, 0xFF	; 255
     62e:	e2 1a       	sub	r14, r18
     630:	f2 0a       	sbc	r15, r18
     632:	32 ee       	ldi	r19, 0xE2	; 226
     634:	e3 16       	cp	r14, r19
     636:	34 e0       	ldi	r19, 0x04	; 4
     638:	f3 06       	cpc	r15, r19
     63a:	c4 f2       	brlt	.-80     	; 0x5ec <main+0x3c>
		PORTD |= 0b11110000;
		delayMicros(1000);
		PORTD &= 0b00001111;
		delayMicros(3000);
	}
	noTone();
     63c:	0e 94 8d 01 	call	0x31a	; 0x31a <noTone>
	
	for (int i = 0; i < 1000; i++)
     640:	e1 2c       	mov	r14, r1
     642:	f1 2c       	mov	r15, r1
     644:	73 c0       	rjmp	.+230    	; 0x72c <main+0x17c>
	{
		if (i % 15 == 0) tone();
     646:	c7 01       	movw	r24, r14
     648:	6f e0       	ldi	r22, 0x0F	; 15
     64a:	70 e0       	ldi	r23, 0x00	; 0
     64c:	0e 94 76 14 	call	0x28ec	; 0x28ec <__divmodhi4>
     650:	89 2b       	or	r24, r25
     652:	11 f4       	brne	.+4      	; 0x658 <main+0xa8>
     654:	0e 94 87 01 	call	0x30e	; 0x30e <tone>
		if (i % 30 == 0) noTone();
     658:	c7 01       	movw	r24, r14
     65a:	6e e1       	ldi	r22, 0x1E	; 30
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	0e 94 76 14 	call	0x28ec	; 0x28ec <__divmodhi4>
     662:	89 2b       	or	r24, r25
     664:	11 f4       	brne	.+4      	; 0x66a <main+0xba>
     666:	0e 94 8d 01 	call	0x31a	; 0x31a <noTone>
		
		readIMU();
     66a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <readIMU>
		
		rollRateInitErr += rollRateIn;
     66e:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <rollRateIn>
     672:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <rollRateIn+0x1>
     676:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <rollRateIn+0x2>
     67a:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <rollRateIn+0x3>
     67e:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <rollRateInitErr>
     682:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <rollRateInitErr+0x1>
     686:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <rollRateInitErr+0x2>
     68a:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <rollRateInitErr+0x3>
     68e:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
     692:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <rollRateInitErr>
     696:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <rollRateInitErr+0x1>
     69a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <rollRateInitErr+0x2>
     69e:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <rollRateInitErr+0x3>
		pitchRateInitErr += pitchRateIn;
     6a2:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <pitchRateIn>
     6a6:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <pitchRateIn+0x1>
     6aa:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <pitchRateIn+0x2>
     6ae:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <pitchRateIn+0x3>
     6b2:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <pitchRateInitErr>
     6b6:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <pitchRateInitErr+0x1>
     6ba:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <pitchRateInitErr+0x2>
     6be:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <pitchRateInitErr+0x3>
     6c2:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
     6c6:	60 93 68 01 	sts	0x0168, r22	; 0x800168 <pitchRateInitErr>
     6ca:	70 93 69 01 	sts	0x0169, r23	; 0x800169 <pitchRateInitErr+0x1>
     6ce:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <pitchRateInitErr+0x2>
     6d2:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <pitchRateInitErr+0x3>
		yawRateInitErr += yawRateIn;
     6d6:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <yawRateIn>
     6da:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <yawRateIn+0x1>
     6de:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <yawRateIn+0x2>
     6e2:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <yawRateIn+0x3>
     6e6:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <yawRateInitErr>
     6ea:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <yawRateInitErr+0x1>
     6ee:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <yawRateInitErr+0x2>
     6f2:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <yawRateInitErr+0x3>
     6f6:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
     6fa:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <yawRateInitErr>
     6fe:	70 93 41 01 	sts	0x0141, r23	; 0x800141 <yawRateInitErr+0x1>
     702:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <yawRateInitErr+0x2>
     706:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <yawRateInitErr+0x3>
		
		PORTD |= 0b11110000;
     70a:	8b b1       	in	r24, 0x0b	; 11
     70c:	80 6f       	ori	r24, 0xF0	; 240
     70e:	8b b9       	out	0x0b, r24	; 11
		delayMicros(1000);
     710:	88 ee       	ldi	r24, 0xE8	; 232
     712:	93 e0       	ldi	r25, 0x03	; 3
     714:	0e 94 32 01 	call	0x264	; 0x264 <delayMicros>
		PORTD &= 0b00001111;
     718:	8b b1       	in	r24, 0x0b	; 11
     71a:	8f 70       	andi	r24, 0x0F	; 15
     71c:	8b b9       	out	0x0b, r24	; 11
		delayMicros(3000);
     71e:	88 eb       	ldi	r24, 0xB8	; 184
     720:	9b e0       	ldi	r25, 0x0B	; 11
     722:	0e 94 32 01 	call	0x264	; 0x264 <delayMicros>
		PORTD &= 0b00001111;
		delayMicros(3000);
	}
	noTone();
	
	for (int i = 0; i < 1000; i++)
     726:	4f ef       	ldi	r20, 0xFF	; 255
     728:	e4 1a       	sub	r14, r20
     72a:	f4 0a       	sbc	r15, r20
     72c:	88 ee       	ldi	r24, 0xE8	; 232
     72e:	e8 16       	cp	r14, r24
     730:	83 e0       	ldi	r24, 0x03	; 3
     732:	f8 06       	cpc	r15, r24
     734:	0c f4       	brge	.+2      	; 0x738 <main+0x188>
     736:	87 cf       	rjmp	.-242    	; 0x646 <main+0x96>
		PORTD |= 0b11110000;
		delayMicros(1000);
		PORTD &= 0b00001111;
		delayMicros(3000);
	}
	noTone();
     738:	0e 94 8d 01 	call	0x31a	; 0x31a <noTone>
	
	rollRateInitErr /= 1000;
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	4a e7       	ldi	r20, 0x7A	; 122
     742:	54 e4       	ldi	r21, 0x44	; 68
     744:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <rollRateInitErr>
     748:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <rollRateInitErr+0x1>
     74c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <rollRateInitErr+0x2>
     750:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <rollRateInitErr+0x3>
     754:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__divsf3>
     758:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <rollRateInitErr>
     75c:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <rollRateInitErr+0x1>
     760:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <rollRateInitErr+0x2>
     764:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <rollRateInitErr+0x3>
	pitchRateInitErr /= 1000;
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	4a e7       	ldi	r20, 0x7A	; 122
     76e:	54 e4       	ldi	r21, 0x44	; 68
     770:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <pitchRateInitErr>
     774:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <pitchRateInitErr+0x1>
     778:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <pitchRateInitErr+0x2>
     77c:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <pitchRateInitErr+0x3>
     780:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__divsf3>
     784:	60 93 68 01 	sts	0x0168, r22	; 0x800168 <pitchRateInitErr>
     788:	70 93 69 01 	sts	0x0169, r23	; 0x800169 <pitchRateInitErr+0x1>
     78c:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <pitchRateInitErr+0x2>
     790:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <pitchRateInitErr+0x3>
	yawRateInitErr /= 1000;
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	4a e7       	ldi	r20, 0x7A	; 122
     79a:	54 e4       	ldi	r21, 0x44	; 68
     79c:	60 91 40 01 	lds	r22, 0x0140	; 0x800140 <yawRateInitErr>
     7a0:	70 91 41 01 	lds	r23, 0x0141	; 0x800141 <yawRateInitErr+0x1>
     7a4:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <yawRateInitErr+0x2>
     7a8:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <yawRateInitErr+0x3>
     7ac:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__divsf3>
     7b0:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <yawRateInitErr>
     7b4:	70 93 41 01 	sts	0x0141, r23	; 0x800141 <yawRateInitErr+0x1>
     7b8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <yawRateInitErr+0x2>
     7bc:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <yawRateInitErr+0x3>
	
	initRec();
     7c0:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <initRec>
	
	ready = 0;
     7c4:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <ready>
	
	batV = (analogRead(0) + 65) * 1.2317;
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	0e 94 3d 01 	call	0x27a	; 0x27a <analogRead>
     7ce:	8f 5b       	subi	r24, 0xBF	; 191
     7d0:	9f 4f       	sbci	r25, 0xFF	; 255
     7d2:	bc 01       	movw	r22, r24
     7d4:	99 0f       	add	r25, r25
     7d6:	88 0b       	sbc	r24, r24
     7d8:	99 0b       	sbc	r25, r25
     7da:	0e 94 23 11 	call	0x2246	; 0x2246 <__floatsisf>
     7de:	28 e5       	ldi	r18, 0x58	; 88
     7e0:	38 ea       	ldi	r19, 0xA8	; 168
     7e2:	4d e9       	ldi	r20, 0x9D	; 157
     7e4:	5f e3       	ldi	r21, 0x3F	; 63
     7e6:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     7ea:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__fixsfsi>
     7ee:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <batV+0x1>
     7f2:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <batV>
	
	PORTB &= ~(1<<5);
     7f6:	85 b1       	in	r24, 0x05	; 5
     7f8:	8f 7d       	andi	r24, 0xDF	; 223
     7fa:	85 b9       	out	0x05, r24	; 5
	
	loopTmr = currentTime();
     7fc:	0e 94 0a 01 	call	0x214	; 0x214 <currentTime>
     800:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <loopTmr>
     804:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <loopTmr+0x1>
     808:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <loopTmr+0x2>
     80c:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <loopTmr+0x3>
	
    while (1) 
    {
		accRoll = atan(yAcc / sqrt(pow(xAcc, 2) + pow(zAcc, 2))) * 57.296;
     810:	40 90 1e 01 	lds	r4, 0x011E	; 0x80011e <yAcc>
     814:	50 90 1f 01 	lds	r5, 0x011F	; 0x80011f <yAcc+0x1>
     818:	60 90 20 01 	lds	r6, 0x0120	; 0x800120 <yAcc+0x2>
     81c:	70 90 21 01 	lds	r7, 0x0121	; 0x800121 <yAcc+0x3>
     820:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <xAcc>
     824:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <xAcc+0x1>
     828:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <xAcc+0x2>
     82c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <xAcc+0x3>
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	50 e4       	ldi	r21, 0x40	; 64
     838:	0e 94 74 12 	call	0x24e8	; 0x24e8 <pow>
     83c:	6b 01       	movw	r12, r22
     83e:	7c 01       	movw	r14, r24
     840:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <zAcc>
     844:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <zAcc+0x1>
     848:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <zAcc+0x2>
     84c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <zAcc+0x3>
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	40 e0       	ldi	r20, 0x00	; 0
     856:	50 e4       	ldi	r21, 0x40	; 64
     858:	0e 94 74 12 	call	0x24e8	; 0x24e8 <pow>
     85c:	4b 01       	movw	r8, r22
     85e:	5c 01       	movw	r10, r24
     860:	a5 01       	movw	r20, r10
     862:	94 01       	movw	r18, r8
     864:	c7 01       	movw	r24, r14
     866:	b6 01       	movw	r22, r12
     868:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
     86c:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <sqrt>
     870:	9b 01       	movw	r18, r22
     872:	ac 01       	movw	r20, r24
     874:	c3 01       	movw	r24, r6
     876:	b2 01       	movw	r22, r4
     878:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__divsf3>
     87c:	0e 94 45 10 	call	0x208a	; 0x208a <atan>
     880:	2b e1       	ldi	r18, 0x1B	; 27
     882:	3f e2       	ldi	r19, 0x2F	; 47
     884:	45 e6       	ldi	r20, 0x65	; 101
     886:	52 e4       	ldi	r21, 0x42	; 66
     888:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     88c:	60 93 6c 01 	sts	0x016C, r22	; 0x80016c <accRoll>
     890:	70 93 6d 01 	sts	0x016D, r23	; 0x80016d <accRoll+0x1>
     894:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <accRoll+0x2>
     898:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <accRoll+0x3>
		accPitch = -atan(xAcc / sqrt(pow(yAcc, 2) + pow(zAcc, 2))) * 57.296;
     89c:	40 90 1a 01 	lds	r4, 0x011A	; 0x80011a <xAcc>
     8a0:	50 90 1b 01 	lds	r5, 0x011B	; 0x80011b <xAcc+0x1>
     8a4:	60 90 1c 01 	lds	r6, 0x011C	; 0x80011c <xAcc+0x2>
     8a8:	70 90 1d 01 	lds	r7, 0x011D	; 0x80011d <xAcc+0x3>
     8ac:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <yAcc>
     8b0:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <yAcc+0x1>
     8b4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <yAcc+0x2>
     8b8:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <yAcc+0x3>
     8bc:	20 e0       	ldi	r18, 0x00	; 0
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	40 e0       	ldi	r20, 0x00	; 0
     8c2:	50 e4       	ldi	r21, 0x40	; 64
     8c4:	0e 94 74 12 	call	0x24e8	; 0x24e8 <pow>
     8c8:	6b 01       	movw	r12, r22
     8ca:	7c 01       	movw	r14, r24
     8cc:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <zAcc>
     8d0:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <zAcc+0x1>
     8d4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <zAcc+0x2>
     8d8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <zAcc+0x3>
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	40 e0       	ldi	r20, 0x00	; 0
     8e2:	50 e4       	ldi	r21, 0x40	; 64
     8e4:	0e 94 74 12 	call	0x24e8	; 0x24e8 <pow>
     8e8:	4b 01       	movw	r8, r22
     8ea:	5c 01       	movw	r10, r24
     8ec:	a5 01       	movw	r20, r10
     8ee:	94 01       	movw	r18, r8
     8f0:	c7 01       	movw	r24, r14
     8f2:	b6 01       	movw	r22, r12
     8f4:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
     8f8:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <sqrt>
     8fc:	9b 01       	movw	r18, r22
     8fe:	ac 01       	movw	r20, r24
     900:	c3 01       	movw	r24, r6
     902:	b2 01       	movw	r22, r4
     904:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__divsf3>
     908:	0e 94 45 10 	call	0x208a	; 0x208a <atan>
     90c:	90 58       	subi	r25, 0x80	; 128
     90e:	2b e1       	ldi	r18, 0x1B	; 27
     910:	3f e2       	ldi	r19, 0x2F	; 47
     912:	45 e6       	ldi	r20, 0x65	; 101
     914:	52 e4       	ldi	r21, 0x42	; 66
     916:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     91a:	2b 01       	movw	r4, r22
     91c:	3c 01       	movw	r6, r24
     91e:	60 93 71 01 	sts	0x0171, r22	; 0x800171 <accPitch>
     922:	70 93 72 01 	sts	0x0172, r23	; 0x800172 <accPitch+0x1>
     926:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <accPitch+0x2>
     92a:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <accPitch+0x3>
		
		roll = ((rollRateIn - rollRateInitErr) * 0.004 + roll) * 0.9995 + accRoll * 0.0005;
     92e:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <rollRateIn>
     932:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <rollRateIn+0x1>
     936:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <rollRateIn+0x2>
     93a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <rollRateIn+0x3>
     93e:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <rollRateInitErr>
     942:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <rollRateInitErr+0x1>
     946:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <rollRateInitErr+0x2>
     94a:	50 91 37 01 	lds	r21, 0x0137	; 0x800137 <rollRateInitErr+0x3>
     94e:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
     952:	69 87       	std	Y+9, r22	; 0x09
     954:	7a 87       	std	Y+10, r23	; 0x0a
     956:	8b 87       	std	Y+11, r24	; 0x0b
     958:	9c 87       	std	Y+12, r25	; 0x0c
     95a:	2f e6       	ldi	r18, 0x6F	; 111
     95c:	32 e1       	ldi	r19, 0x12	; 18
     95e:	43 e8       	ldi	r20, 0x83	; 131
     960:	5b e3       	ldi	r21, 0x3B	; 59
     962:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     966:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <roll>
     96a:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <roll+0x1>
     96e:	40 91 66 01 	lds	r20, 0x0166	; 0x800166 <roll+0x2>
     972:	50 91 67 01 	lds	r21, 0x0167	; 0x800167 <roll+0x3>
     976:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
     97a:	2b e3       	ldi	r18, 0x3B	; 59
     97c:	3f ed       	ldi	r19, 0xDF	; 223
     97e:	4f e7       	ldi	r20, 0x7F	; 127
     980:	5f e3       	ldi	r21, 0x3F	; 63
     982:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     986:	4b 01       	movw	r8, r22
     988:	5c 01       	movw	r10, r24
     98a:	c0 90 6c 01 	lds	r12, 0x016C	; 0x80016c <accRoll>
     98e:	d0 90 6d 01 	lds	r13, 0x016D	; 0x80016d <accRoll+0x1>
     992:	e0 90 6e 01 	lds	r14, 0x016E	; 0x80016e <accRoll+0x2>
     996:	f0 90 6f 01 	lds	r15, 0x016F	; 0x80016f <accRoll+0x3>
     99a:	2f e6       	ldi	r18, 0x6F	; 111
     99c:	32 e1       	ldi	r19, 0x12	; 18
     99e:	43 e0       	ldi	r20, 0x03	; 3
     9a0:	5a e3       	ldi	r21, 0x3A	; 58
     9a2:	c7 01       	movw	r24, r14
     9a4:	b6 01       	movw	r22, r12
     9a6:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     9aa:	9b 01       	movw	r18, r22
     9ac:	ac 01       	movw	r20, r24
     9ae:	c5 01       	movw	r24, r10
     9b0:	b4 01       	movw	r22, r8
     9b2:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
     9b6:	69 8b       	std	Y+17, r22	; 0x11
     9b8:	7a 8b       	std	Y+18, r23	; 0x12
     9ba:	8b 8b       	std	Y+19, r24	; 0x13
     9bc:	9c 8b       	std	Y+20, r25	; 0x14
		pitch = ((pitchRateIn - pitchRateInitErr) * 0.004 + pitch) * 0.9995 + accPitch * 0.0005;
     9be:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <pitchRateIn>
     9c2:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <pitchRateIn+0x1>
     9c6:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <pitchRateIn+0x2>
     9ca:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <pitchRateIn+0x3>
     9ce:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <pitchRateInitErr>
     9d2:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <pitchRateInitErr+0x1>
     9d6:	40 91 6a 01 	lds	r20, 0x016A	; 0x80016a <pitchRateInitErr+0x2>
     9da:	50 91 6b 01 	lds	r21, 0x016B	; 0x80016b <pitchRateInitErr+0x3>
     9de:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
     9e2:	6d 87       	std	Y+13, r22	; 0x0d
     9e4:	7e 87       	std	Y+14, r23	; 0x0e
     9e6:	8f 87       	std	Y+15, r24	; 0x0f
     9e8:	98 8b       	std	Y+16, r25	; 0x10
     9ea:	2f e6       	ldi	r18, 0x6F	; 111
     9ec:	32 e1       	ldi	r19, 0x12	; 18
     9ee:	43 e8       	ldi	r20, 0x83	; 131
     9f0:	5b e3       	ldi	r21, 0x3B	; 59
     9f2:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     9f6:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <pitch>
     9fa:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <pitch+0x1>
     9fe:	40 91 62 01 	lds	r20, 0x0162	; 0x800162 <pitch+0x2>
     a02:	50 91 63 01 	lds	r21, 0x0163	; 0x800163 <pitch+0x3>
     a06:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
     a0a:	2b e3       	ldi	r18, 0x3B	; 59
     a0c:	3f ed       	ldi	r19, 0xDF	; 223
     a0e:	4f e7       	ldi	r20, 0x7F	; 127
     a10:	5f e3       	ldi	r21, 0x3F	; 63
     a12:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     a16:	4b 01       	movw	r8, r22
     a18:	5c 01       	movw	r10, r24
     a1a:	2f e6       	ldi	r18, 0x6F	; 111
     a1c:	32 e1       	ldi	r19, 0x12	; 18
     a1e:	43 e0       	ldi	r20, 0x03	; 3
     a20:	5a e3       	ldi	r21, 0x3A	; 58
     a22:	c3 01       	movw	r24, r6
     a24:	b2 01       	movw	r22, r4
     a26:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     a2a:	9b 01       	movw	r18, r22
     a2c:	ac 01       	movw	r20, r24
     a2e:	c5 01       	movw	r24, r10
     a30:	b4 01       	movw	r22, r8
     a32:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
     a36:	4b 01       	movw	r8, r22
     a38:	5c 01       	movw	r10, r24
		yaw = (yawRateIn - yawRateInitErr) * 0.004 + yaw;
     a3a:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <yawRateIn>
     a3e:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <yawRateIn+0x1>
     a42:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <yawRateIn+0x2>
     a46:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <yawRateIn+0x3>
     a4a:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <yawRateInitErr>
     a4e:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <yawRateInitErr+0x1>
     a52:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <yawRateInitErr+0x2>
     a56:	50 91 43 01 	lds	r21, 0x0143	; 0x800143 <yawRateInitErr+0x3>
     a5a:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
     a5e:	69 83       	std	Y+1, r22	; 0x01
     a60:	7a 83       	std	Y+2, r23	; 0x02
     a62:	8b 83       	std	Y+3, r24	; 0x03
     a64:	9c 83       	std	Y+4, r25	; 0x04
     a66:	2f e6       	ldi	r18, 0x6F	; 111
     a68:	32 e1       	ldi	r19, 0x12	; 18
     a6a:	43 e8       	ldi	r20, 0x83	; 131
     a6c:	5b e3       	ldi	r21, 0x3B	; 59
     a6e:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     a72:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <yaw>
     a76:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <yaw+0x1>
     a7a:	40 91 5e 01 	lds	r20, 0x015E	; 0x80015e <yaw+0x2>
     a7e:	50 91 5f 01 	lds	r21, 0x015F	; 0x80015f <yaw+0x3>
     a82:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
     a86:	60 93 5c 01 	sts	0x015C, r22	; 0x80015c <yaw>
     a8a:	70 93 5d 01 	sts	0x015D, r23	; 0x80015d <yaw+0x1>
     a8e:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <yaw+0x2>
     a92:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <yaw+0x3>
		
		roll += pitch * sin((yawRateIn - yawRateInitErr) * 0.0000698);
     a96:	27 e9       	ldi	r18, 0x97	; 151
     a98:	31 e6       	ldi	r19, 0x61	; 97
     a9a:	42 e9       	ldi	r20, 0x92	; 146
     a9c:	58 e3       	ldi	r21, 0x38	; 56
     a9e:	69 81       	ldd	r22, Y+1	; 0x01
     aa0:	7a 81       	ldd	r23, Y+2	; 0x02
     aa2:	8b 81       	ldd	r24, Y+3	; 0x03
     aa4:	9c 81       	ldd	r25, Y+4	; 0x04
     aa6:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     aaa:	0e 94 c4 12 	call	0x2588	; 0x2588 <sin>
     aae:	6d 83       	std	Y+5, r22	; 0x05
     ab0:	7e 83       	std	Y+6, r23	; 0x06
     ab2:	8f 83       	std	Y+7, r24	; 0x07
     ab4:	98 87       	std	Y+8, r25	; 0x08
     ab6:	9b 01       	movw	r18, r22
     ab8:	ac 01       	movw	r20, r24
     aba:	c5 01       	movw	r24, r10
     abc:	b4 01       	movw	r22, r8
     abe:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     ac2:	9b 01       	movw	r18, r22
     ac4:	ac 01       	movw	r20, r24
     ac6:	69 89       	ldd	r22, Y+17	; 0x11
     ac8:	7a 89       	ldd	r23, Y+18	; 0x12
     aca:	8b 89       	ldd	r24, Y+19	; 0x13
     acc:	9c 89       	ldd	r25, Y+20	; 0x14
     ace:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
     ad2:	9b 01       	movw	r18, r22
     ad4:	ac 01       	movw	r20, r24
     ad6:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <roll>
     ada:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <roll+0x1>
     ade:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <roll+0x2>
     ae2:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <roll+0x3>
		pitch -= roll * sin((yawRateIn - yawRateInitErr) * 0.0000698);
     ae6:	6d 81       	ldd	r22, Y+5	; 0x05
     ae8:	7e 81       	ldd	r23, Y+6	; 0x06
     aea:	8f 81       	ldd	r24, Y+7	; 0x07
     aec:	98 85       	ldd	r25, Y+8	; 0x08
     aee:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     af2:	9b 01       	movw	r18, r22
     af4:	ac 01       	movw	r20, r24
     af6:	c5 01       	movw	r24, r10
     af8:	b4 01       	movw	r22, r8
     afa:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
     afe:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <pitch>
     b02:	70 93 61 01 	sts	0x0161, r23	; 0x800161 <pitch+0x1>
     b06:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <pitch+0x2>
     b0a:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <pitch+0x3>
		
		rollRate = rollRate * 0.7 + (rollRateIn - rollRateInitErr) * 0.3;
     b0e:	23 e3       	ldi	r18, 0x33	; 51
     b10:	33 e3       	ldi	r19, 0x33	; 51
     b12:	43 e3       	ldi	r20, 0x33	; 51
     b14:	5f e3       	ldi	r21, 0x3F	; 63
     b16:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <rollRate>
     b1a:	70 91 31 01 	lds	r23, 0x0131	; 0x800131 <rollRate+0x1>
     b1e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <rollRate+0x2>
     b22:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <rollRate+0x3>
     b26:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     b2a:	4b 01       	movw	r8, r22
     b2c:	5c 01       	movw	r10, r24
     b2e:	2a e9       	ldi	r18, 0x9A	; 154
     b30:	39 e9       	ldi	r19, 0x99	; 153
     b32:	49 e9       	ldi	r20, 0x99	; 153
     b34:	5e e3       	ldi	r21, 0x3E	; 62
     b36:	69 85       	ldd	r22, Y+9	; 0x09
     b38:	7a 85       	ldd	r23, Y+10	; 0x0a
     b3a:	8b 85       	ldd	r24, Y+11	; 0x0b
     b3c:	9c 85       	ldd	r25, Y+12	; 0x0c
     b3e:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     b42:	9b 01       	movw	r18, r22
     b44:	ac 01       	movw	r20, r24
     b46:	c5 01       	movw	r24, r10
     b48:	b4 01       	movw	r22, r8
     b4a:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
     b4e:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <rollRate>
     b52:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <rollRate+0x1>
     b56:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <rollRate+0x2>
     b5a:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <rollRate+0x3>
		pitchRate = pitchRate * 0.7 + (pitchRateIn - pitchRateInitErr) * 0.3;
     b5e:	23 e3       	ldi	r18, 0x33	; 51
     b60:	33 e3       	ldi	r19, 0x33	; 51
     b62:	43 e3       	ldi	r20, 0x33	; 51
     b64:	5f e3       	ldi	r21, 0x3F	; 63
     b66:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <pitchRate>
     b6a:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <pitchRate+0x1>
     b6e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <pitchRate+0x2>
     b72:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <pitchRate+0x3>
     b76:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     b7a:	4b 01       	movw	r8, r22
     b7c:	5c 01       	movw	r10, r24
     b7e:	2a e9       	ldi	r18, 0x9A	; 154
     b80:	39 e9       	ldi	r19, 0x99	; 153
     b82:	49 e9       	ldi	r20, 0x99	; 153
     b84:	5e e3       	ldi	r21, 0x3E	; 62
     b86:	6d 85       	ldd	r22, Y+13	; 0x0d
     b88:	7e 85       	ldd	r23, Y+14	; 0x0e
     b8a:	8f 85       	ldd	r24, Y+15	; 0x0f
     b8c:	98 89       	ldd	r25, Y+16	; 0x10
     b8e:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     b92:	9b 01       	movw	r18, r22
     b94:	ac 01       	movw	r20, r24
     b96:	c5 01       	movw	r24, r10
     b98:	b4 01       	movw	r22, r8
     b9a:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
     b9e:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <pitchRate>
     ba2:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <pitchRate+0x1>
     ba6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <pitchRate+0x2>
     baa:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <pitchRate+0x3>
		yawRate = yawRate * 0.7 + (yawRateIn - yawRateInitErr) * 0.3;
     bae:	23 e3       	ldi	r18, 0x33	; 51
     bb0:	33 e3       	ldi	r19, 0x33	; 51
     bb2:	43 e3       	ldi	r20, 0x33	; 51
     bb4:	5f e3       	ldi	r21, 0x3F	; 63
     bb6:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <yawRate>
     bba:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <yawRate+0x1>
     bbe:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <yawRate+0x2>
     bc2:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <yawRate+0x3>
     bc6:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     bca:	4b 01       	movw	r8, r22
     bcc:	5c 01       	movw	r10, r24
     bce:	2a e9       	ldi	r18, 0x9A	; 154
     bd0:	39 e9       	ldi	r19, 0x99	; 153
     bd2:	49 e9       	ldi	r20, 0x99	; 153
     bd4:	5e e3       	ldi	r21, 0x3E	; 62
     bd6:	69 81       	ldd	r22, Y+1	; 0x01
     bd8:	7a 81       	ldd	r23, Y+2	; 0x02
     bda:	8b 81       	ldd	r24, Y+3	; 0x03
     bdc:	9c 81       	ldd	r25, Y+4	; 0x04
     bde:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     be2:	9b 01       	movw	r18, r22
     be4:	ac 01       	movw	r20, r24
     be6:	c5 01       	movw	r24, r10
     be8:	b4 01       	movw	r22, r8
     bea:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
     bee:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <yawRate>
     bf2:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <yawRate+0x1>
     bf6:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <yawRate+0x2>
     bfa:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <yawRate+0x3>
		
		if (recThrottle < 1050 && recYaw > 1950) ready = 1;
     bfe:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <recThrottle>
     c02:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <recThrottle+0x1>
     c06:	8a 31       	cpi	r24, 0x1A	; 26
     c08:	a4 e0       	ldi	r26, 0x04	; 4
     c0a:	9a 07       	cpc	r25, r26
     c0c:	54 f4       	brge	.+20     	; 0xc22 <__stack+0x323>
     c0e:	20 91 d7 01 	lds	r18, 0x01D7	; 0x8001d7 <recYaw>
     c12:	30 91 d8 01 	lds	r19, 0x01D8	; 0x8001d8 <recYaw+0x1>
     c16:	2f 39       	cpi	r18, 0x9F	; 159
     c18:	37 40       	sbci	r19, 0x07	; 7
     c1a:	1c f0       	brlt	.+6      	; 0xc22 <__stack+0x323>
     c1c:	21 e0       	ldi	r18, 0x01	; 1
     c1e:	20 93 70 01 	sts	0x0170, r18	; 0x800170 <ready>
		
		if (recThrottle < 1050 && recYaw < 1550 && ready == 1)
     c22:	8a 31       	cpi	r24, 0x1A	; 26
     c24:	24 e0       	ldi	r18, 0x04	; 4
     c26:	92 07       	cpc	r25, r18
     c28:	0c f0       	brlt	.+2      	; 0xc2c <__stack+0x32d>
     c2a:	58 c0       	rjmp	.+176    	; 0xcdc <__stack+0x3dd>
     c2c:	20 91 d7 01 	lds	r18, 0x01D7	; 0x8001d7 <recYaw>
     c30:	30 91 d8 01 	lds	r19, 0x01D8	; 0x8001d8 <recYaw+0x1>
     c34:	2e 30       	cpi	r18, 0x0E	; 14
     c36:	36 40       	sbci	r19, 0x06	; 6
     c38:	0c f0       	brlt	.+2      	; 0xc3c <__stack+0x33d>
     c3a:	50 c0       	rjmp	.+160    	; 0xcdc <__stack+0x3dd>
     c3c:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <ready>
     c40:	21 30       	cpi	r18, 0x01	; 1
     c42:	09 f0       	breq	.+2      	; 0xc46 <__stack+0x347>
     c44:	4b c0       	rjmp	.+150    	; 0xcdc <__stack+0x3dd>
		{
			ready = 2;
     c46:	22 e0       	ldi	r18, 0x02	; 2
     c48:	20 93 70 01 	sts	0x0170, r18	; 0x800170 <ready>
			
			roll = accRoll;
     c4c:	c0 92 64 01 	sts	0x0164, r12	; 0x800164 <roll>
     c50:	d0 92 65 01 	sts	0x0165, r13	; 0x800165 <roll+0x1>
     c54:	e0 92 66 01 	sts	0x0166, r14	; 0x800166 <roll+0x2>
     c58:	f0 92 67 01 	sts	0x0167, r15	; 0x800167 <roll+0x3>
			pitch = accPitch;
     c5c:	40 92 60 01 	sts	0x0160, r4	; 0x800160 <pitch>
     c60:	50 92 61 01 	sts	0x0161, r5	; 0x800161 <pitch+0x1>
     c64:	60 92 62 01 	sts	0x0162, r6	; 0x800162 <pitch+0x2>
     c68:	70 92 63 01 	sts	0x0163, r7	; 0x800163 <pitch+0x3>
			yaw = 0;
     c6c:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <yaw>
     c70:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <yaw+0x1>
     c74:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <yaw+0x2>
     c78:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <yaw+0x3>
			
			rollRateInt = 0;
     c7c:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <rollRateInt>
     c80:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <rollRateInt+0x1>
     c84:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <rollRateInt+0x2>
     c88:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <rollRateInt+0x3>
			rollRateLastErr = 0;
     c8c:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <rollRateLastErr>
     c90:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <rollRateLastErr+0x1>
     c94:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <rollRateLastErr+0x2>
     c98:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <rollRateLastErr+0x3>
			pitchRateInt = 0;
     c9c:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <pitchRateInt>
     ca0:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <pitchRateInt+0x1>
     ca4:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <pitchRateInt+0x2>
     ca8:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <pitchRateInt+0x3>
			pitchRateLastErr = 0;
     cac:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <pitchRateLastErr>
     cb0:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <pitchRateLastErr+0x1>
     cb4:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <pitchRateLastErr+0x2>
     cb8:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <pitchRateLastErr+0x3>
			yawRateInt = 0;
     cbc:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <yawRateInt>
     cc0:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <yawRateInt+0x1>
     cc4:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <yawRateInt+0x2>
     cc8:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <yawRateInt+0x3>
			yawRateLastErr = 0;
     ccc:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <yawRateLastErr>
     cd0:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <yawRateLastErr+0x1>
     cd4:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <yawRateLastErr+0x2>
     cd8:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <yawRateLastErr+0x3>
		}
		
		if (recThrottle < 1050 && recYaw < 1050 && ready == 2) ready = 0;
     cdc:	8a 31       	cpi	r24, 0x1A	; 26
     cde:	94 40       	sbci	r25, 0x04	; 4
     ce0:	6c f4       	brge	.+26     	; 0xcfc <__stack+0x3fd>
     ce2:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <recYaw>
     ce6:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <recYaw+0x1>
     cea:	8a 31       	cpi	r24, 0x1A	; 26
     cec:	94 40       	sbci	r25, 0x04	; 4
     cee:	34 f4       	brge	.+12     	; 0xcfc <__stack+0x3fd>
     cf0:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <ready>
     cf4:	82 30       	cpi	r24, 0x02	; 2
     cf6:	11 f4       	brne	.+4      	; 0xcfc <__stack+0x3fd>
     cf8:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <ready>
		
		calcSetps();
     cfc:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <calcSetps>
		calcPID();
     d00:	0e 94 4e 09 	call	0x129c	; 0x129c <calcPID>
		
		batV = batV * 0.92 + (analogRead(0) + 65) * 0.09853;
     d04:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <batV>
     d08:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <batV+0x1>
     d0c:	07 2e       	mov	r0, r23
     d0e:	00 0c       	add	r0, r0
     d10:	88 0b       	sbc	r24, r24
     d12:	99 0b       	sbc	r25, r25
     d14:	0e 94 23 11 	call	0x2246	; 0x2246 <__floatsisf>
     d18:	2f e1       	ldi	r18, 0x1F	; 31
     d1a:	35 e8       	ldi	r19, 0x85	; 133
     d1c:	4b e6       	ldi	r20, 0x6B	; 107
     d1e:	5f e3       	ldi	r21, 0x3F	; 63
     d20:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     d24:	6b 01       	movw	r12, r22
     d26:	7c 01       	movw	r14, r24
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	0e 94 3d 01 	call	0x27a	; 0x27a <analogRead>
     d2e:	8f 5b       	subi	r24, 0xBF	; 191
     d30:	9f 4f       	sbci	r25, 0xFF	; 255
     d32:	bc 01       	movw	r22, r24
     d34:	99 0f       	add	r25, r25
     d36:	88 0b       	sbc	r24, r24
     d38:	99 0b       	sbc	r25, r25
     d3a:	0e 94 23 11 	call	0x2246	; 0x2246 <__floatsisf>
     d3e:	29 e1       	ldi	r18, 0x19	; 25
     d40:	3a ec       	ldi	r19, 0xCA	; 202
     d42:	49 ec       	ldi	r20, 0xC9	; 201
     d44:	5d e3       	ldi	r21, 0x3D	; 61
     d46:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     d4a:	9b 01       	movw	r18, r22
     d4c:	ac 01       	movw	r20, r24
     d4e:	c7 01       	movw	r24, r14
     d50:	b6 01       	movw	r22, r12
     d52:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
     d56:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__fixsfsi>
     d5a:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <batV+0x1>
     d5e:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <batV>
		
		if (batV < 1000 && batV > 600) tone();
     d62:	69 55       	subi	r22, 0x59	; 89
     d64:	72 40       	sbci	r23, 0x02	; 2
     d66:	6f 38       	cpi	r22, 0x8F	; 143
     d68:	71 40       	sbci	r23, 0x01	; 1
     d6a:	10 f4       	brcc	.+4      	; 0xd70 <__stack+0x471>
     d6c:	0e 94 87 01 	call	0x30e	; 0x30e <tone>
		
		if (ready == 2)
     d70:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <ready>
     d74:	82 30       	cpi	r24, 0x02	; 2
     d76:	09 f0       	breq	.+2      	; 0xd7a <__stack+0x47b>
     d78:	99 c1       	rjmp	.+818    	; 0x10ac <__stack+0x7ad>
		{
			if (recThrottle > 1800) throttleControl = 1800;
     d7a:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <recThrottle>
     d7e:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <recThrottle+0x1>
     d82:	89 30       	cpi	r24, 0x09	; 9
     d84:	97 40       	sbci	r25, 0x07	; 7
     d86:	64 f0       	brlt	.+24     	; 0xda0 <__stack+0x4a1>
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	a1 ee       	ldi	r26, 0xE1	; 225
     d8e:	b4 e4       	ldi	r27, 0x44	; 68
     d90:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <throttleControl>
     d94:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <throttleControl+0x1>
     d98:	a0 93 b9 01 	sts	0x01B9, r26	; 0x8001b9 <throttleControl+0x2>
     d9c:	b0 93 ba 01 	sts	0x01BA, r27	; 0x8001ba <throttleControl+0x3>
			
			escfr = throttleControl - pitchControl - rollControl - yawControl;
     da0:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <throttleControl>
     da4:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <throttleControl+0x1>
     da8:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <throttleControl+0x2>
     dac:	b0 91 ba 01 	lds	r27, 0x01BA	; 0x8001ba <throttleControl+0x3>
     db0:	89 83       	std	Y+1, r24	; 0x01
     db2:	9a 83       	std	Y+2, r25	; 0x02
     db4:	ab 83       	std	Y+3, r26	; 0x03
     db6:	bc 83       	std	Y+4, r27	; 0x04
     db8:	40 90 75 01 	lds	r4, 0x0175	; 0x800175 <pitchControl>
     dbc:	50 90 76 01 	lds	r5, 0x0176	; 0x800176 <pitchControl+0x1>
     dc0:	60 90 77 01 	lds	r6, 0x0177	; 0x800177 <pitchControl+0x2>
     dc4:	70 90 78 01 	lds	r7, 0x0178	; 0x800178 <pitchControl+0x3>
     dc8:	a3 01       	movw	r20, r6
     dca:	92 01       	movw	r18, r4
     dcc:	bc 01       	movw	r22, r24
     dce:	cd 01       	movw	r24, r26
     dd0:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
     dd4:	6d 83       	std	Y+5, r22	; 0x05
     dd6:	7e 83       	std	Y+6, r23	; 0x06
     dd8:	8f 83       	std	Y+7, r24	; 0x07
     dda:	98 87       	std	Y+8, r25	; 0x08
     ddc:	c0 90 b3 01 	lds	r12, 0x01B3	; 0x8001b3 <rollControl>
     de0:	d0 90 b4 01 	lds	r13, 0x01B4	; 0x8001b4 <rollControl+0x1>
     de4:	e0 90 b5 01 	lds	r14, 0x01B5	; 0x8001b5 <rollControl+0x2>
     de8:	f0 90 b6 01 	lds	r15, 0x01B6	; 0x8001b6 <rollControl+0x3>
     dec:	a7 01       	movw	r20, r14
     dee:	96 01       	movw	r18, r12
     df0:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
     df4:	80 90 7d 01 	lds	r8, 0x017D	; 0x80017d <yawControl>
     df8:	90 90 7e 01 	lds	r9, 0x017E	; 0x80017e <yawControl+0x1>
     dfc:	a0 90 7f 01 	lds	r10, 0x017F	; 0x80017f <yawControl+0x2>
     e00:	b0 90 80 01 	lds	r11, 0x0180	; 0x800180 <yawControl+0x3>
     e04:	a5 01       	movw	r20, r10
     e06:	94 01       	movw	r18, r8
     e08:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
     e0c:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__fixsfsi>
     e10:	69 87       	std	Y+9, r22	; 0x09
     e12:	7a 87       	std	Y+10, r23	; 0x0a
     e14:	8b 87       	std	Y+11, r24	; 0x0b
     e16:	9c 87       	std	Y+12, r25	; 0x0c
     e18:	a9 85       	ldd	r26, Y+9	; 0x09
     e1a:	ba 85       	ldd	r27, Y+10	; 0x0a
     e1c:	b0 93 29 01 	sts	0x0129, r27	; 0x800129 <escfr+0x1>
     e20:	a0 93 28 01 	sts	0x0128, r26	; 0x800128 <escfr>
			escrr = throttleControl + pitchControl - rollControl + yawControl;
     e24:	a3 01       	movw	r20, r6
     e26:	92 01       	movw	r18, r4
     e28:	69 81       	ldd	r22, Y+1	; 0x01
     e2a:	7a 81       	ldd	r23, Y+2	; 0x02
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	9c 81       	ldd	r25, Y+4	; 0x04
     e30:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
     e34:	2b 01       	movw	r4, r22
     e36:	3c 01       	movw	r6, r24
     e38:	a7 01       	movw	r20, r14
     e3a:	96 01       	movw	r18, r12
     e3c:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
     e40:	9b 01       	movw	r18, r22
     e42:	ac 01       	movw	r20, r24
     e44:	c5 01       	movw	r24, r10
     e46:	b4 01       	movw	r22, r8
     e48:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
     e4c:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__fixsfsi>
     e50:	69 83       	std	Y+1, r22	; 0x01
     e52:	7a 83       	std	Y+2, r23	; 0x02
     e54:	8b 83       	std	Y+3, r24	; 0x03
     e56:	9c 83       	std	Y+4, r25	; 0x04
     e58:	29 81       	ldd	r18, Y+1	; 0x01
     e5a:	3a 81       	ldd	r19, Y+2	; 0x02
     e5c:	30 93 2b 01 	sts	0x012B, r19	; 0x80012b <escrr+0x1>
     e60:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <escrr>
			escrl = throttleControl + pitchControl + rollControl - yawControl;
     e64:	a3 01       	movw	r20, r6
     e66:	92 01       	movw	r18, r4
     e68:	c7 01       	movw	r24, r14
     e6a:	b6 01       	movw	r22, r12
     e6c:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
     e70:	a5 01       	movw	r20, r10
     e72:	94 01       	movw	r18, r8
     e74:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
     e78:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__fixsfsi>
     e7c:	2b 01       	movw	r4, r22
     e7e:	3c 01       	movw	r6, r24
     e80:	70 93 57 01 	sts	0x0157, r23	; 0x800157 <escrl+0x1>
     e84:	60 93 56 01 	sts	0x0156, r22	; 0x800156 <escrl>
			escfl = throttleControl - pitchControl + rollControl + yawControl;
     e88:	a7 01       	movw	r20, r14
     e8a:	96 01       	movw	r18, r12
     e8c:	6d 81       	ldd	r22, Y+5	; 0x05
     e8e:	7e 81       	ldd	r23, Y+6	; 0x06
     e90:	8f 81       	ldd	r24, Y+7	; 0x07
     e92:	98 85       	ldd	r25, Y+8	; 0x08
     e94:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
     e98:	9b 01       	movw	r18, r22
     e9a:	ac 01       	movw	r20, r24
     e9c:	c5 01       	movw	r24, r10
     e9e:	b4 01       	movw	r22, r8
     ea0:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
     ea4:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__fixsfsi>
     ea8:	4b 01       	movw	r8, r22
     eaa:	5c 01       	movw	r10, r24
     eac:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <escfl+0x1>
     eb0:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <escfl>
			
			if (batV < 1240 && batV > 800)
     eb4:	e0 90 48 01 	lds	r14, 0x0148	; 0x800148 <batV>
     eb8:	f0 90 49 01 	lds	r15, 0x0149	; 0x800149 <batV+0x1>
     ebc:	c7 01       	movw	r24, r14
     ebe:	81 52       	subi	r24, 0x21	; 33
     ec0:	93 40       	sbci	r25, 0x03	; 3
     ec2:	87 3b       	cpi	r24, 0xB7	; 183
     ec4:	91 40       	sbci	r25, 0x01	; 1
     ec6:	08 f0       	brcs	.+2      	; 0xeca <__stack+0x5cb>
     ec8:	88 c0       	rjmp	.+272    	; 0xfda <__stack+0x6db>
			{
				escfr += escfr * ((1240 - batV) / 3500.0);
     eca:	a9 85       	ldd	r26, Y+9	; 0x09
     ecc:	ba 85       	ldd	r27, Y+10	; 0x0a
     ece:	bd 01       	movw	r22, r26
     ed0:	bb 0f       	add	r27, r27
     ed2:	88 0b       	sbc	r24, r24
     ed4:	99 0b       	sbc	r25, r25
     ed6:	0e 94 23 11 	call	0x2246	; 0x2246 <__floatsisf>
     eda:	6d 83       	std	Y+5, r22	; 0x05
     edc:	7e 83       	std	Y+6, r23	; 0x06
     ede:	8f 83       	std	Y+7, r24	; 0x07
     ee0:	98 87       	std	Y+8, r25	; 0x08
     ee2:	68 ed       	ldi	r22, 0xD8	; 216
     ee4:	74 e0       	ldi	r23, 0x04	; 4
     ee6:	6e 19       	sub	r22, r14
     ee8:	7f 09       	sbc	r23, r15
     eea:	07 2e       	mov	r0, r23
     eec:	00 0c       	add	r0, r0
     eee:	88 0b       	sbc	r24, r24
     ef0:	99 0b       	sbc	r25, r25
     ef2:	0e 94 23 11 	call	0x2246	; 0x2246 <__floatsisf>
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 ec       	ldi	r19, 0xC0	; 192
     efa:	4a e5       	ldi	r20, 0x5A	; 90
     efc:	55 e4       	ldi	r21, 0x45	; 69
     efe:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__divsf3>
     f02:	6b 01       	movw	r12, r22
     f04:	7c 01       	movw	r14, r24
     f06:	9b 01       	movw	r18, r22
     f08:	ac 01       	movw	r20, r24
     f0a:	6d 81       	ldd	r22, Y+5	; 0x05
     f0c:	7e 81       	ldd	r23, Y+6	; 0x06
     f0e:	8f 81       	ldd	r24, Y+7	; 0x07
     f10:	98 85       	ldd	r25, Y+8	; 0x08
     f12:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     f16:	9b 01       	movw	r18, r22
     f18:	ac 01       	movw	r20, r24
     f1a:	6d 81       	ldd	r22, Y+5	; 0x05
     f1c:	7e 81       	ldd	r23, Y+6	; 0x06
     f1e:	8f 81       	ldd	r24, Y+7	; 0x07
     f20:	98 85       	ldd	r25, Y+8	; 0x08
     f22:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
     f26:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__fixsfsi>
     f2a:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <escfr+0x1>
     f2e:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <escfr>
				escrr += escrr * ((1240 - batV) / 3500.0);
     f32:	29 81       	ldd	r18, Y+1	; 0x01
     f34:	3a 81       	ldd	r19, Y+2	; 0x02
     f36:	b9 01       	movw	r22, r18
     f38:	33 0f       	add	r19, r19
     f3a:	88 0b       	sbc	r24, r24
     f3c:	99 0b       	sbc	r25, r25
     f3e:	0e 94 23 11 	call	0x2246	; 0x2246 <__floatsisf>
     f42:	69 83       	std	Y+1, r22	; 0x01
     f44:	7a 83       	std	Y+2, r23	; 0x02
     f46:	8b 83       	std	Y+3, r24	; 0x03
     f48:	9c 83       	std	Y+4, r25	; 0x04
     f4a:	9b 01       	movw	r18, r22
     f4c:	ac 01       	movw	r20, r24
     f4e:	c7 01       	movw	r24, r14
     f50:	b6 01       	movw	r22, r12
     f52:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     f56:	9b 01       	movw	r18, r22
     f58:	ac 01       	movw	r20, r24
     f5a:	69 81       	ldd	r22, Y+1	; 0x01
     f5c:	7a 81       	ldd	r23, Y+2	; 0x02
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	9c 81       	ldd	r25, Y+4	; 0x04
     f62:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
     f66:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__fixsfsi>
     f6a:	70 93 2b 01 	sts	0x012B, r23	; 0x80012b <escrr+0x1>
     f6e:	60 93 2a 01 	sts	0x012A, r22	; 0x80012a <escrr>
				escrl += escrl * ((1240 - batV) / 3500.0);
     f72:	b2 01       	movw	r22, r4
     f74:	55 0c       	add	r5, r5
     f76:	88 0b       	sbc	r24, r24
     f78:	99 0b       	sbc	r25, r25
     f7a:	0e 94 23 11 	call	0x2246	; 0x2246 <__floatsisf>
     f7e:	2b 01       	movw	r4, r22
     f80:	3c 01       	movw	r6, r24
     f82:	9b 01       	movw	r18, r22
     f84:	ac 01       	movw	r20, r24
     f86:	c7 01       	movw	r24, r14
     f88:	b6 01       	movw	r22, r12
     f8a:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     f8e:	9b 01       	movw	r18, r22
     f90:	ac 01       	movw	r20, r24
     f92:	c3 01       	movw	r24, r6
     f94:	b2 01       	movw	r22, r4
     f96:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
     f9a:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__fixsfsi>
     f9e:	70 93 57 01 	sts	0x0157, r23	; 0x800157 <escrl+0x1>
     fa2:	60 93 56 01 	sts	0x0156, r22	; 0x800156 <escrl>
				escfl += escfl * ((1240 - batV) / 3500.0);
     fa6:	b4 01       	movw	r22, r8
     fa8:	99 0c       	add	r9, r9
     faa:	88 0b       	sbc	r24, r24
     fac:	99 0b       	sbc	r25, r25
     fae:	0e 94 23 11 	call	0x2246	; 0x2246 <__floatsisf>
     fb2:	4b 01       	movw	r8, r22
     fb4:	5c 01       	movw	r10, r24
     fb6:	9b 01       	movw	r18, r22
     fb8:	ac 01       	movw	r20, r24
     fba:	c7 01       	movw	r24, r14
     fbc:	b6 01       	movw	r22, r12
     fbe:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
     fc2:	9b 01       	movw	r18, r22
     fc4:	ac 01       	movw	r20, r24
     fc6:	c5 01       	movw	r24, r10
     fc8:	b4 01       	movw	r22, r8
     fca:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
     fce:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__fixsfsi>
     fd2:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <escfl+0x1>
     fd6:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <escfl>
			}
			
			if (escfr < 1100) escfr = 1100;
     fda:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <escfr>
     fde:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <escfr+0x1>
     fe2:	8c 34       	cpi	r24, 0x4C	; 76
     fe4:	94 40       	sbci	r25, 0x04	; 4
     fe6:	34 f4       	brge	.+12     	; 0xff4 <__stack+0x6f5>
     fe8:	8c e4       	ldi	r24, 0x4C	; 76
     fea:	94 e0       	ldi	r25, 0x04	; 4
     fec:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <escfr+0x1>
     ff0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <escfr>
			if (escrr < 1100) escrr = 1100;
     ff4:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <escrr>
     ff8:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <escrr+0x1>
     ffc:	8c 34       	cpi	r24, 0x4C	; 76
     ffe:	94 40       	sbci	r25, 0x04	; 4
    1000:	34 f4       	brge	.+12     	; 0x100e <__stack+0x70f>
    1002:	8c e4       	ldi	r24, 0x4C	; 76
    1004:	94 e0       	ldi	r25, 0x04	; 4
    1006:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <escrr+0x1>
    100a:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <escrr>
			if (escrl < 1100) escrl = 1100;
    100e:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <escrl>
    1012:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <escrl+0x1>
    1016:	8c 34       	cpi	r24, 0x4C	; 76
    1018:	94 40       	sbci	r25, 0x04	; 4
    101a:	34 f4       	brge	.+12     	; 0x1028 <__stack+0x729>
    101c:	8c e4       	ldi	r24, 0x4C	; 76
    101e:	94 e0       	ldi	r25, 0x04	; 4
    1020:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <escrl+0x1>
    1024:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <escrl>
			if (escfl < 1100) escfl = 1100;
    1028:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <escfl>
    102c:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <escfl+0x1>
    1030:	8c 34       	cpi	r24, 0x4C	; 76
    1032:	94 40       	sbci	r25, 0x04	; 4
    1034:	34 f4       	brge	.+12     	; 0x1042 <__stack+0x743>
    1036:	8c e4       	ldi	r24, 0x4C	; 76
    1038:	94 e0       	ldi	r25, 0x04	; 4
    103a:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <escfl+0x1>
    103e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <escfl>
			
			if (escfr > 2000) escfr = 2000;
    1042:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <escfr>
    1046:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <escfr+0x1>
    104a:	81 3d       	cpi	r24, 0xD1	; 209
    104c:	97 40       	sbci	r25, 0x07	; 7
    104e:	34 f0       	brlt	.+12     	; 0x105c <__stack+0x75d>
    1050:	80 ed       	ldi	r24, 0xD0	; 208
    1052:	97 e0       	ldi	r25, 0x07	; 7
    1054:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <escfr+0x1>
    1058:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <escfr>
			if (escrr > 2000) escrr = 2000;
    105c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <escrr>
    1060:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <escrr+0x1>
    1064:	81 3d       	cpi	r24, 0xD1	; 209
    1066:	97 40       	sbci	r25, 0x07	; 7
    1068:	34 f0       	brlt	.+12     	; 0x1076 <__stack+0x777>
    106a:	80 ed       	ldi	r24, 0xD0	; 208
    106c:	97 e0       	ldi	r25, 0x07	; 7
    106e:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <escrr+0x1>
    1072:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <escrr>
			if (escrl > 2000) escrl = 2000;
    1076:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <escrl>
    107a:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <escrl+0x1>
    107e:	81 3d       	cpi	r24, 0xD1	; 209
    1080:	97 40       	sbci	r25, 0x07	; 7
    1082:	34 f0       	brlt	.+12     	; 0x1090 <__stack+0x791>
    1084:	80 ed       	ldi	r24, 0xD0	; 208
    1086:	97 e0       	ldi	r25, 0x07	; 7
    1088:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <escrl+0x1>
    108c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <escrl>
			if (escfl > 2000) escfl = 2000;
    1090:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <escfl>
    1094:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <escfl+0x1>
    1098:	81 3d       	cpi	r24, 0xD1	; 209
    109a:	97 40       	sbci	r25, 0x07	; 7
    109c:	cc f0       	brlt	.+50     	; 0x10d0 <__stack+0x7d1>
    109e:	80 ed       	ldi	r24, 0xD0	; 208
    10a0:	97 e0       	ldi	r25, 0x07	; 7
    10a2:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <escfl+0x1>
    10a6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <escfl>
    10aa:	12 c0       	rjmp	.+36     	; 0x10d0 <__stack+0x7d1>
		} else
		{
			escfr = 1000;
    10ac:	88 ee       	ldi	r24, 0xE8	; 232
    10ae:	93 e0       	ldi	r25, 0x03	; 3
    10b0:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <escfr+0x1>
    10b4:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <escfr>
			escrr = 1000;
    10b8:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <escrr+0x1>
    10bc:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <escrr>
			escrl = 1000;
    10c0:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <escrl+0x1>
    10c4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <escrl>
			escfl = 1000;
    10c8:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <escfl+0x1>
    10cc:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <escfl>
		}
		
		while (currentTime() - loopTmr < 4000);
    10d0:	0e 94 0a 01 	call	0x214	; 0x214 <currentTime>
    10d4:	c0 90 2c 01 	lds	r12, 0x012C	; 0x80012c <loopTmr>
    10d8:	d0 90 2d 01 	lds	r13, 0x012D	; 0x80012d <loopTmr+0x1>
    10dc:	e0 90 2e 01 	lds	r14, 0x012E	; 0x80012e <loopTmr+0x2>
    10e0:	f0 90 2f 01 	lds	r15, 0x012F	; 0x80012f <loopTmr+0x3>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	8c 19       	sub	r24, r12
    10ea:	9d 09       	sbc	r25, r13
    10ec:	ae 09       	sbc	r26, r14
    10ee:	bf 09       	sbc	r27, r15
    10f0:	80 3a       	cpi	r24, 0xA0	; 160
    10f2:	9f 40       	sbci	r25, 0x0F	; 15
    10f4:	a1 05       	cpc	r26, r1
    10f6:	b1 05       	cpc	r27, r1
    10f8:	58 f3       	brcs	.-42     	; 0x10d0 <__stack+0x7d1>
		loopTmr = currentTime();
    10fa:	0e 94 0a 01 	call	0x214	; 0x214 <currentTime>
    10fe:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <loopTmr>
    1102:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <loopTmr+0x1>
    1106:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <loopTmr+0x2>
    110a:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <loopTmr+0x3>
		
		PORTD |= 0b11110000;
    110e:	8b b1       	in	r24, 0x0b	; 11
    1110:	80 6f       	ori	r24, 0xF0	; 240
    1112:	8b b9       	out	0x0b, r24	; 11
		
		escfrTmr = escfr + loopTmr;
    1114:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <loopTmr>
    1118:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <loopTmr+0x1>
    111c:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <loopTmr+0x2>
    1120:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <loopTmr+0x3>
    1124:	40 91 28 01 	lds	r20, 0x0128	; 0x800128 <escfr>
    1128:	50 91 29 01 	lds	r21, 0x0129	; 0x800129 <escfr+0x1>
    112c:	05 2e       	mov	r0, r21
    112e:	00 0c       	add	r0, r0
    1130:	66 0b       	sbc	r22, r22
    1132:	77 0b       	sbc	r23, r23
    1134:	48 0f       	add	r20, r24
    1136:	59 1f       	adc	r21, r25
    1138:	6a 1f       	adc	r22, r26
    113a:	7b 1f       	adc	r23, r27
    113c:	40 93 4a 01 	sts	0x014A, r20	; 0x80014a <escfrTmr>
    1140:	50 93 4b 01 	sts	0x014B, r21	; 0x80014b <escfrTmr+0x1>
    1144:	60 93 4c 01 	sts	0x014C, r22	; 0x80014c <escfrTmr+0x2>
    1148:	70 93 4d 01 	sts	0x014D, r23	; 0x80014d <escfrTmr+0x3>
		escrrTmr = escrr + loopTmr;
    114c:	40 91 2a 01 	lds	r20, 0x012A	; 0x80012a <escrr>
    1150:	50 91 2b 01 	lds	r21, 0x012B	; 0x80012b <escrr+0x1>
    1154:	05 2e       	mov	r0, r21
    1156:	00 0c       	add	r0, r0
    1158:	66 0b       	sbc	r22, r22
    115a:	77 0b       	sbc	r23, r23
    115c:	48 0f       	add	r20, r24
    115e:	59 1f       	adc	r21, r25
    1160:	6a 1f       	adc	r22, r26
    1162:	7b 1f       	adc	r23, r27
    1164:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <escrrTmr>
    1168:	50 93 59 01 	sts	0x0159, r21	; 0x800159 <escrrTmr+0x1>
    116c:	60 93 5a 01 	sts	0x015A, r22	; 0x80015a <escrrTmr+0x2>
    1170:	70 93 5b 01 	sts	0x015B, r23	; 0x80015b <escrrTmr+0x3>
		escrlTmr = escrl + loopTmr;
    1174:	40 91 56 01 	lds	r20, 0x0156	; 0x800156 <escrl>
    1178:	50 91 57 01 	lds	r21, 0x0157	; 0x800157 <escrl+0x1>
    117c:	05 2e       	mov	r0, r21
    117e:	00 0c       	add	r0, r0
    1180:	66 0b       	sbc	r22, r22
    1182:	77 0b       	sbc	r23, r23
    1184:	48 0f       	add	r20, r24
    1186:	59 1f       	adc	r21, r25
    1188:	6a 1f       	adc	r22, r26
    118a:	7b 1f       	adc	r23, r27
    118c:	40 93 38 01 	sts	0x0138, r20	; 0x800138 <escrlTmr>
    1190:	50 93 39 01 	sts	0x0139, r21	; 0x800139 <escrlTmr+0x1>
    1194:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <escrlTmr+0x2>
    1198:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <escrlTmr+0x3>
		escflTmr = escfl + loopTmr;
    119c:	40 91 26 01 	lds	r20, 0x0126	; 0x800126 <escfl>
    11a0:	50 91 27 01 	lds	r21, 0x0127	; 0x800127 <escfl+0x1>
    11a4:	05 2e       	mov	r0, r21
    11a6:	00 0c       	add	r0, r0
    11a8:	66 0b       	sbc	r22, r22
    11aa:	77 0b       	sbc	r23, r23
    11ac:	84 0f       	add	r24, r20
    11ae:	95 1f       	adc	r25, r21
    11b0:	a6 1f       	adc	r26, r22
    11b2:	b7 1f       	adc	r27, r23
    11b4:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <escflTmr>
    11b8:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <escflTmr+0x1>
    11bc:	a0 93 50 01 	sts	0x0150, r26	; 0x800150 <escflTmr+0x2>
    11c0:	b0 93 51 01 	sts	0x0151, r27	; 0x800151 <escflTmr+0x3>
		
		readIMU();
    11c4:	0e 94 ff 01 	call	0x3fe	; 0x3fe <readIMU>
		readRec();
    11c8:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <readRec>
		
		while (PORTD >= 16)
    11cc:	62 c0       	rjmp	.+196    	; 0x1292 <__stack+0x993>
		{
			escsCurrTime = currentTime();
    11ce:	0e 94 0a 01 	call	0x214	; 0x214 <currentTime>
    11d2:	60 93 52 01 	sts	0x0152, r22	; 0x800152 <escsCurrTime>
    11d6:	70 93 53 01 	sts	0x0153, r23	; 0x800153 <escsCurrTime+0x1>
    11da:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <escsCurrTime+0x2>
    11de:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <escsCurrTime+0x3>
			if (escfrTmr <= escsCurrTime) PORTD &= ~(1<<4);
    11e2:	c0 90 4a 01 	lds	r12, 0x014A	; 0x80014a <escfrTmr>
    11e6:	d0 90 4b 01 	lds	r13, 0x014B	; 0x80014b <escfrTmr+0x1>
    11ea:	e0 90 4c 01 	lds	r14, 0x014C	; 0x80014c <escfrTmr+0x2>
    11ee:	f0 90 4d 01 	lds	r15, 0x014D	; 0x80014d <escfrTmr+0x3>
    11f2:	6c 15       	cp	r22, r12
    11f4:	7d 05       	cpc	r23, r13
    11f6:	8e 05       	cpc	r24, r14
    11f8:	9f 05       	cpc	r25, r15
    11fa:	18 f0       	brcs	.+6      	; 0x1202 <__stack+0x903>
    11fc:	8b b1       	in	r24, 0x0b	; 11
    11fe:	8f 7e       	andi	r24, 0xEF	; 239
    1200:	8b b9       	out	0x0b, r24	; 11
			if (escrrTmr <= escsCurrTime) PORTD &= ~(1<<5);
    1202:	40 91 58 01 	lds	r20, 0x0158	; 0x800158 <escrrTmr>
    1206:	50 91 59 01 	lds	r21, 0x0159	; 0x800159 <escrrTmr+0x1>
    120a:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <escrrTmr+0x2>
    120e:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <escrrTmr+0x3>
    1212:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <escsCurrTime>
    1216:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <escsCurrTime+0x1>
    121a:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <escsCurrTime+0x2>
    121e:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <escsCurrTime+0x3>
    1222:	84 17       	cp	r24, r20
    1224:	95 07       	cpc	r25, r21
    1226:	a6 07       	cpc	r26, r22
    1228:	b7 07       	cpc	r27, r23
    122a:	18 f0       	brcs	.+6      	; 0x1232 <__stack+0x933>
    122c:	8b b1       	in	r24, 0x0b	; 11
    122e:	8f 7d       	andi	r24, 0xDF	; 223
    1230:	8b b9       	out	0x0b, r24	; 11
			if (escrlTmr <= escsCurrTime) PORTD &= ~(1<<6);
    1232:	40 91 38 01 	lds	r20, 0x0138	; 0x800138 <escrlTmr>
    1236:	50 91 39 01 	lds	r21, 0x0139	; 0x800139 <escrlTmr+0x1>
    123a:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <escrlTmr+0x2>
    123e:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <escrlTmr+0x3>
    1242:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <escsCurrTime>
    1246:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <escsCurrTime+0x1>
    124a:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <escsCurrTime+0x2>
    124e:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <escsCurrTime+0x3>
    1252:	84 17       	cp	r24, r20
    1254:	95 07       	cpc	r25, r21
    1256:	a6 07       	cpc	r26, r22
    1258:	b7 07       	cpc	r27, r23
    125a:	18 f0       	brcs	.+6      	; 0x1262 <__stack+0x963>
    125c:	8b b1       	in	r24, 0x0b	; 11
    125e:	8f 7b       	andi	r24, 0xBF	; 191
    1260:	8b b9       	out	0x0b, r24	; 11
			if (escflTmr <= escsCurrTime) PORTD &= ~(1<<7);
    1262:	40 91 4e 01 	lds	r20, 0x014E	; 0x80014e <escflTmr>
    1266:	50 91 4f 01 	lds	r21, 0x014F	; 0x80014f <escflTmr+0x1>
    126a:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <escflTmr+0x2>
    126e:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <escflTmr+0x3>
    1272:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <escsCurrTime>
    1276:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <escsCurrTime+0x1>
    127a:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <escsCurrTime+0x2>
    127e:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <escsCurrTime+0x3>
    1282:	84 17       	cp	r24, r20
    1284:	95 07       	cpc	r25, r21
    1286:	a6 07       	cpc	r26, r22
    1288:	b7 07       	cpc	r27, r23
    128a:	18 f0       	brcs	.+6      	; 0x1292 <__stack+0x993>
    128c:	8b b1       	in	r24, 0x0b	; 11
    128e:	8f 77       	andi	r24, 0x7F	; 127
    1290:	8b b9       	out	0x0b, r24	; 11
		escflTmr = escfl + loopTmr;
		
		readIMU();
		readRec();
		
		while (PORTD >= 16)
    1292:	8b b1       	in	r24, 0x0b	; 11
    1294:	80 31       	cpi	r24, 0x10	; 16
    1296:	08 f0       	brcs	.+2      	; 0x129a <__stack+0x99b>
    1298:	9a cf       	rjmp	.-204    	; 0x11ce <__stack+0x8cf>
    129a:	ba ca       	rjmp	.-2700   	; 0x810 <__DATA_REGION_LENGTH__+0x10>

0000129c <calcPID>:

extern float roll, pitch;
extern float rollRate, pitchRate, yawRate;

void calcPID()
{
    129c:	8f 92       	push	r8
    129e:	9f 92       	push	r9
    12a0:	af 92       	push	r10
    12a2:	bf 92       	push	r11
    12a4:	cf 92       	push	r12
    12a6:	df 92       	push	r13
    12a8:	ef 92       	push	r14
    12aa:	ff 92       	push	r15
	error = rollSetp - roll;
    12ac:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <roll>
    12b0:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <roll+0x1>
    12b4:	40 91 66 01 	lds	r20, 0x0166	; 0x800166 <roll+0x2>
    12b8:	50 91 67 01 	lds	r21, 0x0167	; 0x800167 <roll+0x3>
    12bc:	60 91 85 01 	lds	r22, 0x0185	; 0x800185 <rollSetp>
    12c0:	70 91 86 01 	lds	r23, 0x0186	; 0x800186 <rollSetp+0x1>
    12c4:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <rollSetp+0x2>
    12c8:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <rollSetp+0x3>
    12cc:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
	rollRateSetp = error * anglePropGain;
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	40 e8       	ldi	r20, 0x80	; 128
    12d6:	50 e4       	ldi	r21, 0x40	; 64
    12d8:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
    12dc:	60 93 79 01 	sts	0x0179, r22	; 0x800179 <rollRateSetp>
    12e0:	70 93 7a 01 	sts	0x017A, r23	; 0x80017a <rollRateSetp+0x1>
    12e4:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <rollRateSetp+0x2>
    12e8:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <rollRateSetp+0x3>
	error = rollRateSetp - rollRate;
    12ec:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <rollRate>
    12f0:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <rollRate+0x1>
    12f4:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <rollRate+0x2>
    12f8:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <rollRate+0x3>
    12fc:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
    1300:	4b 01       	movw	r8, r22
    1302:	5c 01       	movw	r10, r24
	if (rollClamp == 0 && recThrottle >= 1100) rollRateInt += error * rollRateIntGain;
    1304:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <rollClamp>
    1308:	81 11       	cpse	r24, r1
    130a:	23 c0       	rjmp	.+70     	; 0x1352 <calcPID+0xb6>
    130c:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <recThrottle>
    1310:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <recThrottle+0x1>
    1314:	8c 34       	cpi	r24, 0x4C	; 76
    1316:	94 40       	sbci	r25, 0x04	; 4
    1318:	e4 f0       	brlt	.+56     	; 0x1352 <calcPID+0xb6>
    131a:	2c eb       	ldi	r18, 0xBC	; 188
    131c:	34 e7       	ldi	r19, 0x74	; 116
    131e:	43 e9       	ldi	r20, 0x93	; 147
    1320:	5c e3       	ldi	r21, 0x3C	; 60
    1322:	c5 01       	movw	r24, r10
    1324:	b4 01       	movw	r22, r8
    1326:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
    132a:	9b 01       	movw	r18, r22
    132c:	ac 01       	movw	r20, r24
    132e:	60 91 ab 01 	lds	r22, 0x01AB	; 0x8001ab <rollRateInt>
    1332:	70 91 ac 01 	lds	r23, 0x01AC	; 0x8001ac <rollRateInt+0x1>
    1336:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <rollRateInt+0x2>
    133a:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <rollRateInt+0x3>
    133e:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
    1342:	60 93 ab 01 	sts	0x01AB, r22	; 0x8001ab <rollRateInt>
    1346:	70 93 ac 01 	sts	0x01AC, r23	; 0x8001ac <rollRateInt+0x1>
    134a:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <rollRateInt+0x2>
    134e:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <rollRateInt+0x3>
	if (rollRateInt > controlMax) rollRateInt = controlMax;
    1352:	60 91 ab 01 	lds	r22, 0x01AB	; 0x8001ab <rollRateInt>
    1356:	70 91 ac 01 	lds	r23, 0x01AC	; 0x8001ac <rollRateInt+0x1>
    135a:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <rollRateInt+0x2>
    135e:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <rollRateInt+0x3>
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	48 ec       	ldi	r20, 0xC8	; 200
    1368:	53 e4       	ldi	r21, 0x43	; 67
    136a:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__gesf2>
    136e:	18 16       	cp	r1, r24
    1370:	64 f4       	brge	.+24     	; 0x138a <calcPID+0xee>
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	a8 ec       	ldi	r26, 0xC8	; 200
    1378:	b3 e4       	ldi	r27, 0x43	; 67
    137a:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <rollRateInt>
    137e:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <rollRateInt+0x1>
    1382:	a0 93 ad 01 	sts	0x01AD, r26	; 0x8001ad <rollRateInt+0x2>
    1386:	b0 93 ae 01 	sts	0x01AE, r27	; 0x8001ae <rollRateInt+0x3>
	if (rollRateInt < -controlMax) rollRateInt = -controlMax;
    138a:	60 91 ab 01 	lds	r22, 0x01AB	; 0x8001ab <rollRateInt>
    138e:	70 91 ac 01 	lds	r23, 0x01AC	; 0x8001ac <rollRateInt+0x1>
    1392:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <rollRateInt+0x2>
    1396:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <rollRateInt+0x3>
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	48 ec       	ldi	r20, 0xC8	; 200
    13a0:	53 ec       	ldi	r21, 0xC3	; 195
    13a2:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__cmpsf2>
    13a6:	88 23       	and	r24, r24
    13a8:	64 f4       	brge	.+24     	; 0x13c2 <calcPID+0x126>
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	a8 ec       	ldi	r26, 0xC8	; 200
    13b0:	b3 ec       	ldi	r27, 0xC3	; 195
    13b2:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <rollRateInt>
    13b6:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <rollRateInt+0x1>
    13ba:	a0 93 ad 01 	sts	0x01AD, r26	; 0x8001ad <rollRateInt+0x2>
    13be:	b0 93 ae 01 	sts	0x01AE, r27	; 0x8001ae <rollRateInt+0x3>
	rollControl = error * rollRatePropGain + rollRateInt + (error - rollRateLastErr) * rollRateDerGain;
    13c2:	23 e3       	ldi	r18, 0x33	; 51
    13c4:	33 e3       	ldi	r19, 0x33	; 51
    13c6:	43 e1       	ldi	r20, 0x13	; 19
    13c8:	50 e4       	ldi	r21, 0x40	; 64
    13ca:	c5 01       	movw	r24, r10
    13cc:	b4 01       	movw	r22, r8
    13ce:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
    13d2:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <rollRateInt>
    13d6:	30 91 ac 01 	lds	r19, 0x01AC	; 0x8001ac <rollRateInt+0x1>
    13da:	40 91 ad 01 	lds	r20, 0x01AD	; 0x8001ad <rollRateInt+0x2>
    13de:	50 91 ae 01 	lds	r21, 0x01AE	; 0x8001ae <rollRateInt+0x3>
    13e2:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
    13e6:	6b 01       	movw	r12, r22
    13e8:	7c 01       	movw	r14, r24
    13ea:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <rollRateLastErr>
    13ee:	30 91 a8 01 	lds	r19, 0x01A8	; 0x8001a8 <rollRateLastErr+0x1>
    13f2:	40 91 a9 01 	lds	r20, 0x01A9	; 0x8001a9 <rollRateLastErr+0x2>
    13f6:	50 91 aa 01 	lds	r21, 0x01AA	; 0x8001aa <rollRateLastErr+0x3>
    13fa:	c5 01       	movw	r24, r10
    13fc:	b4 01       	movw	r22, r8
    13fe:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	40 ee       	ldi	r20, 0xE0	; 224
    1408:	51 e4       	ldi	r21, 0x41	; 65
    140a:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
    140e:	9b 01       	movw	r18, r22
    1410:	ac 01       	movw	r20, r24
    1412:	c7 01       	movw	r24, r14
    1414:	b6 01       	movw	r22, r12
    1416:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
    141a:	6b 01       	movw	r12, r22
    141c:	7c 01       	movw	r14, r24
    141e:	60 93 b3 01 	sts	0x01B3, r22	; 0x8001b3 <rollControl>
    1422:	70 93 b4 01 	sts	0x01B4, r23	; 0x8001b4 <rollControl+0x1>
    1426:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <rollControl+0x2>
    142a:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <rollControl+0x3>
	if ((rollControl > controlMax || rollControl < -controlMax) && (error * rollControl > 0)) rollClamp = 1;
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	48 ec       	ldi	r20, 0xC8	; 200
    1434:	53 e4       	ldi	r21, 0x43	; 67
    1436:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__gesf2>
    143a:	18 16       	cp	r1, r24
    143c:	54 f0       	brlt	.+20     	; 0x1452 <calcPID+0x1b6>
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	48 ec       	ldi	r20, 0xC8	; 200
    1444:	53 ec       	ldi	r21, 0xC3	; 195
    1446:	c7 01       	movw	r24, r14
    1448:	b6 01       	movw	r22, r12
    144a:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__cmpsf2>
    144e:	88 23       	and	r24, r24
    1450:	8c f4       	brge	.+34     	; 0x1474 <calcPID+0x1d8>
    1452:	a7 01       	movw	r20, r14
    1454:	96 01       	movw	r18, r12
    1456:	c5 01       	movw	r24, r10
    1458:	b4 01       	movw	r22, r8
    145a:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	a9 01       	movw	r20, r18
    1464:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__gesf2>
    1468:	18 16       	cp	r1, r24
    146a:	24 f4       	brge	.+8      	; 0x1474 <calcPID+0x1d8>
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <rollClamp>
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <calcPID+0x1dc>
	else rollClamp = 0;
    1474:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <rollClamp>
	if (rollControl > controlMax) rollControl = controlMax;
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	48 ec       	ldi	r20, 0xC8	; 200
    147e:	53 e4       	ldi	r21, 0x43	; 67
    1480:	c7 01       	movw	r24, r14
    1482:	b6 01       	movw	r22, r12
    1484:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__gesf2>
    1488:	18 16       	cp	r1, r24
    148a:	64 f4       	brge	.+24     	; 0x14a4 <calcPID+0x208>
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	a8 ec       	ldi	r26, 0xC8	; 200
    1492:	b3 e4       	ldi	r27, 0x43	; 67
    1494:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <rollControl>
    1498:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <rollControl+0x1>
    149c:	a0 93 b5 01 	sts	0x01B5, r26	; 0x8001b5 <rollControl+0x2>
    14a0:	b0 93 b6 01 	sts	0x01B6, r27	; 0x8001b6 <rollControl+0x3>
	if (rollControl < -controlMax) rollControl = -controlMax;
    14a4:	60 91 b3 01 	lds	r22, 0x01B3	; 0x8001b3 <rollControl>
    14a8:	70 91 b4 01 	lds	r23, 0x01B4	; 0x8001b4 <rollControl+0x1>
    14ac:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <rollControl+0x2>
    14b0:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <rollControl+0x3>
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	48 ec       	ldi	r20, 0xC8	; 200
    14ba:	53 ec       	ldi	r21, 0xC3	; 195
    14bc:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__cmpsf2>
    14c0:	88 23       	and	r24, r24
    14c2:	64 f4       	brge	.+24     	; 0x14dc <calcPID+0x240>
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	a8 ec       	ldi	r26, 0xC8	; 200
    14ca:	b3 ec       	ldi	r27, 0xC3	; 195
    14cc:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <rollControl>
    14d0:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <rollControl+0x1>
    14d4:	a0 93 b5 01 	sts	0x01B5, r26	; 0x8001b5 <rollControl+0x2>
    14d8:	b0 93 b6 01 	sts	0x01B6, r27	; 0x8001b6 <rollControl+0x3>
	rollRateLastErr = error;
    14dc:	80 92 a7 01 	sts	0x01A7, r8	; 0x8001a7 <rollRateLastErr>
    14e0:	90 92 a8 01 	sts	0x01A8, r9	; 0x8001a8 <rollRateLastErr+0x1>
    14e4:	a0 92 a9 01 	sts	0x01A9, r10	; 0x8001a9 <rollRateLastErr+0x2>
    14e8:	b0 92 aa 01 	sts	0x01AA, r11	; 0x8001aa <rollRateLastErr+0x3>
	
	error = pitchSetp - pitch;
    14ec:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <pitch>
    14f0:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <pitch+0x1>
    14f4:	40 91 62 01 	lds	r20, 0x0162	; 0x800162 <pitch+0x2>
    14f8:	50 91 63 01 	lds	r21, 0x0163	; 0x800163 <pitch+0x3>
    14fc:	60 91 95 01 	lds	r22, 0x0195	; 0x800195 <pitchSetp>
    1500:	70 91 96 01 	lds	r23, 0x0196	; 0x800196 <pitchSetp+0x1>
    1504:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <pitchSetp+0x2>
    1508:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <pitchSetp+0x3>
    150c:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
	pitchRateSetp = error * anglePropGain;
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	40 e8       	ldi	r20, 0x80	; 128
    1516:	50 e4       	ldi	r21, 0x40	; 64
    1518:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
    151c:	60 93 9f 01 	sts	0x019F, r22	; 0x80019f <pitchRateSetp>
    1520:	70 93 a0 01 	sts	0x01A0, r23	; 0x8001a0 <pitchRateSetp+0x1>
    1524:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <pitchRateSetp+0x2>
    1528:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <pitchRateSetp+0x3>
	error = pitchRateSetp - pitchRate;
    152c:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <pitchRate>
    1530:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <pitchRate+0x1>
    1534:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <pitchRate+0x2>
    1538:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <pitchRate+0x3>
    153c:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
    1540:	4b 01       	movw	r8, r22
    1542:	5c 01       	movw	r10, r24
	if (pitchClamp == 0 && recThrottle >= 1100) pitchRateInt += error * pitchRateIntGain;
    1544:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <pitchClamp>
    1548:	81 11       	cpse	r24, r1
    154a:	23 c0       	rjmp	.+70     	; 0x1592 <calcPID+0x2f6>
    154c:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <recThrottle>
    1550:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <recThrottle+0x1>
    1554:	8c 34       	cpi	r24, 0x4C	; 76
    1556:	94 40       	sbci	r25, 0x04	; 4
    1558:	e4 f0       	brlt	.+56     	; 0x1592 <calcPID+0x2f6>
    155a:	2c eb       	ldi	r18, 0xBC	; 188
    155c:	34 e7       	ldi	r19, 0x74	; 116
    155e:	43 e9       	ldi	r20, 0x93	; 147
    1560:	5c e3       	ldi	r21, 0x3C	; 60
    1562:	c5 01       	movw	r24, r10
    1564:	b4 01       	movw	r22, r8
    1566:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
    156a:	9b 01       	movw	r18, r22
    156c:	ac 01       	movw	r20, r24
    156e:	60 91 9b 01 	lds	r22, 0x019B	; 0x80019b <pitchRateInt>
    1572:	70 91 9c 01 	lds	r23, 0x019C	; 0x80019c <pitchRateInt+0x1>
    1576:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <pitchRateInt+0x2>
    157a:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <pitchRateInt+0x3>
    157e:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
    1582:	60 93 9b 01 	sts	0x019B, r22	; 0x80019b <pitchRateInt>
    1586:	70 93 9c 01 	sts	0x019C, r23	; 0x80019c <pitchRateInt+0x1>
    158a:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <pitchRateInt+0x2>
    158e:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <pitchRateInt+0x3>
	if (pitchRateInt > controlMax) pitchRateInt = controlMax;
    1592:	60 91 9b 01 	lds	r22, 0x019B	; 0x80019b <pitchRateInt>
    1596:	70 91 9c 01 	lds	r23, 0x019C	; 0x80019c <pitchRateInt+0x1>
    159a:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <pitchRateInt+0x2>
    159e:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <pitchRateInt+0x3>
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	48 ec       	ldi	r20, 0xC8	; 200
    15a8:	53 e4       	ldi	r21, 0x43	; 67
    15aa:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__gesf2>
    15ae:	18 16       	cp	r1, r24
    15b0:	64 f4       	brge	.+24     	; 0x15ca <calcPID+0x32e>
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	a8 ec       	ldi	r26, 0xC8	; 200
    15b8:	b3 e4       	ldi	r27, 0x43	; 67
    15ba:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <pitchRateInt>
    15be:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <pitchRateInt+0x1>
    15c2:	a0 93 9d 01 	sts	0x019D, r26	; 0x80019d <pitchRateInt+0x2>
    15c6:	b0 93 9e 01 	sts	0x019E, r27	; 0x80019e <pitchRateInt+0x3>
	if (pitchRateInt < -controlMax) pitchRateInt = -controlMax;
    15ca:	60 91 9b 01 	lds	r22, 0x019B	; 0x80019b <pitchRateInt>
    15ce:	70 91 9c 01 	lds	r23, 0x019C	; 0x80019c <pitchRateInt+0x1>
    15d2:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <pitchRateInt+0x2>
    15d6:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <pitchRateInt+0x3>
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	48 ec       	ldi	r20, 0xC8	; 200
    15e0:	53 ec       	ldi	r21, 0xC3	; 195
    15e2:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__cmpsf2>
    15e6:	88 23       	and	r24, r24
    15e8:	64 f4       	brge	.+24     	; 0x1602 <calcPID+0x366>
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	a8 ec       	ldi	r26, 0xC8	; 200
    15f0:	b3 ec       	ldi	r27, 0xC3	; 195
    15f2:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <pitchRateInt>
    15f6:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <pitchRateInt+0x1>
    15fa:	a0 93 9d 01 	sts	0x019D, r26	; 0x80019d <pitchRateInt+0x2>
    15fe:	b0 93 9e 01 	sts	0x019E, r27	; 0x80019e <pitchRateInt+0x3>
	pitchControl = error * pitchRatePropGain + pitchRateInt + (error - pitchRateLastErr) * pitchRateDerGain;
    1602:	23 e3       	ldi	r18, 0x33	; 51
    1604:	33 e3       	ldi	r19, 0x33	; 51
    1606:	43 e1       	ldi	r20, 0x13	; 19
    1608:	50 e4       	ldi	r21, 0x40	; 64
    160a:	c5 01       	movw	r24, r10
    160c:	b4 01       	movw	r22, r8
    160e:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
    1612:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <pitchRateInt>
    1616:	30 91 9c 01 	lds	r19, 0x019C	; 0x80019c <pitchRateInt+0x1>
    161a:	40 91 9d 01 	lds	r20, 0x019D	; 0x80019d <pitchRateInt+0x2>
    161e:	50 91 9e 01 	lds	r21, 0x019E	; 0x80019e <pitchRateInt+0x3>
    1622:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
    1626:	6b 01       	movw	r12, r22
    1628:	7c 01       	movw	r14, r24
    162a:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <pitchRateLastErr>
    162e:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <pitchRateLastErr+0x1>
    1632:	40 91 8b 01 	lds	r20, 0x018B	; 0x80018b <pitchRateLastErr+0x2>
    1636:	50 91 8c 01 	lds	r21, 0x018C	; 0x80018c <pitchRateLastErr+0x3>
    163a:	c5 01       	movw	r24, r10
    163c:	b4 01       	movw	r22, r8
    163e:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
    1642:	20 e0       	ldi	r18, 0x00	; 0
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	40 ef       	ldi	r20, 0xF0	; 240
    1648:	51 e4       	ldi	r21, 0x41	; 65
    164a:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
    164e:	9b 01       	movw	r18, r22
    1650:	ac 01       	movw	r20, r24
    1652:	c7 01       	movw	r24, r14
    1654:	b6 01       	movw	r22, r12
    1656:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
    165a:	6b 01       	movw	r12, r22
    165c:	7c 01       	movw	r14, r24
    165e:	60 93 75 01 	sts	0x0175, r22	; 0x800175 <pitchControl>
    1662:	70 93 76 01 	sts	0x0176, r23	; 0x800176 <pitchControl+0x1>
    1666:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <pitchControl+0x2>
    166a:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <pitchControl+0x3>
	if ((pitchControl > controlMax || pitchControl < -controlMax) && (error * pitchControl > 0)) pitchClamp = 1;
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	48 ec       	ldi	r20, 0xC8	; 200
    1674:	53 e4       	ldi	r21, 0x43	; 67
    1676:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__gesf2>
    167a:	18 16       	cp	r1, r24
    167c:	54 f0       	brlt	.+20     	; 0x1692 <calcPID+0x3f6>
    167e:	20 e0       	ldi	r18, 0x00	; 0
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	48 ec       	ldi	r20, 0xC8	; 200
    1684:	53 ec       	ldi	r21, 0xC3	; 195
    1686:	c7 01       	movw	r24, r14
    1688:	b6 01       	movw	r22, r12
    168a:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__cmpsf2>
    168e:	88 23       	and	r24, r24
    1690:	8c f4       	brge	.+34     	; 0x16b4 <calcPID+0x418>
    1692:	a7 01       	movw	r20, r14
    1694:	96 01       	movw	r18, r12
    1696:	c5 01       	movw	r24, r10
    1698:	b4 01       	movw	r22, r8
    169a:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	a9 01       	movw	r20, r18
    16a4:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__gesf2>
    16a8:	18 16       	cp	r1, r24
    16aa:	24 f4       	brge	.+8      	; 0x16b4 <calcPID+0x418>
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <pitchClamp>
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <calcPID+0x41c>
	else pitchClamp = 0;
    16b4:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <pitchClamp>
	if (pitchControl > controlMax) pitchControl = controlMax;
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	48 ec       	ldi	r20, 0xC8	; 200
    16be:	53 e4       	ldi	r21, 0x43	; 67
    16c0:	c7 01       	movw	r24, r14
    16c2:	b6 01       	movw	r22, r12
    16c4:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__gesf2>
    16c8:	18 16       	cp	r1, r24
    16ca:	64 f4       	brge	.+24     	; 0x16e4 <calcPID+0x448>
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	a8 ec       	ldi	r26, 0xC8	; 200
    16d2:	b3 e4       	ldi	r27, 0x43	; 67
    16d4:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <pitchControl>
    16d8:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <pitchControl+0x1>
    16dc:	a0 93 77 01 	sts	0x0177, r26	; 0x800177 <pitchControl+0x2>
    16e0:	b0 93 78 01 	sts	0x0178, r27	; 0x800178 <pitchControl+0x3>
	if (pitchControl < -controlMax) pitchControl = -controlMax;
    16e4:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <pitchControl>
    16e8:	70 91 76 01 	lds	r23, 0x0176	; 0x800176 <pitchControl+0x1>
    16ec:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <pitchControl+0x2>
    16f0:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <pitchControl+0x3>
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	48 ec       	ldi	r20, 0xC8	; 200
    16fa:	53 ec       	ldi	r21, 0xC3	; 195
    16fc:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__cmpsf2>
    1700:	88 23       	and	r24, r24
    1702:	64 f4       	brge	.+24     	; 0x171c <calcPID+0x480>
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	a8 ec       	ldi	r26, 0xC8	; 200
    170a:	b3 ec       	ldi	r27, 0xC3	; 195
    170c:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <pitchControl>
    1710:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <pitchControl+0x1>
    1714:	a0 93 77 01 	sts	0x0177, r26	; 0x800177 <pitchControl+0x2>
    1718:	b0 93 78 01 	sts	0x0178, r27	; 0x800178 <pitchControl+0x3>
	pitchRateLastErr = error;
    171c:	80 92 89 01 	sts	0x0189, r8	; 0x800189 <pitchRateLastErr>
    1720:	90 92 8a 01 	sts	0x018A, r9	; 0x80018a <pitchRateLastErr+0x1>
    1724:	a0 92 8b 01 	sts	0x018B, r10	; 0x80018b <pitchRateLastErr+0x2>
    1728:	b0 92 8c 01 	sts	0x018C, r11	; 0x80018c <pitchRateLastErr+0x3>
	
	error = yawSetp;
    172c:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <yawSetp>
    1730:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <yawSetp+0x1>
    1734:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <yawSetp+0x2>
    1738:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <yawSetp+0x3>
	yawRateSetp = error * anglePropGain;
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e8       	ldi	r20, 0x80	; 128
    1742:	50 e4       	ldi	r21, 0x40	; 64
    1744:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
    1748:	60 93 81 01 	sts	0x0181, r22	; 0x800181 <yawRateSetp>
    174c:	70 93 82 01 	sts	0x0182, r23	; 0x800182 <yawRateSetp+0x1>
    1750:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <yawRateSetp+0x2>
    1754:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <yawRateSetp+0x3>
	error = yawRateSetp - yawRate;
    1758:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <yawRate>
    175c:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <yawRate+0x1>
    1760:	40 91 3e 01 	lds	r20, 0x013E	; 0x80013e <yawRate+0x2>
    1764:	50 91 3f 01 	lds	r21, 0x013F	; 0x80013f <yawRate+0x3>
    1768:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
    176c:	6b 01       	movw	r12, r22
    176e:	7c 01       	movw	r14, r24
    1770:	60 93 af 01 	sts	0x01AF, r22	; 0x8001af <error>
    1774:	70 93 b0 01 	sts	0x01B0, r23	; 0x8001b0 <error+0x1>
    1778:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <error+0x2>
    177c:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <error+0x3>
	if (yawClamp == 0 && recThrottle >= 1100) yawRateInt += error * yawRateIntGain;
    1780:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <yawClamp>
    1784:	81 11       	cpse	r24, r1
    1786:	23 c0       	rjmp	.+70     	; 0x17ce <calcPID+0x532>
    1788:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <recThrottle>
    178c:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <recThrottle+0x1>
    1790:	8c 34       	cpi	r24, 0x4C	; 76
    1792:	94 40       	sbci	r25, 0x04	; 4
    1794:	e4 f0       	brlt	.+56     	; 0x17ce <calcPID+0x532>
    1796:	2a e0       	ldi	r18, 0x0A	; 10
    1798:	37 ed       	ldi	r19, 0xD7	; 215
    179a:	43 ea       	ldi	r20, 0xA3	; 163
    179c:	5d e3       	ldi	r21, 0x3D	; 61
    179e:	c7 01       	movw	r24, r14
    17a0:	b6 01       	movw	r22, r12
    17a2:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
    17a6:	9b 01       	movw	r18, r22
    17a8:	ac 01       	movw	r20, r24
    17aa:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <yawRateInt>
    17ae:	70 91 a4 01 	lds	r23, 0x01A4	; 0x8001a4 <yawRateInt+0x1>
    17b2:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <yawRateInt+0x2>
    17b6:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <yawRateInt+0x3>
    17ba:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
    17be:	60 93 a3 01 	sts	0x01A3, r22	; 0x8001a3 <yawRateInt>
    17c2:	70 93 a4 01 	sts	0x01A4, r23	; 0x8001a4 <yawRateInt+0x1>
    17c6:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <yawRateInt+0x2>
    17ca:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <yawRateInt+0x3>
	if (yawRateInt > controlMax) yawRateInt = controlMax;
    17ce:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <yawRateInt>
    17d2:	70 91 a4 01 	lds	r23, 0x01A4	; 0x8001a4 <yawRateInt+0x1>
    17d6:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <yawRateInt+0x2>
    17da:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <yawRateInt+0x3>
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	48 ec       	ldi	r20, 0xC8	; 200
    17e4:	53 e4       	ldi	r21, 0x43	; 67
    17e6:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__gesf2>
    17ea:	18 16       	cp	r1, r24
    17ec:	64 f4       	brge	.+24     	; 0x1806 <calcPID+0x56a>
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	a8 ec       	ldi	r26, 0xC8	; 200
    17f4:	b3 e4       	ldi	r27, 0x43	; 67
    17f6:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <yawRateInt>
    17fa:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <yawRateInt+0x1>
    17fe:	a0 93 a5 01 	sts	0x01A5, r26	; 0x8001a5 <yawRateInt+0x2>
    1802:	b0 93 a6 01 	sts	0x01A6, r27	; 0x8001a6 <yawRateInt+0x3>
	if (yawRateInt < -controlMax) yawRateInt = -controlMax;
    1806:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <yawRateInt>
    180a:	70 91 a4 01 	lds	r23, 0x01A4	; 0x8001a4 <yawRateInt+0x1>
    180e:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <yawRateInt+0x2>
    1812:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <yawRateInt+0x3>
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	48 ec       	ldi	r20, 0xC8	; 200
    181c:	53 ec       	ldi	r21, 0xC3	; 195
    181e:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__cmpsf2>
    1822:	88 23       	and	r24, r24
    1824:	64 f4       	brge	.+24     	; 0x183e <calcPID+0x5a2>
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	a8 ec       	ldi	r26, 0xC8	; 200
    182c:	b3 ec       	ldi	r27, 0xC3	; 195
    182e:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <yawRateInt>
    1832:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <yawRateInt+0x1>
    1836:	a0 93 a5 01 	sts	0x01A5, r26	; 0x8001a5 <yawRateInt+0x2>
    183a:	b0 93 a6 01 	sts	0x01A6, r27	; 0x8001a6 <yawRateInt+0x3>
	yawControl = error * yawRatePropGain + yawRateInt + (error - yawRateLastErr) * yawRateDerGain;
    183e:	26 e6       	ldi	r18, 0x66	; 102
    1840:	36 e6       	ldi	r19, 0x66	; 102
    1842:	46 ea       	ldi	r20, 0xA6	; 166
    1844:	5f e3       	ldi	r21, 0x3F	; 63
    1846:	c7 01       	movw	r24, r14
    1848:	b6 01       	movw	r22, r12
    184a:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
    184e:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <yawRateInt>
    1852:	30 91 a4 01 	lds	r19, 0x01A4	; 0x8001a4 <yawRateInt+0x1>
    1856:	40 91 a5 01 	lds	r20, 0x01A5	; 0x8001a5 <yawRateInt+0x2>
    185a:	50 91 a6 01 	lds	r21, 0x01A6	; 0x8001a6 <yawRateInt+0x3>
    185e:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
    1862:	4b 01       	movw	r8, r22
    1864:	5c 01       	movw	r10, r24
    1866:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <yawRateLastErr>
    186a:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <yawRateLastErr+0x1>
    186e:	40 91 8f 01 	lds	r20, 0x018F	; 0x80018f <yawRateLastErr+0x2>
    1872:	50 91 90 01 	lds	r21, 0x0190	; 0x800190 <yawRateLastErr+0x3>
    1876:	c7 01       	movw	r24, r14
    1878:	b6 01       	movw	r22, r12
    187a:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	a9 01       	movw	r20, r18
    1884:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
    1888:	9b 01       	movw	r18, r22
    188a:	ac 01       	movw	r20, r24
    188c:	c5 01       	movw	r24, r10
    188e:	b4 01       	movw	r22, r8
    1890:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
    1894:	4b 01       	movw	r8, r22
    1896:	5c 01       	movw	r10, r24
    1898:	60 93 7d 01 	sts	0x017D, r22	; 0x80017d <yawControl>
    189c:	70 93 7e 01 	sts	0x017E, r23	; 0x80017e <yawControl+0x1>
    18a0:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <yawControl+0x2>
    18a4:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <yawControl+0x3>
	if ((yawControl > controlMax || yawControl < -controlMax) && (error * yawControl > 0)) yawClamp = 1;
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	48 ec       	ldi	r20, 0xC8	; 200
    18ae:	53 e4       	ldi	r21, 0x43	; 67
    18b0:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__gesf2>
    18b4:	18 16       	cp	r1, r24
    18b6:	54 f0       	brlt	.+20     	; 0x18cc <calcPID+0x630>
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	48 ec       	ldi	r20, 0xC8	; 200
    18be:	53 ec       	ldi	r21, 0xC3	; 195
    18c0:	c5 01       	movw	r24, r10
    18c2:	b4 01       	movw	r22, r8
    18c4:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__cmpsf2>
    18c8:	88 23       	and	r24, r24
    18ca:	8c f4       	brge	.+34     	; 0x18ee <calcPID+0x652>
    18cc:	a5 01       	movw	r20, r10
    18ce:	94 01       	movw	r18, r8
    18d0:	c7 01       	movw	r24, r14
    18d2:	b6 01       	movw	r22, r12
    18d4:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	a9 01       	movw	r20, r18
    18de:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__gesf2>
    18e2:	18 16       	cp	r1, r24
    18e4:	24 f4       	brge	.+8      	; 0x18ee <calcPID+0x652>
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <yawClamp>
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <calcPID+0x656>
	else yawClamp = 0;
    18ee:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <yawClamp>
	if (yawControl > controlMax) yawControl = controlMax;
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	48 ec       	ldi	r20, 0xC8	; 200
    18f8:	53 e4       	ldi	r21, 0x43	; 67
    18fa:	c5 01       	movw	r24, r10
    18fc:	b4 01       	movw	r22, r8
    18fe:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <__gesf2>
    1902:	18 16       	cp	r1, r24
    1904:	64 f4       	brge	.+24     	; 0x191e <calcPID+0x682>
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	a8 ec       	ldi	r26, 0xC8	; 200
    190c:	b3 e4       	ldi	r27, 0x43	; 67
    190e:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <yawControl>
    1912:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <yawControl+0x1>
    1916:	a0 93 7f 01 	sts	0x017F, r26	; 0x80017f <yawControl+0x2>
    191a:	b0 93 80 01 	sts	0x0180, r27	; 0x800180 <yawControl+0x3>
	if (yawControl < -controlMax) yawControl = -controlMax;
    191e:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <yawControl>
    1922:	70 91 7e 01 	lds	r23, 0x017E	; 0x80017e <yawControl+0x1>
    1926:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <yawControl+0x2>
    192a:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <yawControl+0x3>
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	48 ec       	ldi	r20, 0xC8	; 200
    1934:	53 ec       	ldi	r21, 0xC3	; 195
    1936:	0e 94 74 10 	call	0x20e8	; 0x20e8 <__cmpsf2>
    193a:	88 23       	and	r24, r24
    193c:	64 f4       	brge	.+24     	; 0x1956 <calcPID+0x6ba>
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	a8 ec       	ldi	r26, 0xC8	; 200
    1944:	b3 ec       	ldi	r27, 0xC3	; 195
    1946:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <yawControl>
    194a:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <yawControl+0x1>
    194e:	a0 93 7f 01 	sts	0x017F, r26	; 0x80017f <yawControl+0x2>
    1952:	b0 93 80 01 	sts	0x0180, r27	; 0x800180 <yawControl+0x3>
	yawRateLastErr = error;
    1956:	c0 92 8d 01 	sts	0x018D, r12	; 0x80018d <yawRateLastErr>
    195a:	d0 92 8e 01 	sts	0x018E, r13	; 0x80018e <yawRateLastErr+0x1>
    195e:	e0 92 8f 01 	sts	0x018F, r14	; 0x80018f <yawRateLastErr+0x2>
    1962:	f0 92 90 01 	sts	0x0190, r15	; 0x800190 <yawRateLastErr+0x3>
	
	throttleControl = recThrottle;
    1966:	60 91 99 01 	lds	r22, 0x0199	; 0x800199 <recThrottle>
    196a:	70 91 9a 01 	lds	r23, 0x019A	; 0x80019a <recThrottle+0x1>
    196e:	07 2e       	mov	r0, r23
    1970:	00 0c       	add	r0, r0
    1972:	88 0b       	sbc	r24, r24
    1974:	99 0b       	sbc	r25, r25
    1976:	0e 94 23 11 	call	0x2246	; 0x2246 <__floatsisf>
    197a:	60 93 b7 01 	sts	0x01B7, r22	; 0x8001b7 <throttleControl>
    197e:	70 93 b8 01 	sts	0x01B8, r23	; 0x8001b8 <throttleControl+0x1>
    1982:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <throttleControl+0x2>
    1986:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <throttleControl+0x3>
    198a:	ff 90       	pop	r15
    198c:	ef 90       	pop	r14
    198e:	df 90       	pop	r13
    1990:	cf 90       	pop	r12
    1992:	bf 90       	pop	r11
    1994:	af 90       	pop	r10
    1996:	9f 90       	pop	r9
    1998:	8f 90       	pop	r8
    199a:	08 95       	ret

0000199c <__vector_3>:

int recRoll, recPitch, recThrottle, recYaw;
float rollSetp, pitchSetp, yawSetp;

ISR (PCINT0_vect)
{
    199c:	1f 92       	push	r1
    199e:	0f 92       	push	r0
    19a0:	0f b6       	in	r0, 0x3f	; 63
    19a2:	0f 92       	push	r0
    19a4:	11 24       	eor	r1, r1
    19a6:	2f 93       	push	r18
    19a8:	3f 93       	push	r19
    19aa:	4f 93       	push	r20
    19ac:	5f 93       	push	r21
    19ae:	6f 93       	push	r22
    19b0:	7f 93       	push	r23
    19b2:	8f 93       	push	r24
    19b4:	9f 93       	push	r25
    19b6:	af 93       	push	r26
    19b8:	bf 93       	push	r27
    19ba:	ef 93       	push	r30
    19bc:	ff 93       	push	r31
	recCurrTime = currentTime();
    19be:	0e 94 0a 01 	call	0x214	; 0x214 <currentTime>
    19c2:	60 93 e5 01 	sts	0x01E5, r22	; 0x8001e5 <recCurrTime>
    19c6:	70 93 e6 01 	sts	0x01E6, r23	; 0x8001e6 <recCurrTime+0x1>
    19ca:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <recCurrTime+0x2>
    19ce:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <recCurrTime+0x3>
	
	if (PINB & 0b00000001)
    19d2:	18 9b       	sbis	0x03, 0	; 3
    19d4:	18 c0       	rjmp	.+48     	; 0x1a06 <__vector_3+0x6a>
	{
		if (stCh[0] == 0)
    19d6:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <stCh>
    19da:	81 11       	cpse	r24, r1
    19dc:	30 c0       	rjmp	.+96     	; 0x1a3e <__vector_3+0xa2>
		{
			stCh[0] = 1;
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <stCh>
			timeCounterCh[0] = recCurrTime;
    19e4:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <recCurrTime>
    19e8:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <recCurrTime+0x1>
    19ec:	a0 91 e7 01 	lds	r26, 0x01E7	; 0x8001e7 <recCurrTime+0x2>
    19f0:	b0 91 e8 01 	lds	r27, 0x01E8	; 0x8001e8 <recCurrTime+0x3>
    19f4:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <timeCounterCh>
    19f8:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <timeCounterCh+0x1>
    19fc:	a0 93 c1 01 	sts	0x01C1, r26	; 0x8001c1 <timeCounterCh+0x2>
    1a00:	b0 93 c2 01 	sts	0x01C2, r27	; 0x8001c2 <timeCounterCh+0x3>
    1a04:	1c c0       	rjmp	.+56     	; 0x1a3e <__vector_3+0xa2>
		}
	} else if (stCh[0] == 1)
    1a06:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <stCh>
    1a0a:	81 30       	cpi	r24, 0x01	; 1
    1a0c:	c1 f4       	brne	.+48     	; 0x1a3e <__vector_3+0xa2>
	{
		stCh[0] = 0;
    1a0e:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <stCh>
		recInCh[0] = recCurrTime - timeCounterCh[0];
    1a12:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <recCurrTime>
    1a16:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <recCurrTime+0x1>
    1a1a:	a0 91 e7 01 	lds	r26, 0x01E7	; 0x8001e7 <recCurrTime+0x2>
    1a1e:	b0 91 e8 01 	lds	r27, 0x01E8	; 0x8001e8 <recCurrTime+0x3>
    1a22:	40 91 bf 01 	lds	r20, 0x01BF	; 0x8001bf <timeCounterCh>
    1a26:	50 91 c0 01 	lds	r21, 0x01C0	; 0x8001c0 <timeCounterCh+0x1>
    1a2a:	60 91 c1 01 	lds	r22, 0x01C1	; 0x8001c1 <timeCounterCh+0x2>
    1a2e:	70 91 c2 01 	lds	r23, 0x01C2	; 0x8001c2 <timeCounterCh+0x3>
    1a32:	84 1b       	sub	r24, r20
    1a34:	95 0b       	sbc	r25, r21
    1a36:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <recInCh+0x1>
    1a3a:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <recInCh>
	}
	
	if (PINB & 0b00000010)
    1a3e:	19 9b       	sbis	0x03, 1	; 3
    1a40:	18 c0       	rjmp	.+48     	; 0x1a72 <__vector_3+0xd6>
	{
		if (stCh[1] == 0)
    1a42:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <stCh+0x1>
    1a46:	81 11       	cpse	r24, r1
    1a48:	30 c0       	rjmp	.+96     	; 0x1aaa <__vector_3+0x10e>
		{
			stCh[1] = 1;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <stCh+0x1>
			timeCounterCh[1] = recCurrTime;
    1a50:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <recCurrTime>
    1a54:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <recCurrTime+0x1>
    1a58:	a0 91 e7 01 	lds	r26, 0x01E7	; 0x8001e7 <recCurrTime+0x2>
    1a5c:	b0 91 e8 01 	lds	r27, 0x01E8	; 0x8001e8 <recCurrTime+0x3>
    1a60:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <timeCounterCh+0x4>
    1a64:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <timeCounterCh+0x5>
    1a68:	a0 93 c5 01 	sts	0x01C5, r26	; 0x8001c5 <timeCounterCh+0x6>
    1a6c:	b0 93 c6 01 	sts	0x01C6, r27	; 0x8001c6 <timeCounterCh+0x7>
    1a70:	1c c0       	rjmp	.+56     	; 0x1aaa <__vector_3+0x10e>
		}
	} else if (stCh[1] == 1)
    1a72:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <stCh+0x1>
    1a76:	81 30       	cpi	r24, 0x01	; 1
    1a78:	c1 f4       	brne	.+48     	; 0x1aaa <__vector_3+0x10e>
	{
		stCh[1] = 0;
    1a7a:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <stCh+0x1>
		recInCh[1] = recCurrTime - timeCounterCh[1];
    1a7e:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <recCurrTime>
    1a82:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <recCurrTime+0x1>
    1a86:	a0 91 e7 01 	lds	r26, 0x01E7	; 0x8001e7 <recCurrTime+0x2>
    1a8a:	b0 91 e8 01 	lds	r27, 0x01E8	; 0x8001e8 <recCurrTime+0x3>
    1a8e:	40 91 c3 01 	lds	r20, 0x01C3	; 0x8001c3 <timeCounterCh+0x4>
    1a92:	50 91 c4 01 	lds	r21, 0x01C4	; 0x8001c4 <timeCounterCh+0x5>
    1a96:	60 91 c5 01 	lds	r22, 0x01C5	; 0x8001c5 <timeCounterCh+0x6>
    1a9a:	70 91 c6 01 	lds	r23, 0x01C6	; 0x8001c6 <timeCounterCh+0x7>
    1a9e:	84 1b       	sub	r24, r20
    1aa0:	95 0b       	sbc	r25, r21
    1aa2:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <recInCh+0x3>
    1aa6:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <recInCh+0x2>
	}
	
	if (PINB & 0b00000100)
    1aaa:	1a 9b       	sbis	0x03, 2	; 3
    1aac:	18 c0       	rjmp	.+48     	; 0x1ade <__vector_3+0x142>
	{
		if (stCh[2] == 0)
    1aae:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <stCh+0x2>
    1ab2:	81 11       	cpse	r24, r1
    1ab4:	30 c0       	rjmp	.+96     	; 0x1b16 <__vector_3+0x17a>
		{
			stCh[2] = 1;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <stCh+0x2>
			timeCounterCh[2] = recCurrTime;
    1abc:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <recCurrTime>
    1ac0:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <recCurrTime+0x1>
    1ac4:	a0 91 e7 01 	lds	r26, 0x01E7	; 0x8001e7 <recCurrTime+0x2>
    1ac8:	b0 91 e8 01 	lds	r27, 0x01E8	; 0x8001e8 <recCurrTime+0x3>
    1acc:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <timeCounterCh+0x8>
    1ad0:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <timeCounterCh+0x9>
    1ad4:	a0 93 c9 01 	sts	0x01C9, r26	; 0x8001c9 <timeCounterCh+0xa>
    1ad8:	b0 93 ca 01 	sts	0x01CA, r27	; 0x8001ca <timeCounterCh+0xb>
    1adc:	1c c0       	rjmp	.+56     	; 0x1b16 <__vector_3+0x17a>
		}
	} else if (stCh[2] == 1)
    1ade:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <stCh+0x2>
    1ae2:	81 30       	cpi	r24, 0x01	; 1
    1ae4:	c1 f4       	brne	.+48     	; 0x1b16 <__vector_3+0x17a>
	{
		stCh[2] = 0;
    1ae6:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <stCh+0x2>
		recInCh[2] = recCurrTime - timeCounterCh[2];
    1aea:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <recCurrTime>
    1aee:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <recCurrTime+0x1>
    1af2:	a0 91 e7 01 	lds	r26, 0x01E7	; 0x8001e7 <recCurrTime+0x2>
    1af6:	b0 91 e8 01 	lds	r27, 0x01E8	; 0x8001e8 <recCurrTime+0x3>
    1afa:	40 91 c7 01 	lds	r20, 0x01C7	; 0x8001c7 <timeCounterCh+0x8>
    1afe:	50 91 c8 01 	lds	r21, 0x01C8	; 0x8001c8 <timeCounterCh+0x9>
    1b02:	60 91 c9 01 	lds	r22, 0x01C9	; 0x8001c9 <timeCounterCh+0xa>
    1b06:	70 91 ca 01 	lds	r23, 0x01CA	; 0x8001ca <timeCounterCh+0xb>
    1b0a:	84 1b       	sub	r24, r20
    1b0c:	95 0b       	sbc	r25, r21
    1b0e:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <recInCh+0x5>
    1b12:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <recInCh+0x4>
	}
	
	if (PINB & 0b00001000)
    1b16:	1b 9b       	sbis	0x03, 3	; 3
    1b18:	18 c0       	rjmp	.+48     	; 0x1b4a <__vector_3+0x1ae>
	{
		if (stCh[3] == 0)
    1b1a:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <stCh+0x3>
    1b1e:	81 11       	cpse	r24, r1
    1b20:	30 c0       	rjmp	.+96     	; 0x1b82 <__vector_3+0x1e6>
		{
			stCh[3] = 1;
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <stCh+0x3>
			timeCounterCh[3] = recCurrTime;
    1b28:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <recCurrTime>
    1b2c:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <recCurrTime+0x1>
    1b30:	a0 91 e7 01 	lds	r26, 0x01E7	; 0x8001e7 <recCurrTime+0x2>
    1b34:	b0 91 e8 01 	lds	r27, 0x01E8	; 0x8001e8 <recCurrTime+0x3>
    1b38:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <timeCounterCh+0xc>
    1b3c:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <timeCounterCh+0xd>
    1b40:	a0 93 cd 01 	sts	0x01CD, r26	; 0x8001cd <timeCounterCh+0xe>
    1b44:	b0 93 ce 01 	sts	0x01CE, r27	; 0x8001ce <timeCounterCh+0xf>
    1b48:	1c c0       	rjmp	.+56     	; 0x1b82 <__vector_3+0x1e6>
		}
	} else if (stCh[3] == 1)
    1b4a:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <stCh+0x3>
    1b4e:	81 30       	cpi	r24, 0x01	; 1
    1b50:	c1 f4       	brne	.+48     	; 0x1b82 <__vector_3+0x1e6>
	{
		stCh[3] = 0;
    1b52:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <stCh+0x3>
		recInCh[3] = recCurrTime - timeCounterCh[3];
    1b56:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <recCurrTime>
    1b5a:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <recCurrTime+0x1>
    1b5e:	a0 91 e7 01 	lds	r26, 0x01E7	; 0x8001e7 <recCurrTime+0x2>
    1b62:	b0 91 e8 01 	lds	r27, 0x01E8	; 0x8001e8 <recCurrTime+0x3>
    1b66:	40 91 cb 01 	lds	r20, 0x01CB	; 0x8001cb <timeCounterCh+0xc>
    1b6a:	50 91 cc 01 	lds	r21, 0x01CC	; 0x8001cc <timeCounterCh+0xd>
    1b6e:	60 91 cd 01 	lds	r22, 0x01CD	; 0x8001cd <timeCounterCh+0xe>
    1b72:	70 91 ce 01 	lds	r23, 0x01CE	; 0x8001ce <timeCounterCh+0xf>
    1b76:	84 1b       	sub	r24, r20
    1b78:	95 0b       	sbc	r25, r21
    1b7a:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <recInCh+0x7>
    1b7e:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <recInCh+0x6>
	}
}
    1b82:	ff 91       	pop	r31
    1b84:	ef 91       	pop	r30
    1b86:	bf 91       	pop	r27
    1b88:	af 91       	pop	r26
    1b8a:	9f 91       	pop	r25
    1b8c:	8f 91       	pop	r24
    1b8e:	7f 91       	pop	r23
    1b90:	6f 91       	pop	r22
    1b92:	5f 91       	pop	r21
    1b94:	4f 91       	pop	r20
    1b96:	3f 91       	pop	r19
    1b98:	2f 91       	pop	r18
    1b9a:	0f 90       	pop	r0
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	0f 90       	pop	r0
    1ba0:	1f 90       	pop	r1
    1ba2:	18 95       	reti

00001ba4 <__vector_5>:

ISR (PCINT2_vect)
{
    1ba4:	1f 92       	push	r1
    1ba6:	0f 92       	push	r0
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	0f 92       	push	r0
    1bac:	11 24       	eor	r1, r1
    1bae:	2f 93       	push	r18
    1bb0:	3f 93       	push	r19
    1bb2:	4f 93       	push	r20
    1bb4:	5f 93       	push	r21
    1bb6:	6f 93       	push	r22
    1bb8:	7f 93       	push	r23
    1bba:	8f 93       	push	r24
    1bbc:	9f 93       	push	r25
    1bbe:	af 93       	push	r26
    1bc0:	bf 93       	push	r27
    1bc2:	ef 93       	push	r30
    1bc4:	ff 93       	push	r31
	recCurrTime = currentTime();
    1bc6:	0e 94 0a 01 	call	0x214	; 0x214 <currentTime>
    1bca:	60 93 e5 01 	sts	0x01E5, r22	; 0x8001e5 <recCurrTime>
    1bce:	70 93 e6 01 	sts	0x01E6, r23	; 0x8001e6 <recCurrTime+0x1>
    1bd2:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <recCurrTime+0x2>
    1bd6:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <recCurrTime+0x3>
	
	if (PIND & 0b00000100)
    1bda:	4a 9b       	sbis	0x09, 2	; 9
    1bdc:	18 c0       	rjmp	.+48     	; 0x1c0e <__vector_5+0x6a>
	{
		if (stCh[4] == 0)
    1bde:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <stCh+0x4>
    1be2:	81 11       	cpse	r24, r1
    1be4:	30 c0       	rjmp	.+96     	; 0x1c46 <__vector_5+0xa2>
		{
			stCh[4] = 1;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <stCh+0x4>
			timeCounterCh[4] = recCurrTime;
    1bec:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <recCurrTime>
    1bf0:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <recCurrTime+0x1>
    1bf4:	a0 91 e7 01 	lds	r26, 0x01E7	; 0x8001e7 <recCurrTime+0x2>
    1bf8:	b0 91 e8 01 	lds	r27, 0x01E8	; 0x8001e8 <recCurrTime+0x3>
    1bfc:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <timeCounterCh+0x10>
    1c00:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <timeCounterCh+0x11>
    1c04:	a0 93 d1 01 	sts	0x01D1, r26	; 0x8001d1 <timeCounterCh+0x12>
    1c08:	b0 93 d2 01 	sts	0x01D2, r27	; 0x8001d2 <timeCounterCh+0x13>
    1c0c:	1c c0       	rjmp	.+56     	; 0x1c46 <__vector_5+0xa2>
		}
	} else if (stCh[4] == 1)
    1c0e:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <stCh+0x4>
    1c12:	81 30       	cpi	r24, 0x01	; 1
    1c14:	c1 f4       	brne	.+48     	; 0x1c46 <__vector_5+0xa2>
	{
		stCh[4] = 0;
    1c16:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <stCh+0x4>
		recInCh[4] = recCurrTime - timeCounterCh[4];
    1c1a:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <recCurrTime>
    1c1e:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <recCurrTime+0x1>
    1c22:	a0 91 e7 01 	lds	r26, 0x01E7	; 0x8001e7 <recCurrTime+0x2>
    1c26:	b0 91 e8 01 	lds	r27, 0x01E8	; 0x8001e8 <recCurrTime+0x3>
    1c2a:	40 91 cf 01 	lds	r20, 0x01CF	; 0x8001cf <timeCounterCh+0x10>
    1c2e:	50 91 d0 01 	lds	r21, 0x01D0	; 0x8001d0 <timeCounterCh+0x11>
    1c32:	60 91 d1 01 	lds	r22, 0x01D1	; 0x8001d1 <timeCounterCh+0x12>
    1c36:	70 91 d2 01 	lds	r23, 0x01D2	; 0x8001d2 <timeCounterCh+0x13>
    1c3a:	84 1b       	sub	r24, r20
    1c3c:	95 0b       	sbc	r25, r21
    1c3e:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <recInCh+0x9>
    1c42:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <recInCh+0x8>
	}
	
	if (PIND & 0b00001000)
    1c46:	4b 9b       	sbis	0x09, 3	; 9
    1c48:	18 c0       	rjmp	.+48     	; 0x1c7a <__vector_5+0xd6>
	{
		if (stCh[5] == 0)
    1c4a:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <stCh+0x5>
    1c4e:	81 11       	cpse	r24, r1
    1c50:	30 c0       	rjmp	.+96     	; 0x1cb2 <__vector_5+0x10e>
		{
			stCh[5] = 1;
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <stCh+0x5>
			timeCounterCh[5] = recCurrTime;
    1c58:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <recCurrTime>
    1c5c:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <recCurrTime+0x1>
    1c60:	a0 91 e7 01 	lds	r26, 0x01E7	; 0x8001e7 <recCurrTime+0x2>
    1c64:	b0 91 e8 01 	lds	r27, 0x01E8	; 0x8001e8 <recCurrTime+0x3>
    1c68:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <timeCounterCh+0x14>
    1c6c:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <timeCounterCh+0x15>
    1c70:	a0 93 d5 01 	sts	0x01D5, r26	; 0x8001d5 <timeCounterCh+0x16>
    1c74:	b0 93 d6 01 	sts	0x01D6, r27	; 0x8001d6 <timeCounterCh+0x17>
    1c78:	1c c0       	rjmp	.+56     	; 0x1cb2 <__vector_5+0x10e>
		}
	} else if (stCh[5] == 1)
    1c7a:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <stCh+0x5>
    1c7e:	81 30       	cpi	r24, 0x01	; 1
    1c80:	c1 f4       	brne	.+48     	; 0x1cb2 <__vector_5+0x10e>
	{
		stCh[5] = 0;
    1c82:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <stCh+0x5>
		recInCh[5] = recCurrTime - timeCounterCh[5];
    1c86:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <recCurrTime>
    1c8a:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <recCurrTime+0x1>
    1c8e:	a0 91 e7 01 	lds	r26, 0x01E7	; 0x8001e7 <recCurrTime+0x2>
    1c92:	b0 91 e8 01 	lds	r27, 0x01E8	; 0x8001e8 <recCurrTime+0x3>
    1c96:	40 91 d3 01 	lds	r20, 0x01D3	; 0x8001d3 <timeCounterCh+0x14>
    1c9a:	50 91 d4 01 	lds	r21, 0x01D4	; 0x8001d4 <timeCounterCh+0x15>
    1c9e:	60 91 d5 01 	lds	r22, 0x01D5	; 0x8001d5 <timeCounterCh+0x16>
    1ca2:	70 91 d6 01 	lds	r23, 0x01D6	; 0x8001d6 <timeCounterCh+0x17>
    1ca6:	84 1b       	sub	r24, r20
    1ca8:	95 0b       	sbc	r25, r21
    1caa:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <recInCh+0xb>
    1cae:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <recInCh+0xa>
	}
}
    1cb2:	ff 91       	pop	r31
    1cb4:	ef 91       	pop	r30
    1cb6:	bf 91       	pop	r27
    1cb8:	af 91       	pop	r26
    1cba:	9f 91       	pop	r25
    1cbc:	8f 91       	pop	r24
    1cbe:	7f 91       	pop	r23
    1cc0:	6f 91       	pop	r22
    1cc2:	5f 91       	pop	r21
    1cc4:	4f 91       	pop	r20
    1cc6:	3f 91       	pop	r19
    1cc8:	2f 91       	pop	r18
    1cca:	0f 90       	pop	r0
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	0f 90       	pop	r0
    1cd0:	1f 90       	pop	r1
    1cd2:	18 95       	reti

00001cd4 <readRec>:

void readRec()
{
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
	recRoll = recRollCorr + pwmMin + (recInCh[0] - 1000.0) * (pwmMax - pwmMin) / (2000.0 - 1000.0);
    1cd8:	c9 ed       	ldi	r28, 0xD9	; 217
    1cda:	d1 e0       	ldi	r29, 0x01	; 1
    1cdc:	68 81       	ld	r22, Y
    1cde:	79 81       	ldd	r23, Y+1	; 0x01
    1ce0:	07 2e       	mov	r0, r23
    1ce2:	00 0c       	add	r0, r0
    1ce4:	88 0b       	sbc	r24, r24
    1ce6:	99 0b       	sbc	r25, r25
    1ce8:	0e 94 23 11 	call	0x2246	; 0x2246 <__floatsisf>
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	4a e7       	ldi	r20, 0x7A	; 122
    1cf2:	54 e4       	ldi	r21, 0x44	; 68
    1cf4:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	4a e7       	ldi	r20, 0x7A	; 122
    1cfe:	54 e4       	ldi	r21, 0x44	; 68
    1d00:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	4a e7       	ldi	r20, 0x7A	; 122
    1d0a:	54 e4       	ldi	r21, 0x44	; 68
    1d0c:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__divsf3>
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	4a e7       	ldi	r20, 0x7A	; 122
    1d16:	54 e4       	ldi	r21, 0x44	; 68
    1d18:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
    1d1c:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__fixsfsi>
    1d20:	70 93 bc 01 	sts	0x01BC, r23	; 0x8001bc <recRoll+0x1>
    1d24:	60 93 bb 01 	sts	0x01BB, r22	; 0x8001bb <recRoll>
	recPitch = recPitchCorr + pwmMin + (recInCh[1] - 1000.0) * (pwmMax - pwmMin) / (2000.0 - 1000.0);
    1d28:	6a 81       	ldd	r22, Y+2	; 0x02
    1d2a:	7b 81       	ldd	r23, Y+3	; 0x03
    1d2c:	07 2e       	mov	r0, r23
    1d2e:	00 0c       	add	r0, r0
    1d30:	88 0b       	sbc	r24, r24
    1d32:	99 0b       	sbc	r25, r25
    1d34:	0e 94 23 11 	call	0x2246	; 0x2246 <__floatsisf>
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	4a e7       	ldi	r20, 0x7A	; 122
    1d3e:	54 e4       	ldi	r21, 0x44	; 68
    1d40:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	4a e7       	ldi	r20, 0x7A	; 122
    1d4a:	54 e4       	ldi	r21, 0x44	; 68
    1d4c:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	4a e7       	ldi	r20, 0x7A	; 122
    1d56:	54 e4       	ldi	r21, 0x44	; 68
    1d58:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__divsf3>
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	4a e7       	ldi	r20, 0x7A	; 122
    1d62:	54 e4       	ldi	r21, 0x44	; 68
    1d64:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
    1d68:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__fixsfsi>
    1d6c:	70 93 be 01 	sts	0x01BE, r23	; 0x8001be <recPitch+0x1>
    1d70:	60 93 bd 01 	sts	0x01BD, r22	; 0x8001bd <recPitch>
	recThrottle = recThrottleCorr + pwmMin + (recInCh[2] - 1000.0) * (pwmMax - pwmMin) / (2000.0 - 1000.0);
    1d74:	6c 81       	ldd	r22, Y+4	; 0x04
    1d76:	7d 81       	ldd	r23, Y+5	; 0x05
    1d78:	07 2e       	mov	r0, r23
    1d7a:	00 0c       	add	r0, r0
    1d7c:	88 0b       	sbc	r24, r24
    1d7e:	99 0b       	sbc	r25, r25
    1d80:	0e 94 23 11 	call	0x2246	; 0x2246 <__floatsisf>
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	4a e7       	ldi	r20, 0x7A	; 122
    1d8a:	54 e4       	ldi	r21, 0x44	; 68
    1d8c:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	4a e7       	ldi	r20, 0x7A	; 122
    1d96:	54 e4       	ldi	r21, 0x44	; 68
    1d98:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	4a e7       	ldi	r20, 0x7A	; 122
    1da2:	54 e4       	ldi	r21, 0x44	; 68
    1da4:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__divsf3>
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	4a e7       	ldi	r20, 0x7A	; 122
    1dae:	54 e4       	ldi	r21, 0x44	; 68
    1db0:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
    1db4:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__fixsfsi>
    1db8:	70 93 9a 01 	sts	0x019A, r23	; 0x80019a <recThrottle+0x1>
    1dbc:	60 93 99 01 	sts	0x0199, r22	; 0x800199 <recThrottle>
	recYaw = recYawCorr + pwmMin + (recInCh[3] - 1000.0) * (pwmMax - pwmMin) / (2000.0 - 1000.0);
    1dc0:	6e 81       	ldd	r22, Y+6	; 0x06
    1dc2:	7f 81       	ldd	r23, Y+7	; 0x07
    1dc4:	07 2e       	mov	r0, r23
    1dc6:	00 0c       	add	r0, r0
    1dc8:	88 0b       	sbc	r24, r24
    1dca:	99 0b       	sbc	r25, r25
    1dcc:	0e 94 23 11 	call	0x2246	; 0x2246 <__floatsisf>
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	4a e7       	ldi	r20, 0x7A	; 122
    1dd6:	54 e4       	ldi	r21, 0x44	; 68
    1dd8:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	4a e7       	ldi	r20, 0x7A	; 122
    1de2:	54 e4       	ldi	r21, 0x44	; 68
    1de4:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	4a e7       	ldi	r20, 0x7A	; 122
    1dee:	54 e4       	ldi	r21, 0x44	; 68
    1df0:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__divsf3>
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e4       	ldi	r19, 0x40	; 64
    1df8:	4c e7       	ldi	r20, 0x7C	; 124
    1dfa:	54 e4       	ldi	r21, 0x44	; 68
    1dfc:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
    1e00:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__fixsfsi>
    1e04:	70 93 d8 01 	sts	0x01D8, r23	; 0x8001d8 <recYaw+0x1>
    1e08:	60 93 d7 01 	sts	0x01D7, r22	; 0x8001d7 <recYaw>
}
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	08 95       	ret

00001e12 <calcSetps>:

void calcSetps()
{
	rollSetp = 0;
    1e12:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <rollSetp>
    1e16:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <rollSetp+0x1>
    1e1a:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <rollSetp+0x2>
    1e1e:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <rollSetp+0x3>
	if (recRoll < 1490 || recRoll > 1510)
    1e22:	60 91 bb 01 	lds	r22, 0x01BB	; 0x8001bb <recRoll>
    1e26:	70 91 bc 01 	lds	r23, 0x01BC	; 0x8001bc <recRoll+0x1>
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	82 5d       	subi	r24, 0xD2	; 210
    1e2e:	95 40       	sbci	r25, 0x05	; 5
    1e30:	45 97       	sbiw	r24, 0x15	; 21
    1e32:	30 f1       	brcs	.+76     	; 0x1e80 <calcSetps+0x6e>
	{
		rollSetp = setpAngleMin + (recRoll - 1000.0) * (setpAngleMax - setpAngleMin) / (2000.0 - 1000.0);
    1e34:	07 2e       	mov	r0, r23
    1e36:	00 0c       	add	r0, r0
    1e38:	88 0b       	sbc	r24, r24
    1e3a:	99 0b       	sbc	r25, r25
    1e3c:	0e 94 23 11 	call	0x2246	; 0x2246 <__floatsisf>
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	4a e7       	ldi	r20, 0x7A	; 122
    1e46:	54 e4       	ldi	r21, 0x44	; 68
    1e48:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	40 ea       	ldi	r20, 0xA0	; 160
    1e52:	52 e4       	ldi	r21, 0x42	; 66
    1e54:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	4a e7       	ldi	r20, 0x7A	; 122
    1e5e:	54 e4       	ldi	r21, 0x44	; 68
    1e60:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__divsf3>
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e2       	ldi	r20, 0x20	; 32
    1e6a:	52 e4       	ldi	r21, 0x42	; 66
    1e6c:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
    1e70:	60 93 85 01 	sts	0x0185, r22	; 0x800185 <rollSetp>
    1e74:	70 93 86 01 	sts	0x0186, r23	; 0x800186 <rollSetp+0x1>
    1e78:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <rollSetp+0x2>
    1e7c:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <rollSetp+0x3>
	}
	
	pitchSetp = 0;
    1e80:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <pitchSetp>
    1e84:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <pitchSetp+0x1>
    1e88:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <pitchSetp+0x2>
    1e8c:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <pitchSetp+0x3>
	if (recPitch < 1490 || recPitch > 1510)
    1e90:	60 91 bd 01 	lds	r22, 0x01BD	; 0x8001bd <recPitch>
    1e94:	70 91 be 01 	lds	r23, 0x01BE	; 0x8001be <recPitch+0x1>
    1e98:	cb 01       	movw	r24, r22
    1e9a:	82 5d       	subi	r24, 0xD2	; 210
    1e9c:	95 40       	sbci	r25, 0x05	; 5
    1e9e:	45 97       	sbiw	r24, 0x15	; 21
    1ea0:	30 f1       	brcs	.+76     	; 0x1eee <calcSetps+0xdc>
	{
		pitchSetp = setpAngleMin + (recPitch - 1000.0) * (setpAngleMax - setpAngleMin) / (2000.0 - 1000.0);
    1ea2:	07 2e       	mov	r0, r23
    1ea4:	00 0c       	add	r0, r0
    1ea6:	88 0b       	sbc	r24, r24
    1ea8:	99 0b       	sbc	r25, r25
    1eaa:	0e 94 23 11 	call	0x2246	; 0x2246 <__floatsisf>
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	4a e7       	ldi	r20, 0x7A	; 122
    1eb4:	54 e4       	ldi	r21, 0x44	; 68
    1eb6:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	40 ea       	ldi	r20, 0xA0	; 160
    1ec0:	52 e4       	ldi	r21, 0x42	; 66
    1ec2:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	4a e7       	ldi	r20, 0x7A	; 122
    1ecc:	54 e4       	ldi	r21, 0x44	; 68
    1ece:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__divsf3>
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	40 e2       	ldi	r20, 0x20	; 32
    1ed8:	52 e4       	ldi	r21, 0x42	; 66
    1eda:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
    1ede:	60 93 95 01 	sts	0x0195, r22	; 0x800195 <pitchSetp>
    1ee2:	70 93 96 01 	sts	0x0196, r23	; 0x800196 <pitchSetp+0x1>
    1ee6:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <pitchSetp+0x2>
    1eea:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <pitchSetp+0x3>
	}
	
	yawSetp = 0;
    1eee:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <yawSetp>
    1ef2:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <yawSetp+0x1>
    1ef6:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <yawSetp+0x2>
    1efa:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <yawSetp+0x3>
	if ((recYaw < 1490 || recYaw > 1510) && recThrottle > 1050)
    1efe:	60 91 d7 01 	lds	r22, 0x01D7	; 0x8001d7 <recYaw>
    1f02:	70 91 d8 01 	lds	r23, 0x01D8	; 0x8001d8 <recYaw+0x1>
    1f06:	cb 01       	movw	r24, r22
    1f08:	82 5d       	subi	r24, 0xD2	; 210
    1f0a:	95 40       	sbci	r25, 0x05	; 5
    1f0c:	45 97       	sbiw	r24, 0x15	; 21
    1f0e:	68 f1       	brcs	.+90     	; 0x1f6a <calcSetps+0x158>
    1f10:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <recThrottle>
    1f14:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <recThrottle+0x1>
    1f18:	8b 31       	cpi	r24, 0x1B	; 27
    1f1a:	94 40       	sbci	r25, 0x04	; 4
    1f1c:	34 f1       	brlt	.+76     	; 0x1f6a <calcSetps+0x158>
	{
		yawSetp = setpAngleMax + (recYaw - 1000.0) * (setpAngleMin - setpAngleMax) / (2000.0 - 1000.0);
    1f1e:	07 2e       	mov	r0, r23
    1f20:	00 0c       	add	r0, r0
    1f22:	88 0b       	sbc	r24, r24
    1f24:	99 0b       	sbc	r25, r25
    1f26:	0e 94 23 11 	call	0x2246	; 0x2246 <__floatsisf>
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	4a e7       	ldi	r20, 0x7A	; 122
    1f30:	54 e4       	ldi	r21, 0x44	; 68
    1f32:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__subsf3>
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 ea       	ldi	r20, 0xA0	; 160
    1f3c:	52 ec       	ldi	r21, 0xC2	; 194
    1f3e:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	4a e7       	ldi	r20, 0x7A	; 122
    1f48:	54 e4       	ldi	r21, 0x44	; 68
    1f4a:	0e 94 79 10 	call	0x20f2	; 0x20f2 <__divsf3>
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	40 e2       	ldi	r20, 0x20	; 32
    1f54:	52 e4       	ldi	r21, 0x42	; 66
    1f56:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
    1f5a:	60 93 91 01 	sts	0x0191, r22	; 0x800191 <yawSetp>
    1f5e:	70 93 92 01 	sts	0x0192, r23	; 0x800192 <yawSetp+0x1>
    1f62:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <yawSetp+0x2>
    1f66:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <yawSetp+0x3>
    1f6a:	08 95       	ret

00001f6c <initRec>:
	}
}

void initRec()
{
	SREG |= (1<<7);
    1f6c:	8f b7       	in	r24, 0x3f	; 63
    1f6e:	80 68       	ori	r24, 0x80	; 128
    1f70:	8f bf       	out	0x3f, r24	; 63
	
	PCICR |= (1<<PCIE0);
    1f72:	a8 e6       	ldi	r26, 0x68	; 104
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	8c 91       	ld	r24, X
    1f78:	81 60       	ori	r24, 0x01	; 1
    1f7a:	8c 93       	st	X, r24
	PCMSK0 |= (1<<PCINT0);
    1f7c:	eb e6       	ldi	r30, 0x6B	; 107
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	81 60       	ori	r24, 0x01	; 1
    1f84:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT1);
    1f86:	80 81       	ld	r24, Z
    1f88:	82 60       	ori	r24, 0x02	; 2
    1f8a:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT2);
    1f8c:	80 81       	ld	r24, Z
    1f8e:	84 60       	ori	r24, 0x04	; 4
    1f90:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT3);
    1f92:	80 81       	ld	r24, Z
    1f94:	88 60       	ori	r24, 0x08	; 8
    1f96:	80 83       	st	Z, r24
	
	PCICR |= (1<<PCIE2);
    1f98:	8c 91       	ld	r24, X
    1f9a:	84 60       	ori	r24, 0x04	; 4
    1f9c:	8c 93       	st	X, r24
	PCMSK2 |= (1<<PCINT18);
    1f9e:	ed e6       	ldi	r30, 0x6D	; 109
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	84 60       	ori	r24, 0x04	; 4
    1fa6:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT19);
    1fa8:	80 81       	ld	r24, Z
    1faa:	88 60       	ori	r24, 0x08	; 8
    1fac:	80 83       	st	Z, r24
    1fae:	08 95       	ret

00001fb0 <__subsf3>:
    1fb0:	50 58       	subi	r21, 0x80	; 128

00001fb2 <__addsf3>:
    1fb2:	bb 27       	eor	r27, r27
    1fb4:	aa 27       	eor	r26, r26
    1fb6:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__addsf3x>
    1fba:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__fp_round>
    1fbe:	0e 94 b2 11 	call	0x2364	; 0x2364 <__fp_pscA>
    1fc2:	38 f0       	brcs	.+14     	; 0x1fd2 <__addsf3+0x20>
    1fc4:	0e 94 b9 11 	call	0x2372	; 0x2372 <__fp_pscB>
    1fc8:	20 f0       	brcs	.+8      	; 0x1fd2 <__addsf3+0x20>
    1fca:	39 f4       	brne	.+14     	; 0x1fda <__addsf3+0x28>
    1fcc:	9f 3f       	cpi	r25, 0xFF	; 255
    1fce:	19 f4       	brne	.+6      	; 0x1fd6 <__addsf3+0x24>
    1fd0:	26 f4       	brtc	.+8      	; 0x1fda <__addsf3+0x28>
    1fd2:	0c 94 88 11 	jmp	0x2310	; 0x2310 <__fp_nan>
    1fd6:	0e f4       	brtc	.+2      	; 0x1fda <__addsf3+0x28>
    1fd8:	e0 95       	com	r30
    1fda:	e7 fb       	bst	r30, 7
    1fdc:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__fp_inf>

00001fe0 <__addsf3x>:
    1fe0:	e9 2f       	mov	r30, r25
    1fe2:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__fp_split3>
    1fe6:	58 f3       	brcs	.-42     	; 0x1fbe <__addsf3+0xc>
    1fe8:	ba 17       	cp	r27, r26
    1fea:	62 07       	cpc	r22, r18
    1fec:	73 07       	cpc	r23, r19
    1fee:	84 07       	cpc	r24, r20
    1ff0:	95 07       	cpc	r25, r21
    1ff2:	20 f0       	brcs	.+8      	; 0x1ffc <__addsf3x+0x1c>
    1ff4:	79 f4       	brne	.+30     	; 0x2014 <__addsf3x+0x34>
    1ff6:	a6 f5       	brtc	.+104    	; 0x2060 <__addsf3x+0x80>
    1ff8:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__fp_zero>
    1ffc:	0e f4       	brtc	.+2      	; 0x2000 <__addsf3x+0x20>
    1ffe:	e0 95       	com	r30
    2000:	0b 2e       	mov	r0, r27
    2002:	ba 2f       	mov	r27, r26
    2004:	a0 2d       	mov	r26, r0
    2006:	0b 01       	movw	r0, r22
    2008:	b9 01       	movw	r22, r18
    200a:	90 01       	movw	r18, r0
    200c:	0c 01       	movw	r0, r24
    200e:	ca 01       	movw	r24, r20
    2010:	a0 01       	movw	r20, r0
    2012:	11 24       	eor	r1, r1
    2014:	ff 27       	eor	r31, r31
    2016:	59 1b       	sub	r21, r25
    2018:	99 f0       	breq	.+38     	; 0x2040 <__addsf3x+0x60>
    201a:	59 3f       	cpi	r21, 0xF9	; 249
    201c:	50 f4       	brcc	.+20     	; 0x2032 <__addsf3x+0x52>
    201e:	50 3e       	cpi	r21, 0xE0	; 224
    2020:	68 f1       	brcs	.+90     	; 0x207c <__addsf3x+0x9c>
    2022:	1a 16       	cp	r1, r26
    2024:	f0 40       	sbci	r31, 0x00	; 0
    2026:	a2 2f       	mov	r26, r18
    2028:	23 2f       	mov	r18, r19
    202a:	34 2f       	mov	r19, r20
    202c:	44 27       	eor	r20, r20
    202e:	58 5f       	subi	r21, 0xF8	; 248
    2030:	f3 cf       	rjmp	.-26     	; 0x2018 <__addsf3x+0x38>
    2032:	46 95       	lsr	r20
    2034:	37 95       	ror	r19
    2036:	27 95       	ror	r18
    2038:	a7 95       	ror	r26
    203a:	f0 40       	sbci	r31, 0x00	; 0
    203c:	53 95       	inc	r21
    203e:	c9 f7       	brne	.-14     	; 0x2032 <__addsf3x+0x52>
    2040:	7e f4       	brtc	.+30     	; 0x2060 <__addsf3x+0x80>
    2042:	1f 16       	cp	r1, r31
    2044:	ba 0b       	sbc	r27, r26
    2046:	62 0b       	sbc	r22, r18
    2048:	73 0b       	sbc	r23, r19
    204a:	84 0b       	sbc	r24, r20
    204c:	ba f0       	brmi	.+46     	; 0x207c <__addsf3x+0x9c>
    204e:	91 50       	subi	r25, 0x01	; 1
    2050:	a1 f0       	breq	.+40     	; 0x207a <__addsf3x+0x9a>
    2052:	ff 0f       	add	r31, r31
    2054:	bb 1f       	adc	r27, r27
    2056:	66 1f       	adc	r22, r22
    2058:	77 1f       	adc	r23, r23
    205a:	88 1f       	adc	r24, r24
    205c:	c2 f7       	brpl	.-16     	; 0x204e <__addsf3x+0x6e>
    205e:	0e c0       	rjmp	.+28     	; 0x207c <__addsf3x+0x9c>
    2060:	ba 0f       	add	r27, r26
    2062:	62 1f       	adc	r22, r18
    2064:	73 1f       	adc	r23, r19
    2066:	84 1f       	adc	r24, r20
    2068:	48 f4       	brcc	.+18     	; 0x207c <__addsf3x+0x9c>
    206a:	87 95       	ror	r24
    206c:	77 95       	ror	r23
    206e:	67 95       	ror	r22
    2070:	b7 95       	ror	r27
    2072:	f7 95       	ror	r31
    2074:	9e 3f       	cpi	r25, 0xFE	; 254
    2076:	08 f0       	brcs	.+2      	; 0x207a <__addsf3x+0x9a>
    2078:	b0 cf       	rjmp	.-160    	; 0x1fda <__addsf3+0x28>
    207a:	93 95       	inc	r25
    207c:	88 0f       	add	r24, r24
    207e:	08 f0       	brcs	.+2      	; 0x2082 <__addsf3x+0xa2>
    2080:	99 27       	eor	r25, r25
    2082:	ee 0f       	add	r30, r30
    2084:	97 95       	ror	r25
    2086:	87 95       	ror	r24
    2088:	08 95       	ret

0000208a <atan>:
    208a:	df 93       	push	r29
    208c:	dd 27       	eor	r29, r29
    208e:	b9 2f       	mov	r27, r25
    2090:	bf 77       	andi	r27, 0x7F	; 127
    2092:	40 e8       	ldi	r20, 0x80	; 128
    2094:	5f e3       	ldi	r21, 0x3F	; 63
    2096:	16 16       	cp	r1, r22
    2098:	17 06       	cpc	r1, r23
    209a:	48 07       	cpc	r20, r24
    209c:	5b 07       	cpc	r21, r27
    209e:	18 f4       	brcc	.+6      	; 0x20a6 <atan+0x1c>
    20a0:	d9 2f       	mov	r29, r25
    20a2:	0e 94 ff 11 	call	0x23fe	; 0x23fe <inverse>
    20a6:	9f 93       	push	r25
    20a8:	8f 93       	push	r24
    20aa:	7f 93       	push	r23
    20ac:	6f 93       	push	r22
    20ae:	0e 94 12 13 	call	0x2624	; 0x2624 <square>
    20b2:	e8 e6       	ldi	r30, 0x68	; 104
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	0e 94 8b 11 	call	0x2316	; 0x2316 <__fp_powser>
    20ba:	0e 94 c0 11 	call	0x2380	; 0x2380 <__fp_round>
    20be:	2f 91       	pop	r18
    20c0:	3f 91       	pop	r19
    20c2:	4f 91       	pop	r20
    20c4:	5f 91       	pop	r21
    20c6:	0e 94 1a 12 	call	0x2434	; 0x2434 <__mulsf3x>
    20ca:	dd 23       	and	r29, r29
    20cc:	51 f0       	breq	.+20     	; 0x20e2 <atan+0x58>
    20ce:	90 58       	subi	r25, 0x80	; 128
    20d0:	a2 ea       	ldi	r26, 0xA2	; 162
    20d2:	2a ed       	ldi	r18, 0xDA	; 218
    20d4:	3f e0       	ldi	r19, 0x0F	; 15
    20d6:	49 ec       	ldi	r20, 0xC9	; 201
    20d8:	5f e3       	ldi	r21, 0x3F	; 63
    20da:	d0 78       	andi	r29, 0x80	; 128
    20dc:	5d 27       	eor	r21, r29
    20de:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__addsf3x>
    20e2:	df 91       	pop	r29
    20e4:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__fp_round>

000020e8 <__cmpsf2>:
    20e8:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__fp_cmp>
    20ec:	08 f4       	brcc	.+2      	; 0x20f0 <__cmpsf2+0x8>
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	08 95       	ret

000020f2 <__divsf3>:
    20f2:	0e 94 8d 10 	call	0x211a	; 0x211a <__divsf3x>
    20f6:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__fp_round>
    20fa:	0e 94 b9 11 	call	0x2372	; 0x2372 <__fp_pscB>
    20fe:	58 f0       	brcs	.+22     	; 0x2116 <__divsf3+0x24>
    2100:	0e 94 b2 11 	call	0x2364	; 0x2364 <__fp_pscA>
    2104:	40 f0       	brcs	.+16     	; 0x2116 <__divsf3+0x24>
    2106:	29 f4       	brne	.+10     	; 0x2112 <__divsf3+0x20>
    2108:	5f 3f       	cpi	r21, 0xFF	; 255
    210a:	29 f0       	breq	.+10     	; 0x2116 <__divsf3+0x24>
    210c:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__fp_inf>
    2110:	51 11       	cpse	r21, r1
    2112:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__fp_szero>
    2116:	0c 94 88 11 	jmp	0x2310	; 0x2310 <__fp_nan>

0000211a <__divsf3x>:
    211a:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__fp_split3>
    211e:	68 f3       	brcs	.-38     	; 0x20fa <__divsf3+0x8>

00002120 <__divsf3_pse>:
    2120:	99 23       	and	r25, r25
    2122:	b1 f3       	breq	.-20     	; 0x2110 <__divsf3+0x1e>
    2124:	55 23       	and	r21, r21
    2126:	91 f3       	breq	.-28     	; 0x210c <__divsf3+0x1a>
    2128:	95 1b       	sub	r25, r21
    212a:	55 0b       	sbc	r21, r21
    212c:	bb 27       	eor	r27, r27
    212e:	aa 27       	eor	r26, r26
    2130:	62 17       	cp	r22, r18
    2132:	73 07       	cpc	r23, r19
    2134:	84 07       	cpc	r24, r20
    2136:	38 f0       	brcs	.+14     	; 0x2146 <__divsf3_pse+0x26>
    2138:	9f 5f       	subi	r25, 0xFF	; 255
    213a:	5f 4f       	sbci	r21, 0xFF	; 255
    213c:	22 0f       	add	r18, r18
    213e:	33 1f       	adc	r19, r19
    2140:	44 1f       	adc	r20, r20
    2142:	aa 1f       	adc	r26, r26
    2144:	a9 f3       	breq	.-22     	; 0x2130 <__divsf3_pse+0x10>
    2146:	35 d0       	rcall	.+106    	; 0x21b2 <__divsf3_pse+0x92>
    2148:	0e 2e       	mov	r0, r30
    214a:	3a f0       	brmi	.+14     	; 0x215a <__divsf3_pse+0x3a>
    214c:	e0 e8       	ldi	r30, 0x80	; 128
    214e:	32 d0       	rcall	.+100    	; 0x21b4 <__divsf3_pse+0x94>
    2150:	91 50       	subi	r25, 0x01	; 1
    2152:	50 40       	sbci	r21, 0x00	; 0
    2154:	e6 95       	lsr	r30
    2156:	00 1c       	adc	r0, r0
    2158:	ca f7       	brpl	.-14     	; 0x214c <__divsf3_pse+0x2c>
    215a:	2b d0       	rcall	.+86     	; 0x21b2 <__divsf3_pse+0x92>
    215c:	fe 2f       	mov	r31, r30
    215e:	29 d0       	rcall	.+82     	; 0x21b2 <__divsf3_pse+0x92>
    2160:	66 0f       	add	r22, r22
    2162:	77 1f       	adc	r23, r23
    2164:	88 1f       	adc	r24, r24
    2166:	bb 1f       	adc	r27, r27
    2168:	26 17       	cp	r18, r22
    216a:	37 07       	cpc	r19, r23
    216c:	48 07       	cpc	r20, r24
    216e:	ab 07       	cpc	r26, r27
    2170:	b0 e8       	ldi	r27, 0x80	; 128
    2172:	09 f0       	breq	.+2      	; 0x2176 <__divsf3_pse+0x56>
    2174:	bb 0b       	sbc	r27, r27
    2176:	80 2d       	mov	r24, r0
    2178:	bf 01       	movw	r22, r30
    217a:	ff 27       	eor	r31, r31
    217c:	93 58       	subi	r25, 0x83	; 131
    217e:	5f 4f       	sbci	r21, 0xFF	; 255
    2180:	3a f0       	brmi	.+14     	; 0x2190 <__divsf3_pse+0x70>
    2182:	9e 3f       	cpi	r25, 0xFE	; 254
    2184:	51 05       	cpc	r21, r1
    2186:	78 f0       	brcs	.+30     	; 0x21a6 <__divsf3_pse+0x86>
    2188:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__fp_inf>
    218c:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__fp_szero>
    2190:	5f 3f       	cpi	r21, 0xFF	; 255
    2192:	e4 f3       	brlt	.-8      	; 0x218c <__divsf3_pse+0x6c>
    2194:	98 3e       	cpi	r25, 0xE8	; 232
    2196:	d4 f3       	brlt	.-12     	; 0x218c <__divsf3_pse+0x6c>
    2198:	86 95       	lsr	r24
    219a:	77 95       	ror	r23
    219c:	67 95       	ror	r22
    219e:	b7 95       	ror	r27
    21a0:	f7 95       	ror	r31
    21a2:	9f 5f       	subi	r25, 0xFF	; 255
    21a4:	c9 f7       	brne	.-14     	; 0x2198 <__divsf3_pse+0x78>
    21a6:	88 0f       	add	r24, r24
    21a8:	91 1d       	adc	r25, r1
    21aa:	96 95       	lsr	r25
    21ac:	87 95       	ror	r24
    21ae:	97 f9       	bld	r25, 7
    21b0:	08 95       	ret
    21b2:	e1 e0       	ldi	r30, 0x01	; 1
    21b4:	66 0f       	add	r22, r22
    21b6:	77 1f       	adc	r23, r23
    21b8:	88 1f       	adc	r24, r24
    21ba:	bb 1f       	adc	r27, r27
    21bc:	62 17       	cp	r22, r18
    21be:	73 07       	cpc	r23, r19
    21c0:	84 07       	cpc	r24, r20
    21c2:	ba 07       	cpc	r27, r26
    21c4:	20 f0       	brcs	.+8      	; 0x21ce <__divsf3_pse+0xae>
    21c6:	62 1b       	sub	r22, r18
    21c8:	73 0b       	sbc	r23, r19
    21ca:	84 0b       	sbc	r24, r20
    21cc:	ba 0b       	sbc	r27, r26
    21ce:	ee 1f       	adc	r30, r30
    21d0:	88 f7       	brcc	.-30     	; 0x21b4 <__divsf3_pse+0x94>
    21d2:	e0 95       	com	r30
    21d4:	08 95       	ret

000021d6 <__fixsfsi>:
    21d6:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <__fixunssfsi>
    21da:	68 94       	set
    21dc:	b1 11       	cpse	r27, r1
    21de:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__fp_szero>
    21e2:	08 95       	ret

000021e4 <__fixunssfsi>:
    21e4:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <__fp_splitA>
    21e8:	88 f0       	brcs	.+34     	; 0x220c <__fixunssfsi+0x28>
    21ea:	9f 57       	subi	r25, 0x7F	; 127
    21ec:	98 f0       	brcs	.+38     	; 0x2214 <__fixunssfsi+0x30>
    21ee:	b9 2f       	mov	r27, r25
    21f0:	99 27       	eor	r25, r25
    21f2:	b7 51       	subi	r27, 0x17	; 23
    21f4:	b0 f0       	brcs	.+44     	; 0x2222 <__fixunssfsi+0x3e>
    21f6:	e1 f0       	breq	.+56     	; 0x2230 <__fixunssfsi+0x4c>
    21f8:	66 0f       	add	r22, r22
    21fa:	77 1f       	adc	r23, r23
    21fc:	88 1f       	adc	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	1a f0       	brmi	.+6      	; 0x2208 <__fixunssfsi+0x24>
    2202:	ba 95       	dec	r27
    2204:	c9 f7       	brne	.-14     	; 0x21f8 <__fixunssfsi+0x14>
    2206:	14 c0       	rjmp	.+40     	; 0x2230 <__fixunssfsi+0x4c>
    2208:	b1 30       	cpi	r27, 0x01	; 1
    220a:	91 f0       	breq	.+36     	; 0x2230 <__fixunssfsi+0x4c>
    220c:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <__fp_zero>
    2210:	b1 e0       	ldi	r27, 0x01	; 1
    2212:	08 95       	ret
    2214:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__fp_zero>
    2218:	67 2f       	mov	r22, r23
    221a:	78 2f       	mov	r23, r24
    221c:	88 27       	eor	r24, r24
    221e:	b8 5f       	subi	r27, 0xF8	; 248
    2220:	39 f0       	breq	.+14     	; 0x2230 <__fixunssfsi+0x4c>
    2222:	b9 3f       	cpi	r27, 0xF9	; 249
    2224:	cc f3       	brlt	.-14     	; 0x2218 <__fixunssfsi+0x34>
    2226:	86 95       	lsr	r24
    2228:	77 95       	ror	r23
    222a:	67 95       	ror	r22
    222c:	b3 95       	inc	r27
    222e:	d9 f7       	brne	.-10     	; 0x2226 <__fixunssfsi+0x42>
    2230:	3e f4       	brtc	.+14     	; 0x2240 <__fixunssfsi+0x5c>
    2232:	90 95       	com	r25
    2234:	80 95       	com	r24
    2236:	70 95       	com	r23
    2238:	61 95       	neg	r22
    223a:	7f 4f       	sbci	r23, 0xFF	; 255
    223c:	8f 4f       	sbci	r24, 0xFF	; 255
    223e:	9f 4f       	sbci	r25, 0xFF	; 255
    2240:	08 95       	ret

00002242 <__floatunsisf>:
    2242:	e8 94       	clt
    2244:	09 c0       	rjmp	.+18     	; 0x2258 <__floatsisf+0x12>

00002246 <__floatsisf>:
    2246:	97 fb       	bst	r25, 7
    2248:	3e f4       	brtc	.+14     	; 0x2258 <__floatsisf+0x12>
    224a:	90 95       	com	r25
    224c:	80 95       	com	r24
    224e:	70 95       	com	r23
    2250:	61 95       	neg	r22
    2252:	7f 4f       	sbci	r23, 0xFF	; 255
    2254:	8f 4f       	sbci	r24, 0xFF	; 255
    2256:	9f 4f       	sbci	r25, 0xFF	; 255
    2258:	99 23       	and	r25, r25
    225a:	a9 f0       	breq	.+42     	; 0x2286 <__floatsisf+0x40>
    225c:	f9 2f       	mov	r31, r25
    225e:	96 e9       	ldi	r25, 0x96	; 150
    2260:	bb 27       	eor	r27, r27
    2262:	93 95       	inc	r25
    2264:	f6 95       	lsr	r31
    2266:	87 95       	ror	r24
    2268:	77 95       	ror	r23
    226a:	67 95       	ror	r22
    226c:	b7 95       	ror	r27
    226e:	f1 11       	cpse	r31, r1
    2270:	f8 cf       	rjmp	.-16     	; 0x2262 <__floatsisf+0x1c>
    2272:	fa f4       	brpl	.+62     	; 0x22b2 <__floatsisf+0x6c>
    2274:	bb 0f       	add	r27, r27
    2276:	11 f4       	brne	.+4      	; 0x227c <__floatsisf+0x36>
    2278:	60 ff       	sbrs	r22, 0
    227a:	1b c0       	rjmp	.+54     	; 0x22b2 <__floatsisf+0x6c>
    227c:	6f 5f       	subi	r22, 0xFF	; 255
    227e:	7f 4f       	sbci	r23, 0xFF	; 255
    2280:	8f 4f       	sbci	r24, 0xFF	; 255
    2282:	9f 4f       	sbci	r25, 0xFF	; 255
    2284:	16 c0       	rjmp	.+44     	; 0x22b2 <__floatsisf+0x6c>
    2286:	88 23       	and	r24, r24
    2288:	11 f0       	breq	.+4      	; 0x228e <__floatsisf+0x48>
    228a:	96 e9       	ldi	r25, 0x96	; 150
    228c:	11 c0       	rjmp	.+34     	; 0x22b0 <__floatsisf+0x6a>
    228e:	77 23       	and	r23, r23
    2290:	21 f0       	breq	.+8      	; 0x229a <__floatsisf+0x54>
    2292:	9e e8       	ldi	r25, 0x8E	; 142
    2294:	87 2f       	mov	r24, r23
    2296:	76 2f       	mov	r23, r22
    2298:	05 c0       	rjmp	.+10     	; 0x22a4 <__floatsisf+0x5e>
    229a:	66 23       	and	r22, r22
    229c:	71 f0       	breq	.+28     	; 0x22ba <__floatsisf+0x74>
    229e:	96 e8       	ldi	r25, 0x86	; 134
    22a0:	86 2f       	mov	r24, r22
    22a2:	70 e0       	ldi	r23, 0x00	; 0
    22a4:	60 e0       	ldi	r22, 0x00	; 0
    22a6:	2a f0       	brmi	.+10     	; 0x22b2 <__floatsisf+0x6c>
    22a8:	9a 95       	dec	r25
    22aa:	66 0f       	add	r22, r22
    22ac:	77 1f       	adc	r23, r23
    22ae:	88 1f       	adc	r24, r24
    22b0:	da f7       	brpl	.-10     	; 0x22a8 <__floatsisf+0x62>
    22b2:	88 0f       	add	r24, r24
    22b4:	96 95       	lsr	r25
    22b6:	87 95       	ror	r24
    22b8:	97 f9       	bld	r25, 7
    22ba:	08 95       	ret

000022bc <__fp_cmp>:
    22bc:	99 0f       	add	r25, r25
    22be:	00 08       	sbc	r0, r0
    22c0:	55 0f       	add	r21, r21
    22c2:	aa 0b       	sbc	r26, r26
    22c4:	e0 e8       	ldi	r30, 0x80	; 128
    22c6:	fe ef       	ldi	r31, 0xFE	; 254
    22c8:	16 16       	cp	r1, r22
    22ca:	17 06       	cpc	r1, r23
    22cc:	e8 07       	cpc	r30, r24
    22ce:	f9 07       	cpc	r31, r25
    22d0:	c0 f0       	brcs	.+48     	; 0x2302 <__fp_cmp+0x46>
    22d2:	12 16       	cp	r1, r18
    22d4:	13 06       	cpc	r1, r19
    22d6:	e4 07       	cpc	r30, r20
    22d8:	f5 07       	cpc	r31, r21
    22da:	98 f0       	brcs	.+38     	; 0x2302 <__fp_cmp+0x46>
    22dc:	62 1b       	sub	r22, r18
    22de:	73 0b       	sbc	r23, r19
    22e0:	84 0b       	sbc	r24, r20
    22e2:	95 0b       	sbc	r25, r21
    22e4:	39 f4       	brne	.+14     	; 0x22f4 <__fp_cmp+0x38>
    22e6:	0a 26       	eor	r0, r26
    22e8:	61 f0       	breq	.+24     	; 0x2302 <__fp_cmp+0x46>
    22ea:	23 2b       	or	r18, r19
    22ec:	24 2b       	or	r18, r20
    22ee:	25 2b       	or	r18, r21
    22f0:	21 f4       	brne	.+8      	; 0x22fa <__fp_cmp+0x3e>
    22f2:	08 95       	ret
    22f4:	0a 26       	eor	r0, r26
    22f6:	09 f4       	brne	.+2      	; 0x22fa <__fp_cmp+0x3e>
    22f8:	a1 40       	sbci	r26, 0x01	; 1
    22fa:	a6 95       	lsr	r26
    22fc:	8f ef       	ldi	r24, 0xFF	; 255
    22fe:	81 1d       	adc	r24, r1
    2300:	81 1d       	adc	r24, r1
    2302:	08 95       	ret

00002304 <__fp_inf>:
    2304:	97 f9       	bld	r25, 7
    2306:	9f 67       	ori	r25, 0x7F	; 127
    2308:	80 e8       	ldi	r24, 0x80	; 128
    230a:	70 e0       	ldi	r23, 0x00	; 0
    230c:	60 e0       	ldi	r22, 0x00	; 0
    230e:	08 95       	ret

00002310 <__fp_nan>:
    2310:	9f ef       	ldi	r25, 0xFF	; 255
    2312:	80 ec       	ldi	r24, 0xC0	; 192
    2314:	08 95       	ret

00002316 <__fp_powser>:
    2316:	df 93       	push	r29
    2318:	cf 93       	push	r28
    231a:	1f 93       	push	r17
    231c:	0f 93       	push	r16
    231e:	ff 92       	push	r15
    2320:	ef 92       	push	r14
    2322:	df 92       	push	r13
    2324:	7b 01       	movw	r14, r22
    2326:	8c 01       	movw	r16, r24
    2328:	68 94       	set
    232a:	06 c0       	rjmp	.+12     	; 0x2338 <__fp_powser+0x22>
    232c:	da 2e       	mov	r13, r26
    232e:	ef 01       	movw	r28, r30
    2330:	0e 94 1a 12 	call	0x2434	; 0x2434 <__mulsf3x>
    2334:	fe 01       	movw	r30, r28
    2336:	e8 94       	clt
    2338:	a5 91       	lpm	r26, Z+
    233a:	25 91       	lpm	r18, Z+
    233c:	35 91       	lpm	r19, Z+
    233e:	45 91       	lpm	r20, Z+
    2340:	55 91       	lpm	r21, Z+
    2342:	a6 f3       	brts	.-24     	; 0x232c <__fp_powser+0x16>
    2344:	ef 01       	movw	r28, r30
    2346:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__addsf3x>
    234a:	fe 01       	movw	r30, r28
    234c:	97 01       	movw	r18, r14
    234e:	a8 01       	movw	r20, r16
    2350:	da 94       	dec	r13
    2352:	69 f7       	brne	.-38     	; 0x232e <__fp_powser+0x18>
    2354:	df 90       	pop	r13
    2356:	ef 90       	pop	r14
    2358:	ff 90       	pop	r15
    235a:	0f 91       	pop	r16
    235c:	1f 91       	pop	r17
    235e:	cf 91       	pop	r28
    2360:	df 91       	pop	r29
    2362:	08 95       	ret

00002364 <__fp_pscA>:
    2364:	00 24       	eor	r0, r0
    2366:	0a 94       	dec	r0
    2368:	16 16       	cp	r1, r22
    236a:	17 06       	cpc	r1, r23
    236c:	18 06       	cpc	r1, r24
    236e:	09 06       	cpc	r0, r25
    2370:	08 95       	ret

00002372 <__fp_pscB>:
    2372:	00 24       	eor	r0, r0
    2374:	0a 94       	dec	r0
    2376:	12 16       	cp	r1, r18
    2378:	13 06       	cpc	r1, r19
    237a:	14 06       	cpc	r1, r20
    237c:	05 06       	cpc	r0, r21
    237e:	08 95       	ret

00002380 <__fp_round>:
    2380:	09 2e       	mov	r0, r25
    2382:	03 94       	inc	r0
    2384:	00 0c       	add	r0, r0
    2386:	11 f4       	brne	.+4      	; 0x238c <__fp_round+0xc>
    2388:	88 23       	and	r24, r24
    238a:	52 f0       	brmi	.+20     	; 0x23a0 <__fp_round+0x20>
    238c:	bb 0f       	add	r27, r27
    238e:	40 f4       	brcc	.+16     	; 0x23a0 <__fp_round+0x20>
    2390:	bf 2b       	or	r27, r31
    2392:	11 f4       	brne	.+4      	; 0x2398 <__fp_round+0x18>
    2394:	60 ff       	sbrs	r22, 0
    2396:	04 c0       	rjmp	.+8      	; 0x23a0 <__fp_round+0x20>
    2398:	6f 5f       	subi	r22, 0xFF	; 255
    239a:	7f 4f       	sbci	r23, 0xFF	; 255
    239c:	8f 4f       	sbci	r24, 0xFF	; 255
    239e:	9f 4f       	sbci	r25, 0xFF	; 255
    23a0:	08 95       	ret

000023a2 <__fp_split3>:
    23a2:	57 fd       	sbrc	r21, 7
    23a4:	90 58       	subi	r25, 0x80	; 128
    23a6:	44 0f       	add	r20, r20
    23a8:	55 1f       	adc	r21, r21
    23aa:	59 f0       	breq	.+22     	; 0x23c2 <__fp_splitA+0x10>
    23ac:	5f 3f       	cpi	r21, 0xFF	; 255
    23ae:	71 f0       	breq	.+28     	; 0x23cc <__fp_splitA+0x1a>
    23b0:	47 95       	ror	r20

000023b2 <__fp_splitA>:
    23b2:	88 0f       	add	r24, r24
    23b4:	97 fb       	bst	r25, 7
    23b6:	99 1f       	adc	r25, r25
    23b8:	61 f0       	breq	.+24     	; 0x23d2 <__fp_splitA+0x20>
    23ba:	9f 3f       	cpi	r25, 0xFF	; 255
    23bc:	79 f0       	breq	.+30     	; 0x23dc <__fp_splitA+0x2a>
    23be:	87 95       	ror	r24
    23c0:	08 95       	ret
    23c2:	12 16       	cp	r1, r18
    23c4:	13 06       	cpc	r1, r19
    23c6:	14 06       	cpc	r1, r20
    23c8:	55 1f       	adc	r21, r21
    23ca:	f2 cf       	rjmp	.-28     	; 0x23b0 <__fp_split3+0xe>
    23cc:	46 95       	lsr	r20
    23ce:	f1 df       	rcall	.-30     	; 0x23b2 <__fp_splitA>
    23d0:	08 c0       	rjmp	.+16     	; 0x23e2 <__fp_splitA+0x30>
    23d2:	16 16       	cp	r1, r22
    23d4:	17 06       	cpc	r1, r23
    23d6:	18 06       	cpc	r1, r24
    23d8:	99 1f       	adc	r25, r25
    23da:	f1 cf       	rjmp	.-30     	; 0x23be <__fp_splitA+0xc>
    23dc:	86 95       	lsr	r24
    23de:	71 05       	cpc	r23, r1
    23e0:	61 05       	cpc	r22, r1
    23e2:	08 94       	sec
    23e4:	08 95       	ret

000023e6 <__fp_zero>:
    23e6:	e8 94       	clt

000023e8 <__fp_szero>:
    23e8:	bb 27       	eor	r27, r27
    23ea:	66 27       	eor	r22, r22
    23ec:	77 27       	eor	r23, r23
    23ee:	cb 01       	movw	r24, r22
    23f0:	97 f9       	bld	r25, 7
    23f2:	08 95       	ret

000023f4 <__gesf2>:
    23f4:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__fp_cmp>
    23f8:	08 f4       	brcc	.+2      	; 0x23fc <__gesf2+0x8>
    23fa:	8f ef       	ldi	r24, 0xFF	; 255
    23fc:	08 95       	ret

000023fe <inverse>:
    23fe:	9b 01       	movw	r18, r22
    2400:	ac 01       	movw	r20, r24
    2402:	60 e0       	ldi	r22, 0x00	; 0
    2404:	70 e0       	ldi	r23, 0x00	; 0
    2406:	80 e8       	ldi	r24, 0x80	; 128
    2408:	9f e3       	ldi	r25, 0x3F	; 63
    240a:	0c 94 79 10 	jmp	0x20f2	; 0x20f2 <__divsf3>

0000240e <__mulsf3>:
    240e:	0e 94 1a 12 	call	0x2434	; 0x2434 <__mulsf3x>
    2412:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__fp_round>
    2416:	0e 94 b2 11 	call	0x2364	; 0x2364 <__fp_pscA>
    241a:	38 f0       	brcs	.+14     	; 0x242a <__mulsf3+0x1c>
    241c:	0e 94 b9 11 	call	0x2372	; 0x2372 <__fp_pscB>
    2420:	20 f0       	brcs	.+8      	; 0x242a <__mulsf3+0x1c>
    2422:	95 23       	and	r25, r21
    2424:	11 f0       	breq	.+4      	; 0x242a <__mulsf3+0x1c>
    2426:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__fp_inf>
    242a:	0c 94 88 11 	jmp	0x2310	; 0x2310 <__fp_nan>
    242e:	11 24       	eor	r1, r1
    2430:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__fp_szero>

00002434 <__mulsf3x>:
    2434:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__fp_split3>
    2438:	70 f3       	brcs	.-36     	; 0x2416 <__mulsf3+0x8>

0000243a <__mulsf3_pse>:
    243a:	95 9f       	mul	r25, r21
    243c:	c1 f3       	breq	.-16     	; 0x242e <__mulsf3+0x20>
    243e:	95 0f       	add	r25, r21
    2440:	50 e0       	ldi	r21, 0x00	; 0
    2442:	55 1f       	adc	r21, r21
    2444:	62 9f       	mul	r22, r18
    2446:	f0 01       	movw	r30, r0
    2448:	72 9f       	mul	r23, r18
    244a:	bb 27       	eor	r27, r27
    244c:	f0 0d       	add	r31, r0
    244e:	b1 1d       	adc	r27, r1
    2450:	63 9f       	mul	r22, r19
    2452:	aa 27       	eor	r26, r26
    2454:	f0 0d       	add	r31, r0
    2456:	b1 1d       	adc	r27, r1
    2458:	aa 1f       	adc	r26, r26
    245a:	64 9f       	mul	r22, r20
    245c:	66 27       	eor	r22, r22
    245e:	b0 0d       	add	r27, r0
    2460:	a1 1d       	adc	r26, r1
    2462:	66 1f       	adc	r22, r22
    2464:	82 9f       	mul	r24, r18
    2466:	22 27       	eor	r18, r18
    2468:	b0 0d       	add	r27, r0
    246a:	a1 1d       	adc	r26, r1
    246c:	62 1f       	adc	r22, r18
    246e:	73 9f       	mul	r23, r19
    2470:	b0 0d       	add	r27, r0
    2472:	a1 1d       	adc	r26, r1
    2474:	62 1f       	adc	r22, r18
    2476:	83 9f       	mul	r24, r19
    2478:	a0 0d       	add	r26, r0
    247a:	61 1d       	adc	r22, r1
    247c:	22 1f       	adc	r18, r18
    247e:	74 9f       	mul	r23, r20
    2480:	33 27       	eor	r19, r19
    2482:	a0 0d       	add	r26, r0
    2484:	61 1d       	adc	r22, r1
    2486:	23 1f       	adc	r18, r19
    2488:	84 9f       	mul	r24, r20
    248a:	60 0d       	add	r22, r0
    248c:	21 1d       	adc	r18, r1
    248e:	82 2f       	mov	r24, r18
    2490:	76 2f       	mov	r23, r22
    2492:	6a 2f       	mov	r22, r26
    2494:	11 24       	eor	r1, r1
    2496:	9f 57       	subi	r25, 0x7F	; 127
    2498:	50 40       	sbci	r21, 0x00	; 0
    249a:	9a f0       	brmi	.+38     	; 0x24c2 <__mulsf3_pse+0x88>
    249c:	f1 f0       	breq	.+60     	; 0x24da <__mulsf3_pse+0xa0>
    249e:	88 23       	and	r24, r24
    24a0:	4a f0       	brmi	.+18     	; 0x24b4 <__mulsf3_pse+0x7a>
    24a2:	ee 0f       	add	r30, r30
    24a4:	ff 1f       	adc	r31, r31
    24a6:	bb 1f       	adc	r27, r27
    24a8:	66 1f       	adc	r22, r22
    24aa:	77 1f       	adc	r23, r23
    24ac:	88 1f       	adc	r24, r24
    24ae:	91 50       	subi	r25, 0x01	; 1
    24b0:	50 40       	sbci	r21, 0x00	; 0
    24b2:	a9 f7       	brne	.-22     	; 0x249e <__mulsf3_pse+0x64>
    24b4:	9e 3f       	cpi	r25, 0xFE	; 254
    24b6:	51 05       	cpc	r21, r1
    24b8:	80 f0       	brcs	.+32     	; 0x24da <__mulsf3_pse+0xa0>
    24ba:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__fp_inf>
    24be:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__fp_szero>
    24c2:	5f 3f       	cpi	r21, 0xFF	; 255
    24c4:	e4 f3       	brlt	.-8      	; 0x24be <__mulsf3_pse+0x84>
    24c6:	98 3e       	cpi	r25, 0xE8	; 232
    24c8:	d4 f3       	brlt	.-12     	; 0x24be <__mulsf3_pse+0x84>
    24ca:	86 95       	lsr	r24
    24cc:	77 95       	ror	r23
    24ce:	67 95       	ror	r22
    24d0:	b7 95       	ror	r27
    24d2:	f7 95       	ror	r31
    24d4:	e7 95       	ror	r30
    24d6:	9f 5f       	subi	r25, 0xFF	; 255
    24d8:	c1 f7       	brne	.-16     	; 0x24ca <__mulsf3_pse+0x90>
    24da:	fe 2b       	or	r31, r30
    24dc:	88 0f       	add	r24, r24
    24de:	91 1d       	adc	r25, r1
    24e0:	96 95       	lsr	r25
    24e2:	87 95       	ror	r24
    24e4:	97 f9       	bld	r25, 7
    24e6:	08 95       	ret

000024e8 <pow>:
    24e8:	fa 01       	movw	r30, r20
    24ea:	ee 0f       	add	r30, r30
    24ec:	ff 1f       	adc	r31, r31
    24ee:	30 96       	adiw	r30, 0x00	; 0
    24f0:	21 05       	cpc	r18, r1
    24f2:	31 05       	cpc	r19, r1
    24f4:	a1 f1       	breq	.+104    	; 0x255e <pow+0x76>
    24f6:	61 15       	cp	r22, r1
    24f8:	71 05       	cpc	r23, r1
    24fa:	61 f4       	brne	.+24     	; 0x2514 <pow+0x2c>
    24fc:	80 38       	cpi	r24, 0x80	; 128
    24fe:	bf e3       	ldi	r27, 0x3F	; 63
    2500:	9b 07       	cpc	r25, r27
    2502:	49 f1       	breq	.+82     	; 0x2556 <pow+0x6e>
    2504:	68 94       	set
    2506:	90 38       	cpi	r25, 0x80	; 128
    2508:	81 05       	cpc	r24, r1
    250a:	61 f0       	breq	.+24     	; 0x2524 <pow+0x3c>
    250c:	80 38       	cpi	r24, 0x80	; 128
    250e:	bf ef       	ldi	r27, 0xFF	; 255
    2510:	9b 07       	cpc	r25, r27
    2512:	41 f0       	breq	.+16     	; 0x2524 <pow+0x3c>
    2514:	99 23       	and	r25, r25
    2516:	4a f5       	brpl	.+82     	; 0x256a <pow+0x82>
    2518:	ff 3f       	cpi	r31, 0xFF	; 255
    251a:	e1 05       	cpc	r30, r1
    251c:	31 05       	cpc	r19, r1
    251e:	21 05       	cpc	r18, r1
    2520:	19 f1       	breq	.+70     	; 0x2568 <pow+0x80>
    2522:	e8 94       	clt
    2524:	08 94       	sec
    2526:	e7 95       	ror	r30
    2528:	d9 01       	movw	r26, r18
    252a:	aa 23       	and	r26, r26
    252c:	29 f4       	brne	.+10     	; 0x2538 <pow+0x50>
    252e:	ab 2f       	mov	r26, r27
    2530:	be 2f       	mov	r27, r30
    2532:	f8 5f       	subi	r31, 0xF8	; 248
    2534:	d0 f3       	brcs	.-12     	; 0x252a <pow+0x42>
    2536:	10 c0       	rjmp	.+32     	; 0x2558 <pow+0x70>
    2538:	ff 5f       	subi	r31, 0xFF	; 255
    253a:	70 f4       	brcc	.+28     	; 0x2558 <pow+0x70>
    253c:	a6 95       	lsr	r26
    253e:	e0 f7       	brcc	.-8      	; 0x2538 <pow+0x50>
    2540:	f7 39       	cpi	r31, 0x97	; 151
    2542:	50 f0       	brcs	.+20     	; 0x2558 <pow+0x70>
    2544:	19 f0       	breq	.+6      	; 0x254c <pow+0x64>
    2546:	ff 3a       	cpi	r31, 0xAF	; 175
    2548:	38 f4       	brcc	.+14     	; 0x2558 <pow+0x70>
    254a:	9f 77       	andi	r25, 0x7F	; 127
    254c:	9f 93       	push	r25
    254e:	0d d0       	rcall	.+26     	; 0x256a <pow+0x82>
    2550:	0f 90       	pop	r0
    2552:	07 fc       	sbrc	r0, 7
    2554:	90 58       	subi	r25, 0x80	; 128
    2556:	08 95       	ret
    2558:	46 f0       	brts	.+16     	; 0x256a <pow+0x82>
    255a:	0c 94 88 11 	jmp	0x2310	; 0x2310 <__fp_nan>
    255e:	60 e0       	ldi	r22, 0x00	; 0
    2560:	70 e0       	ldi	r23, 0x00	; 0
    2562:	80 e8       	ldi	r24, 0x80	; 128
    2564:	9f e3       	ldi	r25, 0x3F	; 63
    2566:	08 95       	ret
    2568:	4f e7       	ldi	r20, 0x7F	; 127
    256a:	9f 77       	andi	r25, 0x7F	; 127
    256c:	5f 93       	push	r21
    256e:	4f 93       	push	r20
    2570:	3f 93       	push	r19
    2572:	2f 93       	push	r18
    2574:	0e 94 e6 13 	call	0x27cc	; 0x27cc <log>
    2578:	2f 91       	pop	r18
    257a:	3f 91       	pop	r19
    257c:	4f 91       	pop	r20
    257e:	5f 91       	pop	r21
    2580:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
    2584:	0c 94 1e 13 	jmp	0x263c	; 0x263c <exp>

00002588 <sin>:
    2588:	9f 93       	push	r25
    258a:	0e 94 67 13 	call	0x26ce	; 0x26ce <__fp_rempio2>
    258e:	0f 90       	pop	r0
    2590:	07 fc       	sbrc	r0, 7
    2592:	ee 5f       	subi	r30, 0xFE	; 254
    2594:	0c 94 90 13 	jmp	0x2720	; 0x2720 <__fp_sinus>
    2598:	19 f4       	brne	.+6      	; 0x25a0 <sin+0x18>
    259a:	16 f4       	brtc	.+4      	; 0x25a0 <sin+0x18>
    259c:	0c 94 88 11 	jmp	0x2310	; 0x2310 <__fp_nan>
    25a0:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <__fp_mpack>

000025a4 <sqrt>:
    25a4:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <__fp_splitA>
    25a8:	b8 f3       	brcs	.-18     	; 0x2598 <sin+0x10>
    25aa:	99 23       	and	r25, r25
    25ac:	c9 f3       	breq	.-14     	; 0x25a0 <sin+0x18>
    25ae:	b6 f3       	brts	.-20     	; 0x259c <sin+0x14>
    25b0:	9f 57       	subi	r25, 0x7F	; 127
    25b2:	55 0b       	sbc	r21, r21
    25b4:	87 ff       	sbrs	r24, 7
    25b6:	0e 94 5e 13 	call	0x26bc	; 0x26bc <__fp_norm2>
    25ba:	00 24       	eor	r0, r0
    25bc:	a0 e6       	ldi	r26, 0x60	; 96
    25be:	40 ea       	ldi	r20, 0xA0	; 160
    25c0:	90 01       	movw	r18, r0
    25c2:	80 58       	subi	r24, 0x80	; 128
    25c4:	56 95       	lsr	r21
    25c6:	97 95       	ror	r25
    25c8:	28 f4       	brcc	.+10     	; 0x25d4 <sqrt+0x30>
    25ca:	80 5c       	subi	r24, 0xC0	; 192
    25cc:	66 0f       	add	r22, r22
    25ce:	77 1f       	adc	r23, r23
    25d0:	88 1f       	adc	r24, r24
    25d2:	20 f0       	brcs	.+8      	; 0x25dc <sqrt+0x38>
    25d4:	26 17       	cp	r18, r22
    25d6:	37 07       	cpc	r19, r23
    25d8:	48 07       	cpc	r20, r24
    25da:	30 f4       	brcc	.+12     	; 0x25e8 <sqrt+0x44>
    25dc:	62 1b       	sub	r22, r18
    25de:	73 0b       	sbc	r23, r19
    25e0:	84 0b       	sbc	r24, r20
    25e2:	20 29       	or	r18, r0
    25e4:	31 29       	or	r19, r1
    25e6:	4a 2b       	or	r20, r26
    25e8:	a6 95       	lsr	r26
    25ea:	17 94       	ror	r1
    25ec:	07 94       	ror	r0
    25ee:	20 25       	eor	r18, r0
    25f0:	31 25       	eor	r19, r1
    25f2:	4a 27       	eor	r20, r26
    25f4:	58 f7       	brcc	.-42     	; 0x25cc <sqrt+0x28>
    25f6:	66 0f       	add	r22, r22
    25f8:	77 1f       	adc	r23, r23
    25fa:	88 1f       	adc	r24, r24
    25fc:	20 f0       	brcs	.+8      	; 0x2606 <sqrt+0x62>
    25fe:	26 17       	cp	r18, r22
    2600:	37 07       	cpc	r19, r23
    2602:	48 07       	cpc	r20, r24
    2604:	30 f4       	brcc	.+12     	; 0x2612 <sqrt+0x6e>
    2606:	62 0b       	sbc	r22, r18
    2608:	73 0b       	sbc	r23, r19
    260a:	84 0b       	sbc	r24, r20
    260c:	20 0d       	add	r18, r0
    260e:	31 1d       	adc	r19, r1
    2610:	41 1d       	adc	r20, r1
    2612:	a0 95       	com	r26
    2614:	81 f7       	brne	.-32     	; 0x25f6 <sqrt+0x52>
    2616:	b9 01       	movw	r22, r18
    2618:	84 2f       	mov	r24, r20
    261a:	91 58       	subi	r25, 0x81	; 129
    261c:	88 0f       	add	r24, r24
    261e:	96 95       	lsr	r25
    2620:	87 95       	ror	r24
    2622:	08 95       	ret

00002624 <square>:
    2624:	9b 01       	movw	r18, r22
    2626:	ac 01       	movw	r20, r24
    2628:	0c 94 07 12 	jmp	0x240e	; 0x240e <__mulsf3>
    262c:	29 f4       	brne	.+10     	; 0x2638 <square+0x14>
    262e:	16 f0       	brts	.+4      	; 0x2634 <square+0x10>
    2630:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__fp_inf>
    2634:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__fp_zero>
    2638:	0c 94 88 11 	jmp	0x2310	; 0x2310 <__fp_nan>

0000263c <exp>:
    263c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <__fp_splitA>
    2640:	a8 f3       	brcs	.-22     	; 0x262c <square+0x8>
    2642:	96 38       	cpi	r25, 0x86	; 134
    2644:	a0 f7       	brcc	.-24     	; 0x262e <square+0xa>
    2646:	07 f8       	bld	r0, 7
    2648:	0f 92       	push	r0
    264a:	e8 94       	clt
    264c:	2b e3       	ldi	r18, 0x3B	; 59
    264e:	3a ea       	ldi	r19, 0xAA	; 170
    2650:	48 eb       	ldi	r20, 0xB8	; 184
    2652:	5f e7       	ldi	r21, 0x7F	; 127
    2654:	0e 94 1d 12 	call	0x243a	; 0x243a <__mulsf3_pse>
    2658:	0f 92       	push	r0
    265a:	0f 92       	push	r0
    265c:	0f 92       	push	r0
    265e:	4d b7       	in	r20, 0x3d	; 61
    2660:	5e b7       	in	r21, 0x3e	; 62
    2662:	0f 92       	push	r0
    2664:	0e 94 2e 14 	call	0x285c	; 0x285c <modf>
    2668:	e5 e9       	ldi	r30, 0x95	; 149
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	0e 94 8b 11 	call	0x2316	; 0x2316 <__fp_powser>
    2670:	4f 91       	pop	r20
    2672:	5f 91       	pop	r21
    2674:	ef 91       	pop	r30
    2676:	ff 91       	pop	r31
    2678:	e5 95       	asr	r30
    267a:	ee 1f       	adc	r30, r30
    267c:	ff 1f       	adc	r31, r31
    267e:	49 f0       	breq	.+18     	; 0x2692 <exp+0x56>
    2680:	fe 57       	subi	r31, 0x7E	; 126
    2682:	e0 68       	ori	r30, 0x80	; 128
    2684:	44 27       	eor	r20, r20
    2686:	ee 0f       	add	r30, r30
    2688:	44 1f       	adc	r20, r20
    268a:	fa 95       	dec	r31
    268c:	e1 f7       	brne	.-8      	; 0x2686 <exp+0x4a>
    268e:	41 95       	neg	r20
    2690:	55 0b       	sbc	r21, r21
    2692:	0e 94 a8 13 	call	0x2750	; 0x2750 <ldexp>
    2696:	0f 90       	pop	r0
    2698:	07 fe       	sbrs	r0, 7
    269a:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <inverse>
    269e:	08 95       	ret

000026a0 <__fp_mpack>:
    26a0:	9f 3f       	cpi	r25, 0xFF	; 255
    26a2:	31 f0       	breq	.+12     	; 0x26b0 <__fp_mpack_finite+0xc>

000026a4 <__fp_mpack_finite>:
    26a4:	91 50       	subi	r25, 0x01	; 1
    26a6:	20 f4       	brcc	.+8      	; 0x26b0 <__fp_mpack_finite+0xc>
    26a8:	87 95       	ror	r24
    26aa:	77 95       	ror	r23
    26ac:	67 95       	ror	r22
    26ae:	b7 95       	ror	r27
    26b0:	88 0f       	add	r24, r24
    26b2:	91 1d       	adc	r25, r1
    26b4:	96 95       	lsr	r25
    26b6:	87 95       	ror	r24
    26b8:	97 f9       	bld	r25, 7
    26ba:	08 95       	ret

000026bc <__fp_norm2>:
    26bc:	91 50       	subi	r25, 0x01	; 1
    26be:	50 40       	sbci	r21, 0x00	; 0
    26c0:	66 0f       	add	r22, r22
    26c2:	77 1f       	adc	r23, r23
    26c4:	88 1f       	adc	r24, r24
    26c6:	d2 f7       	brpl	.-12     	; 0x26bc <__fp_norm2>
    26c8:	08 95       	ret
    26ca:	0c 94 88 11 	jmp	0x2310	; 0x2310 <__fp_nan>

000026ce <__fp_rempio2>:
    26ce:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <__fp_splitA>
    26d2:	d8 f3       	brcs	.-10     	; 0x26ca <__fp_norm2+0xe>
    26d4:	e8 94       	clt
    26d6:	e0 e0       	ldi	r30, 0x00	; 0
    26d8:	bb 27       	eor	r27, r27
    26da:	9f 57       	subi	r25, 0x7F	; 127
    26dc:	f0 f0       	brcs	.+60     	; 0x271a <__fp_rempio2+0x4c>
    26de:	2a ed       	ldi	r18, 0xDA	; 218
    26e0:	3f e0       	ldi	r19, 0x0F	; 15
    26e2:	49 ec       	ldi	r20, 0xC9	; 201
    26e4:	06 c0       	rjmp	.+12     	; 0x26f2 <__fp_rempio2+0x24>
    26e6:	ee 0f       	add	r30, r30
    26e8:	bb 0f       	add	r27, r27
    26ea:	66 1f       	adc	r22, r22
    26ec:	77 1f       	adc	r23, r23
    26ee:	88 1f       	adc	r24, r24
    26f0:	28 f0       	brcs	.+10     	; 0x26fc <__fp_rempio2+0x2e>
    26f2:	b2 3a       	cpi	r27, 0xA2	; 162
    26f4:	62 07       	cpc	r22, r18
    26f6:	73 07       	cpc	r23, r19
    26f8:	84 07       	cpc	r24, r20
    26fa:	28 f0       	brcs	.+10     	; 0x2706 <__fp_rempio2+0x38>
    26fc:	b2 5a       	subi	r27, 0xA2	; 162
    26fe:	62 0b       	sbc	r22, r18
    2700:	73 0b       	sbc	r23, r19
    2702:	84 0b       	sbc	r24, r20
    2704:	e3 95       	inc	r30
    2706:	9a 95       	dec	r25
    2708:	72 f7       	brpl	.-36     	; 0x26e6 <__fp_rempio2+0x18>
    270a:	80 38       	cpi	r24, 0x80	; 128
    270c:	30 f4       	brcc	.+12     	; 0x271a <__fp_rempio2+0x4c>
    270e:	9a 95       	dec	r25
    2710:	bb 0f       	add	r27, r27
    2712:	66 1f       	adc	r22, r22
    2714:	77 1f       	adc	r23, r23
    2716:	88 1f       	adc	r24, r24
    2718:	d2 f7       	brpl	.-12     	; 0x270e <__fp_rempio2+0x40>
    271a:	90 48       	sbci	r25, 0x80	; 128
    271c:	0c 94 52 13 	jmp	0x26a4	; 0x26a4 <__fp_mpack_finite>

00002720 <__fp_sinus>:
    2720:	ef 93       	push	r30
    2722:	e0 ff       	sbrs	r30, 0
    2724:	07 c0       	rjmp	.+14     	; 0x2734 <__fp_sinus+0x14>
    2726:	a2 ea       	ldi	r26, 0xA2	; 162
    2728:	2a ed       	ldi	r18, 0xDA	; 218
    272a:	3f e0       	ldi	r19, 0x0F	; 15
    272c:	49 ec       	ldi	r20, 0xC9	; 201
    272e:	5f eb       	ldi	r21, 0xBF	; 191
    2730:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__addsf3x>
    2734:	0e 94 c0 11 	call	0x2380	; 0x2380 <__fp_round>
    2738:	0f 90       	pop	r0
    273a:	03 94       	inc	r0
    273c:	01 fc       	sbrc	r0, 1
    273e:	90 58       	subi	r25, 0x80	; 128
    2740:	ed eb       	ldi	r30, 0xBD	; 189
    2742:	f0 e0       	ldi	r31, 0x00	; 0
    2744:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__fp_powsodd>
    2748:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__fp_inf>
    274c:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <__fp_mpack>

00002750 <ldexp>:
    2750:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <__fp_splitA>
    2754:	d8 f3       	brcs	.-10     	; 0x274c <__fp_sinus+0x2c>
    2756:	99 23       	and	r25, r25
    2758:	c9 f3       	breq	.-14     	; 0x274c <__fp_sinus+0x2c>
    275a:	94 0f       	add	r25, r20
    275c:	51 1d       	adc	r21, r1
    275e:	a3 f3       	brvs	.-24     	; 0x2748 <__fp_sinus+0x28>
    2760:	91 50       	subi	r25, 0x01	; 1
    2762:	50 40       	sbci	r21, 0x00	; 0
    2764:	94 f0       	brlt	.+36     	; 0x278a <ldexp+0x3a>
    2766:	59 f0       	breq	.+22     	; 0x277e <ldexp+0x2e>
    2768:	88 23       	and	r24, r24
    276a:	32 f0       	brmi	.+12     	; 0x2778 <ldexp+0x28>
    276c:	66 0f       	add	r22, r22
    276e:	77 1f       	adc	r23, r23
    2770:	88 1f       	adc	r24, r24
    2772:	91 50       	subi	r25, 0x01	; 1
    2774:	50 40       	sbci	r21, 0x00	; 0
    2776:	c1 f7       	brne	.-16     	; 0x2768 <ldexp+0x18>
    2778:	9e 3f       	cpi	r25, 0xFE	; 254
    277a:	51 05       	cpc	r21, r1
    277c:	2c f7       	brge	.-54     	; 0x2748 <__fp_sinus+0x28>
    277e:	88 0f       	add	r24, r24
    2780:	91 1d       	adc	r25, r1
    2782:	96 95       	lsr	r25
    2784:	87 95       	ror	r24
    2786:	97 f9       	bld	r25, 7
    2788:	08 95       	ret
    278a:	5f 3f       	cpi	r21, 0xFF	; 255
    278c:	ac f0       	brlt	.+42     	; 0x27b8 <ldexp+0x68>
    278e:	98 3e       	cpi	r25, 0xE8	; 232
    2790:	9c f0       	brlt	.+38     	; 0x27b8 <ldexp+0x68>
    2792:	bb 27       	eor	r27, r27
    2794:	86 95       	lsr	r24
    2796:	77 95       	ror	r23
    2798:	67 95       	ror	r22
    279a:	b7 95       	ror	r27
    279c:	08 f4       	brcc	.+2      	; 0x27a0 <ldexp+0x50>
    279e:	b1 60       	ori	r27, 0x01	; 1
    27a0:	93 95       	inc	r25
    27a2:	c1 f7       	brne	.-16     	; 0x2794 <ldexp+0x44>
    27a4:	bb 0f       	add	r27, r27
    27a6:	58 f7       	brcc	.-42     	; 0x277e <ldexp+0x2e>
    27a8:	11 f4       	brne	.+4      	; 0x27ae <ldexp+0x5e>
    27aa:	60 ff       	sbrs	r22, 0
    27ac:	e8 cf       	rjmp	.-48     	; 0x277e <ldexp+0x2e>
    27ae:	6f 5f       	subi	r22, 0xFF	; 255
    27b0:	7f 4f       	sbci	r23, 0xFF	; 255
    27b2:	8f 4f       	sbci	r24, 0xFF	; 255
    27b4:	9f 4f       	sbci	r25, 0xFF	; 255
    27b6:	e3 cf       	rjmp	.-58     	; 0x277e <ldexp+0x2e>
    27b8:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__fp_szero>
    27bc:	16 f0       	brts	.+4      	; 0x27c2 <ldexp+0x72>
    27be:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <__fp_mpack>
    27c2:	0c 94 88 11 	jmp	0x2310	; 0x2310 <__fp_nan>
    27c6:	68 94       	set
    27c8:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__fp_inf>

000027cc <log>:
    27cc:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <__fp_splitA>
    27d0:	a8 f3       	brcs	.-22     	; 0x27bc <ldexp+0x6c>
    27d2:	99 23       	and	r25, r25
    27d4:	c1 f3       	breq	.-16     	; 0x27c6 <ldexp+0x76>
    27d6:	ae f3       	brts	.-22     	; 0x27c2 <ldexp+0x72>
    27d8:	df 93       	push	r29
    27da:	cf 93       	push	r28
    27dc:	1f 93       	push	r17
    27de:	0f 93       	push	r16
    27e0:	ff 92       	push	r15
    27e2:	c9 2f       	mov	r28, r25
    27e4:	dd 27       	eor	r29, r29
    27e6:	88 23       	and	r24, r24
    27e8:	2a f0       	brmi	.+10     	; 0x27f4 <log+0x28>
    27ea:	21 97       	sbiw	r28, 0x01	; 1
    27ec:	66 0f       	add	r22, r22
    27ee:	77 1f       	adc	r23, r23
    27f0:	88 1f       	adc	r24, r24
    27f2:	da f7       	brpl	.-10     	; 0x27ea <log+0x1e>
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e8       	ldi	r20, 0x80	; 128
    27fa:	5f eb       	ldi	r21, 0xBF	; 191
    27fc:	9f e3       	ldi	r25, 0x3F	; 63
    27fe:	88 39       	cpi	r24, 0x98	; 152
    2800:	20 f0       	brcs	.+8      	; 0x280a <log+0x3e>
    2802:	80 3e       	cpi	r24, 0xE0	; 224
    2804:	38 f0       	brcs	.+14     	; 0x2814 <log+0x48>
    2806:	21 96       	adiw	r28, 0x01	; 1
    2808:	8f 77       	andi	r24, 0x7F	; 127
    280a:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
    280e:	eb ed       	ldi	r30, 0xDB	; 219
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	04 c0       	rjmp	.+8      	; 0x281c <log+0x50>
    2814:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__addsf3>
    2818:	e8 e0       	ldi	r30, 0x08	; 8
    281a:	f1 e0       	ldi	r31, 0x01	; 1
    281c:	0e 94 8b 11 	call	0x2316	; 0x2316 <__fp_powser>
    2820:	8b 01       	movw	r16, r22
    2822:	be 01       	movw	r22, r28
    2824:	ec 01       	movw	r28, r24
    2826:	fb 2e       	mov	r15, r27
    2828:	6f 57       	subi	r22, 0x7F	; 127
    282a:	71 09       	sbc	r23, r1
    282c:	75 95       	asr	r23
    282e:	77 1f       	adc	r23, r23
    2830:	88 0b       	sbc	r24, r24
    2832:	99 0b       	sbc	r25, r25
    2834:	0e 94 23 11 	call	0x2246	; 0x2246 <__floatsisf>
    2838:	28 e1       	ldi	r18, 0x18	; 24
    283a:	32 e7       	ldi	r19, 0x72	; 114
    283c:	41 e3       	ldi	r20, 0x31	; 49
    283e:	5f e3       	ldi	r21, 0x3F	; 63
    2840:	0e 94 1a 12 	call	0x2434	; 0x2434 <__mulsf3x>
    2844:	af 2d       	mov	r26, r15
    2846:	98 01       	movw	r18, r16
    2848:	ae 01       	movw	r20, r28
    284a:	ff 90       	pop	r15
    284c:	0f 91       	pop	r16
    284e:	1f 91       	pop	r17
    2850:	cf 91       	pop	r28
    2852:	df 91       	pop	r29
    2854:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__addsf3x>
    2858:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__fp_round>

0000285c <modf>:
    285c:	fa 01       	movw	r30, r20
    285e:	dc 01       	movw	r26, r24
    2860:	aa 0f       	add	r26, r26
    2862:	bb 1f       	adc	r27, r27
    2864:	9b 01       	movw	r18, r22
    2866:	ac 01       	movw	r20, r24
    2868:	bf 57       	subi	r27, 0x7F	; 127
    286a:	28 f4       	brcc	.+10     	; 0x2876 <modf+0x1a>
    286c:	22 27       	eor	r18, r18
    286e:	33 27       	eor	r19, r19
    2870:	44 27       	eor	r20, r20
    2872:	50 78       	andi	r21, 0x80	; 128
    2874:	20 c0       	rjmp	.+64     	; 0x28b6 <modf+0x5a>
    2876:	b7 51       	subi	r27, 0x17	; 23
    2878:	90 f4       	brcc	.+36     	; 0x289e <modf+0x42>
    287a:	ab 2f       	mov	r26, r27
    287c:	00 24       	eor	r0, r0
    287e:	46 95       	lsr	r20
    2880:	37 95       	ror	r19
    2882:	27 95       	ror	r18
    2884:	01 1c       	adc	r0, r1
    2886:	a3 95       	inc	r26
    2888:	d2 f3       	brmi	.-12     	; 0x287e <modf+0x22>
    288a:	00 20       	and	r0, r0
    288c:	71 f0       	breq	.+28     	; 0x28aa <modf+0x4e>
    288e:	22 0f       	add	r18, r18
    2890:	33 1f       	adc	r19, r19
    2892:	44 1f       	adc	r20, r20
    2894:	b3 95       	inc	r27
    2896:	da f3       	brmi	.-10     	; 0x288e <modf+0x32>
    2898:	0e d0       	rcall	.+28     	; 0x28b6 <modf+0x5a>
    289a:	0c 94 d8 0f 	jmp	0x1fb0	; 0x1fb0 <__subsf3>
    289e:	61 30       	cpi	r22, 0x01	; 1
    28a0:	71 05       	cpc	r23, r1
    28a2:	a0 e8       	ldi	r26, 0x80	; 128
    28a4:	8a 07       	cpc	r24, r26
    28a6:	b9 46       	sbci	r27, 0x69	; 105
    28a8:	30 f4       	brcc	.+12     	; 0x28b6 <modf+0x5a>
    28aa:	9b 01       	movw	r18, r22
    28ac:	ac 01       	movw	r20, r24
    28ae:	66 27       	eor	r22, r22
    28b0:	77 27       	eor	r23, r23
    28b2:	88 27       	eor	r24, r24
    28b4:	90 78       	andi	r25, 0x80	; 128
    28b6:	30 96       	adiw	r30, 0x00	; 0
    28b8:	21 f0       	breq	.+8      	; 0x28c2 <modf+0x66>
    28ba:	20 83       	st	Z, r18
    28bc:	31 83       	std	Z+1, r19	; 0x01
    28be:	42 83       	std	Z+2, r20	; 0x02
    28c0:	53 83       	std	Z+3, r21	; 0x03
    28c2:	08 95       	ret

000028c4 <__fp_powsodd>:
    28c4:	9f 93       	push	r25
    28c6:	8f 93       	push	r24
    28c8:	7f 93       	push	r23
    28ca:	6f 93       	push	r22
    28cc:	ff 93       	push	r31
    28ce:	ef 93       	push	r30
    28d0:	9b 01       	movw	r18, r22
    28d2:	ac 01       	movw	r20, r24
    28d4:	0e 94 07 12 	call	0x240e	; 0x240e <__mulsf3>
    28d8:	ef 91       	pop	r30
    28da:	ff 91       	pop	r31
    28dc:	0e 94 8b 11 	call	0x2316	; 0x2316 <__fp_powser>
    28e0:	2f 91       	pop	r18
    28e2:	3f 91       	pop	r19
    28e4:	4f 91       	pop	r20
    28e6:	5f 91       	pop	r21
    28e8:	0c 94 07 12 	jmp	0x240e	; 0x240e <__mulsf3>

000028ec <__divmodhi4>:
    28ec:	97 fb       	bst	r25, 7
    28ee:	07 2e       	mov	r0, r23
    28f0:	16 f4       	brtc	.+4      	; 0x28f6 <__divmodhi4+0xa>
    28f2:	00 94       	com	r0
    28f4:	07 d0       	rcall	.+14     	; 0x2904 <__divmodhi4_neg1>
    28f6:	77 fd       	sbrc	r23, 7
    28f8:	09 d0       	rcall	.+18     	; 0x290c <__divmodhi4_neg2>
    28fa:	0e 94 8a 14 	call	0x2914	; 0x2914 <__udivmodhi4>
    28fe:	07 fc       	sbrc	r0, 7
    2900:	05 d0       	rcall	.+10     	; 0x290c <__divmodhi4_neg2>
    2902:	3e f4       	brtc	.+14     	; 0x2912 <__divmodhi4_exit>

00002904 <__divmodhi4_neg1>:
    2904:	90 95       	com	r25
    2906:	81 95       	neg	r24
    2908:	9f 4f       	sbci	r25, 0xFF	; 255
    290a:	08 95       	ret

0000290c <__divmodhi4_neg2>:
    290c:	70 95       	com	r23
    290e:	61 95       	neg	r22
    2910:	7f 4f       	sbci	r23, 0xFF	; 255

00002912 <__divmodhi4_exit>:
    2912:	08 95       	ret

00002914 <__udivmodhi4>:
    2914:	aa 1b       	sub	r26, r26
    2916:	bb 1b       	sub	r27, r27
    2918:	51 e1       	ldi	r21, 0x11	; 17
    291a:	07 c0       	rjmp	.+14     	; 0x292a <__udivmodhi4_ep>

0000291c <__udivmodhi4_loop>:
    291c:	aa 1f       	adc	r26, r26
    291e:	bb 1f       	adc	r27, r27
    2920:	a6 17       	cp	r26, r22
    2922:	b7 07       	cpc	r27, r23
    2924:	10 f0       	brcs	.+4      	; 0x292a <__udivmodhi4_ep>
    2926:	a6 1b       	sub	r26, r22
    2928:	b7 0b       	sbc	r27, r23

0000292a <__udivmodhi4_ep>:
    292a:	88 1f       	adc	r24, r24
    292c:	99 1f       	adc	r25, r25
    292e:	5a 95       	dec	r21
    2930:	a9 f7       	brne	.-22     	; 0x291c <__udivmodhi4_loop>
    2932:	80 95       	com	r24
    2934:	90 95       	com	r25
    2936:	bc 01       	movw	r22, r24
    2938:	cd 01       	movw	r24, r26
    293a:	08 95       	ret

0000293c <_exit>:
    293c:	f8 94       	cli

0000293e <__stop_program>:
    293e:	ff cf       	rjmp	.-2      	; 0x293e <__stop_program>
